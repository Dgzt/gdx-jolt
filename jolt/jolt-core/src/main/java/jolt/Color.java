/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.idl.IDLBase;

public class Color extends IDLBase {

    private Color Color_TEMP_GEN_0;

    private Vec4 Vec4_TEMP_GEN_0;

    static private Color Color_TEMP_STATIC_GEN_0;

    static private Color Color_TEMP_STATIC_GEN_1;

    static private Color Color_TEMP_STATIC_GEN_2;

    static private Color Color_TEMP_STATIC_GEN_3;

    static private Color Color_TEMP_STATIC_GEN_4;

    static private Color Color_TEMP_STATIC_GEN_5;

    static private Color Color_TEMP_STATIC_GEN_6;

    static private Color Color_TEMP_STATIC_GEN_7;

    static private Color Color_TEMP_STATIC_GEN_8;

    static private Color Color_TEMP_STATIC_GEN_9;

    static private Color Color_TEMP_STATIC_GEN_10;

    static private Color Color_TEMP_STATIC_GEN_11;

    static private Color Color_TEMP_STATIC_GEN_12;

    static private Color Color_TEMP_STATIC_GEN_13;

    static private Color Color_TEMP_STATIC_GEN_14;

    static public final Color T_01 = new Color((byte) 1, (char) 1);

    static public final Color T_02 = new Color((byte) 1, (char) 1);

    static public final Color T_03 = new Color((byte) 1, (char) 1);

    public Color() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Color();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Color(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Color* nativeObject = (Color*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public Color MulColor(Color other) {
        long pointer = internal_native_MulColor((long) getNativeData().getCPointer(), (long) (other != null ? other.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_GEN_0 == null)
            Color_TEMP_GEN_0 = new Color((byte) 1, (char) 1);
        Color_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Color_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Color* nativeObject = (Color*)this_addr;
static Color copy_addr;
copy_addr = (*nativeObject * *((Color* )other_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_MulColor(long this_addr, long other_addr);

    public Vec4 ToVec4() {
        long pointer = internal_native_ToVec4((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec4_TEMP_GEN_0 == null)
            Vec4_TEMP_GEN_0 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Color* nativeObject = (Color*)this_addr;
static Vec4 copy_addr;
copy_addr = nativeObject->ToVec4();
return (jlong)&copy_addr;*/
    private static native long internal_native_ToVec4(long this_addr);

    public int get_mU32() {
        return internal_native_get_mU32((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Color* nativeObject = (Color*)this_addr;
return nativeObject->mU32;
*/
    private static native int internal_native_get_mU32(long this_addr);

    public void set_mU32(int mU32) {
        internal_native_set_mU32((long) getNativeData().getCPointer(), mU32);
    }

    /*[-JNI;-NATIVE]
Color* nativeObject = (Color*)this_addr;
nativeObject->mU32 = mU32;
*/
    private static native void internal_native_set_mU32(long this_addr, int mU32);

    public static Color get_sBlack() {
        long pointer = internal_native_get_sBlack();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_0 == null)
            Color_TEMP_STATIC_GEN_0 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sBlack;
*/
    private static native long internal_native_get_sBlack();

    public static Color get_sDarkRed() {
        long pointer = internal_native_get_sDarkRed();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_1 == null)
            Color_TEMP_STATIC_GEN_1 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_1.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sDarkRed;
*/
    private static native long internal_native_get_sDarkRed();

    public static Color get_sRed() {
        long pointer = internal_native_get_sRed();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_2 == null)
            Color_TEMP_STATIC_GEN_2 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_2.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_2;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sRed;
*/
    private static native long internal_native_get_sRed();

    public static Color get_sDarkGreen() {
        long pointer = internal_native_get_sDarkGreen();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_3 == null)
            Color_TEMP_STATIC_GEN_3 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_3.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_3;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sDarkGreen;
*/
    private static native long internal_native_get_sDarkGreen();

    public static Color get_sGreen() {
        long pointer = internal_native_get_sGreen();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_4 == null)
            Color_TEMP_STATIC_GEN_4 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_4.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_4;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sGreen;
*/
    private static native long internal_native_get_sGreen();

    public static Color get_sDarkBlue() {
        long pointer = internal_native_get_sDarkBlue();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_5 == null)
            Color_TEMP_STATIC_GEN_5 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_5.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_5;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sDarkBlue;
*/
    private static native long internal_native_get_sDarkBlue();

    public static Color get_sBlue() {
        long pointer = internal_native_get_sBlue();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_6 == null)
            Color_TEMP_STATIC_GEN_6 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_6.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_6;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sBlue;
*/
    private static native long internal_native_get_sBlue();

    public static Color get_sYellow() {
        long pointer = internal_native_get_sYellow();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_7 == null)
            Color_TEMP_STATIC_GEN_7 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_7.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_7;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sYellow;
*/
    private static native long internal_native_get_sYellow();

    public static Color get_sPurple() {
        long pointer = internal_native_get_sPurple();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_8 == null)
            Color_TEMP_STATIC_GEN_8 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_8.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_8;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sPurple;
*/
    private static native long internal_native_get_sPurple();

    public static Color get_sCyan() {
        long pointer = internal_native_get_sCyan();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_9 == null)
            Color_TEMP_STATIC_GEN_9 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_9.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_9;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sCyan;
*/
    private static native long internal_native_get_sCyan();

    public static Color get_sOrange() {
        long pointer = internal_native_get_sOrange();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_10 == null)
            Color_TEMP_STATIC_GEN_10 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_10.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_10;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sOrange;
*/
    private static native long internal_native_get_sOrange();

    public static Color get_sDarkOrange() {
        long pointer = internal_native_get_sDarkOrange();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_11 == null)
            Color_TEMP_STATIC_GEN_11 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_11.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_11;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sDarkOrange;
*/
    private static native long internal_native_get_sDarkOrange();

    public static Color get_sGrey() {
        long pointer = internal_native_get_sGrey();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_12 == null)
            Color_TEMP_STATIC_GEN_12 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_12.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_12;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sGrey;
*/
    private static native long internal_native_get_sGrey();

    public static Color get_sLightGrey() {
        long pointer = internal_native_get_sLightGrey();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_13 == null)
            Color_TEMP_STATIC_GEN_13 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_13.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_13;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sLightGrey;
*/
    private static native long internal_native_get_sLightGrey();

    public static Color get_sWhite() {
        long pointer = internal_native_get_sWhite();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Color_TEMP_STATIC_GEN_14 == null)
            Color_TEMP_STATIC_GEN_14 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_14.getNativeData().reset(pointer, false);
        return Color_TEMP_STATIC_GEN_14;
    }

    /*[-JNI;-NATIVE]
return (jlong)&Color::sWhite;
*/
    private static native long internal_native_get_sWhite();

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_MulColor(long this_addr, long other_addr) {
        return internal_native_MulColor(this_addr, other_addr);
    }

    public static long native_ToVec4(long this_addr) {
        return internal_native_ToVec4(this_addr);
    }

    public static int native_get_mU32(long this_addr) {
        return internal_native_get_mU32(this_addr);
    }

    public static void native_set_mU32(long this_addr, int mU32) {
        internal_native_set_mU32(this_addr, mU32);
    }

    public static long native_get_sBlack() {
        return internal_native_get_sBlack();
    }

    public static long native_get_sDarkRed() {
        return internal_native_get_sDarkRed();
    }

    public static long native_get_sRed() {
        return internal_native_get_sRed();
    }

    public static long native_get_sDarkGreen() {
        return internal_native_get_sDarkGreen();
    }

    public static long native_get_sGreen() {
        return internal_native_get_sGreen();
    }

    public static long native_get_sDarkBlue() {
        return internal_native_get_sDarkBlue();
    }

    public static long native_get_sBlue() {
        return internal_native_get_sBlue();
    }

    public static long native_get_sYellow() {
        return internal_native_get_sYellow();
    }

    public static long native_get_sPurple() {
        return internal_native_get_sPurple();
    }

    public static long native_get_sCyan() {
        return internal_native_get_sCyan();
    }

    public static long native_get_sOrange() {
        return internal_native_get_sOrange();
    }

    public static long native_get_sDarkOrange() {
        return internal_native_get_sDarkOrange();
    }

    public static long native_get_sGrey() {
        return internal_native_get_sGrey();
    }

    public static long native_get_sLightGrey() {
        return internal_native_get_sLightGrey();
    }

    public static long native_get_sWhite() {
        return internal_native_get_sWhite();
    }
}
