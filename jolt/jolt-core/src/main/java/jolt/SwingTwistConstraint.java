/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.math.Vec3;

public class SwingTwistConstraint extends TwoBodyConstraint {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Quat Quat_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_1;

    private MotorSettings MotorSettings_TEMP_GEN_0;

    private MotorSettings MotorSettings_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Quat Quat_TEMP_GEN_2;

    private Quat Quat_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    static public final SwingTwistConstraint T_01 = new SwingTwistConstraint((byte) 1, (char) 1);

    static public final SwingTwistConstraint T_02 = new SwingTwistConstraint((byte) 1, (char) 1);

    static public final SwingTwistConstraint T_03 = new SwingTwistConstraint((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SwingTwistConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public Vec3 GetLocalSpacePosition1() {
        long pointer = internal_native_GetLocalSpacePosition1((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLocalSpacePosition1();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetLocalSpacePosition1(long this_addr);

    public Vec3 GetLocalSpacePosition2() {
        long pointer = internal_native_GetLocalSpacePosition2((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLocalSpacePosition2();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetLocalSpacePosition2(long this_addr);

    public Quat GetConstraintToBody1() {
        long pointer = internal_native_GetConstraintToBody1((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetConstraintToBody1();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetConstraintToBody1(long this_addr);

    public Quat GetConstraintToBody2() {
        long pointer = internal_native_GetConstraintToBody2((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_1 == null)
            Quat_TEMP_GEN_1 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetConstraintToBody2();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetConstraintToBody2(long this_addr);

    public float GetNormalHalfConeAngle() {
        return internal_native_GetNormalHalfConeAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetNormalHalfConeAngle();
*/
    private static native float internal_native_GetNormalHalfConeAngle(long this_addr);

    public void SetNormalHalfConeAngle(float inAngle) {
        internal_native_SetNormalHalfConeAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetNormalHalfConeAngle((float)inAngle);
*/
    private static native void internal_native_SetNormalHalfConeAngle(long this_addr, float inAngle);

    public float GetPlaneHalfConeAngle() {
        return internal_native_GetPlaneHalfConeAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetPlaneHalfConeAngle();
*/
    private static native float internal_native_GetPlaneHalfConeAngle(long this_addr);

    public void SetPlaneHalfConeAngle(float inAngle) {
        internal_native_SetPlaneHalfConeAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetPlaneHalfConeAngle((float)inAngle);
*/
    private static native void internal_native_SetPlaneHalfConeAngle(long this_addr, float inAngle);

    public float GetTwistMinAngle() {
        return internal_native_GetTwistMinAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetTwistMinAngle();
*/
    private static native float internal_native_GetTwistMinAngle(long this_addr);

    public void SetTwistMinAngle(float inAngle) {
        internal_native_SetTwistMinAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetTwistMinAngle((float)inAngle);
*/
    private static native void internal_native_SetTwistMinAngle(long this_addr, float inAngle);

    public float GetTwistMaxAngle() {
        return internal_native_GetTwistMaxAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetTwistMaxAngle();
*/
    private static native float internal_native_GetTwistMaxAngle(long this_addr);

    public void SetTwistMaxAngle(float inAngle) {
        internal_native_SetTwistMaxAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetTwistMaxAngle((float)inAngle);
*/
    private static native void internal_native_SetTwistMaxAngle(long this_addr, float inAngle);

    public MotorSettings GetSwingMotorSettings() {
        long pointer = internal_native_GetSwingMotorSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (MotorSettings_TEMP_GEN_0 == null)
            MotorSettings_TEMP_GEN_0 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return MotorSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return (jlong)&nativeObject->GetSwingMotorSettings();
*/
    private static native long internal_native_GetSwingMotorSettings(long this_addr);

    public MotorSettings GetTwistMotorSettings() {
        long pointer = internal_native_GetTwistMotorSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (MotorSettings_TEMP_GEN_1 == null)
            MotorSettings_TEMP_GEN_1 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return MotorSettings_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return (jlong)&nativeObject->GetTwistMotorSettings();
*/
    private static native long internal_native_GetTwistMotorSettings(long this_addr);

    public void SetMaxFrictionTorque(float inFrictionTorque) {
        internal_native_SetMaxFrictionTorque((long) getNativeData().getCPointer(), inFrictionTorque);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetMaxFrictionTorque((float)inFrictionTorque);
*/
    private static native void internal_native_SetMaxFrictionTorque(long this_addr, float inFrictionTorque);

    public float GetMaxFrictionTorque() {
        return internal_native_GetMaxFrictionTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetMaxFrictionTorque();
*/
    private static native float internal_native_GetMaxFrictionTorque(long this_addr);

    public void SetSwingMotorState(int inState) {
        internal_native_SetSwingMotorState((long) getNativeData().getCPointer(), inState);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetSwingMotorState((::EMotorState)inState);
*/
    private static native void internal_native_SetSwingMotorState(long this_addr, int inState);

    public int GetSwingMotorState() {
        return internal_native_GetSwingMotorState((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return (int)nativeObject->GetSwingMotorState();
*/
    private static native int internal_native_GetSwingMotorState(long this_addr);

    public void SetTwistMotorState(int inState) {
        internal_native_SetTwistMotorState((long) getNativeData().getCPointer(), inState);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetTwistMotorState((::EMotorState)inState);
*/
    private static native void internal_native_SetTwistMotorState(long this_addr, int inState);

    public int GetTwistMotorState() {
        return internal_native_GetTwistMotorState((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return (int)nativeObject->GetTwistMotorState();
*/
    private static native int internal_native_GetTwistMotorState(long this_addr);

    public void SetTargetAngularVelocityCS(Vec3 inAngularVelocity) {
        internal_native_SetTargetAngularVelocityCS((long) getNativeData().getCPointer(), (long) (inAngularVelocity != null ? inAngularVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetTargetAngularVelocityCS(*((Vec3* )inAngularVelocity_addr));
*/
    private static native void internal_native_SetTargetAngularVelocityCS(long this_addr, long inAngularVelocity_addr);

    public Vec3 GetTargetAngularVelocityCS() {
        long pointer = internal_native_GetTargetAngularVelocityCS((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTargetAngularVelocityCS();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTargetAngularVelocityCS(long this_addr);

    public void SetTargetOrientationCS(Quat inOrientation) {
        internal_native_SetTargetOrientationCS((long) getNativeData().getCPointer(), (long) (inOrientation != null ? inOrientation.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetTargetOrientationCS(*((Quat* )inOrientation_addr));
*/
    private static native void internal_native_SetTargetOrientationCS(long this_addr, long inOrientation_addr);

    public Quat GetTargetOrientationCS() {
        long pointer = internal_native_GetTargetOrientationCS((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_2 == null)
            Quat_TEMP_GEN_2 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetTargetOrientationCS();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTargetOrientationCS(long this_addr);

    public void SetTargetOrientationBS(Quat inOrientation) {
        internal_native_SetTargetOrientationBS((long) getNativeData().getCPointer(), (long) (inOrientation != null ? inOrientation.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
nativeObject->SetTargetOrientationBS(*((Quat* )inOrientation_addr));
*/
    private static native void internal_native_SetTargetOrientationBS(long this_addr, long inOrientation_addr);

    public Quat GetRotationInConstraintSpace() {
        long pointer = internal_native_GetRotationInConstraintSpace((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_3 == null)
            Quat_TEMP_GEN_3 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetRotationInConstraintSpace();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetRotationInConstraintSpace(long this_addr);

    public Vec3 GetTotalLambdaPosition() {
        long pointer = internal_native_GetTotalLambdaPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTotalLambdaPosition(long this_addr);

    public float GetTotalLambdaTwist() {
        return internal_native_GetTotalLambdaTwist((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetTotalLambdaTwist();
*/
    private static native float internal_native_GetTotalLambdaTwist(long this_addr);

    public float GetTotalLambdaSwingY() {
        return internal_native_GetTotalLambdaSwingY((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetTotalLambdaSwingY();
*/
    private static native float internal_native_GetTotalLambdaSwingY(long this_addr);

    public float GetTotalLambdaSwingZ() {
        return internal_native_GetTotalLambdaSwingZ((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
return nativeObject->GetTotalLambdaSwingZ();
*/
    private static native float internal_native_GetTotalLambdaSwingZ(long this_addr);

    public Vec3 GetTotalLambdaMotor() {
        long pointer = internal_native_GetTotalLambdaMotor((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraint* nativeObject = (SwingTwistConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaMotor();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTotalLambdaMotor(long this_addr);

    public static long native_GetLocalSpacePosition1(long this_addr) {
        return internal_native_GetLocalSpacePosition1(this_addr);
    }

    public static long native_GetLocalSpacePosition2(long this_addr) {
        return internal_native_GetLocalSpacePosition2(this_addr);
    }

    public static long native_GetConstraintToBody1(long this_addr) {
        return internal_native_GetConstraintToBody1(this_addr);
    }

    public static long native_GetConstraintToBody2(long this_addr) {
        return internal_native_GetConstraintToBody2(this_addr);
    }

    public static float native_GetNormalHalfConeAngle(long this_addr) {
        return internal_native_GetNormalHalfConeAngle(this_addr);
    }

    public static void native_SetNormalHalfConeAngle(long this_addr, float inAngle) {
        internal_native_SetNormalHalfConeAngle(this_addr, inAngle);
    }

    public static float native_GetPlaneHalfConeAngle(long this_addr) {
        return internal_native_GetPlaneHalfConeAngle(this_addr);
    }

    public static void native_SetPlaneHalfConeAngle(long this_addr, float inAngle) {
        internal_native_SetPlaneHalfConeAngle(this_addr, inAngle);
    }

    public static float native_GetTwistMinAngle(long this_addr) {
        return internal_native_GetTwistMinAngle(this_addr);
    }

    public static void native_SetTwistMinAngle(long this_addr, float inAngle) {
        internal_native_SetTwistMinAngle(this_addr, inAngle);
    }

    public static float native_GetTwistMaxAngle(long this_addr) {
        return internal_native_GetTwistMaxAngle(this_addr);
    }

    public static void native_SetTwistMaxAngle(long this_addr, float inAngle) {
        internal_native_SetTwistMaxAngle(this_addr, inAngle);
    }

    public static long native_GetSwingMotorSettings(long this_addr) {
        return internal_native_GetSwingMotorSettings(this_addr);
    }

    public static long native_GetTwistMotorSettings(long this_addr) {
        return internal_native_GetTwistMotorSettings(this_addr);
    }

    public static void native_SetMaxFrictionTorque(long this_addr, float inFrictionTorque) {
        internal_native_SetMaxFrictionTorque(this_addr, inFrictionTorque);
    }

    public static float native_GetMaxFrictionTorque(long this_addr) {
        return internal_native_GetMaxFrictionTorque(this_addr);
    }

    public static void native_SetSwingMotorState(long this_addr, int inState) {
        internal_native_SetSwingMotorState(this_addr, inState);
    }

    public static int native_GetSwingMotorState(long this_addr) {
        return internal_native_GetSwingMotorState(this_addr);
    }

    public static void native_SetTwistMotorState(long this_addr, int inState) {
        internal_native_SetTwistMotorState(this_addr, inState);
    }

    public static int native_GetTwistMotorState(long this_addr) {
        return internal_native_GetTwistMotorState(this_addr);
    }

    public static void native_SetTargetAngularVelocityCS(long this_addr, long inAngularVelocity_addr) {
        internal_native_SetTargetAngularVelocityCS(this_addr, inAngularVelocity_addr);
    }

    public static long native_GetTargetAngularVelocityCS(long this_addr) {
        return internal_native_GetTargetAngularVelocityCS(this_addr);
    }

    public static void native_SetTargetOrientationCS(long this_addr, long inOrientation_addr) {
        internal_native_SetTargetOrientationCS(this_addr, inOrientation_addr);
    }

    public static long native_GetTargetOrientationCS(long this_addr) {
        return internal_native_GetTargetOrientationCS(this_addr);
    }

    public static void native_SetTargetOrientationBS(long this_addr, long inOrientation_addr) {
        internal_native_SetTargetOrientationBS(this_addr, inOrientation_addr);
    }

    public static long native_GetRotationInConstraintSpace(long this_addr) {
        return internal_native_GetRotationInConstraintSpace(this_addr);
    }

    public static long native_GetTotalLambdaPosition(long this_addr) {
        return internal_native_GetTotalLambdaPosition(this_addr);
    }

    public static float native_GetTotalLambdaTwist(long this_addr) {
        return internal_native_GetTotalLambdaTwist(this_addr);
    }

    public static float native_GetTotalLambdaSwingY(long this_addr) {
        return internal_native_GetTotalLambdaSwingY(this_addr);
    }

    public static float native_GetTotalLambdaSwingZ(long this_addr) {
        return internal_native_GetTotalLambdaSwingZ(this_addr);
    }

    public static long native_GetTotalLambdaMotor(long this_addr) {
        return internal_native_GetTotalLambdaMotor(this_addr);
    }
}
