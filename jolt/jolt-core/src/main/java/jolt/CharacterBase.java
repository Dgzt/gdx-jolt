/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.idl.IDLBase;
import jolt.math.Vec3;

public class CharacterBase extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_0;

    static public final CharacterBase T_01 = new CharacterBase((byte) 1, (char) 1);

    static public final CharacterBase T_02 = new CharacterBase((byte) 1, (char) 1);

    static public final CharacterBase T_03 = new CharacterBase((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CharacterBase(byte b, char c) {
    }

    public int GetRefCount() {
        return internal_native_GetRefCount((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->GetRefCount();
*/
    private static native int internal_native_GetRefCount(long this_addr);

    public void AddRef() {
        internal_native_AddRef((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->AddRef();
*/
    private static native void internal_native_AddRef(long this_addr);

    public void Release() {
        internal_native_Release((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->Release();
*/
    private static native void internal_native_Release(long this_addr);

    public void SetMaxSlopeAngle(float inMaxSlopeAngle) {
        internal_native_SetMaxSlopeAngle((long) getNativeData().getCPointer(), inMaxSlopeAngle);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->SetMaxSlopeAngle((float)inMaxSlopeAngle);
*/
    private static native void internal_native_SetMaxSlopeAngle(long this_addr, float inMaxSlopeAngle);

    public float GetCosMaxSlopeAngle() {
        return internal_native_GetCosMaxSlopeAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->GetCosMaxSlopeAngle();
*/
    private static native float internal_native_GetCosMaxSlopeAngle(long this_addr);

    public void SetUp(Vec3 inUp) {
        internal_native_SetUp((long) getNativeData().getCPointer(), (long) (inUp != null ? inUp.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->SetUp(*((Vec3* )inUp_addr));
*/
    private static native void internal_native_SetUp(long this_addr, long inUp_addr);

    public Vec3 GetUp() {
        long pointer = internal_native_GetUp((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetUp();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetUp(long this_addr);

    public Shape GetShape() {
        long pointer = internal_native_GetShape((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
const Shape* obj = nativeObject->GetShape();
return (jlong)obj;
*/
    private static native long internal_native_GetShape(long this_addr);

    public int GetGroundState() {
        return internal_native_GetGroundState((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return (int)nativeObject->GetGroundState();
*/
    private static native int internal_native_GetGroundState(long this_addr);

    public boolean IsSlopeTooSteep(Vec3 inNormal) {
        return internal_native_IsSlopeTooSteep((long) getNativeData().getCPointer(), (long) (inNormal != null ? inNormal.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->IsSlopeTooSteep(*((Vec3* )inNormal_addr));
*/
    private static native boolean internal_native_IsSlopeTooSteep(long this_addr, long inNormal_addr);

    public boolean IsSupported() {
        return internal_native_IsSupported((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->IsSupported();
*/
    private static native boolean internal_native_IsSupported(long this_addr);

    public Vec3 GetGroundPosition() {
        long pointer = internal_native_GetGroundPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGroundPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetGroundPosition(long this_addr);

    public Vec3 GetGroundNormal() {
        long pointer = internal_native_GetGroundNormal((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGroundNormal();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetGroundNormal(long this_addr);

    public Vec3 GetGroundVelocity() {
        long pointer = internal_native_GetGroundVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGroundVelocity();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetGroundVelocity(long this_addr);

    public PhysicsMaterial GetGroundMaterial() {
        long pointer = internal_native_GetGroundMaterial((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
const PhysicsMaterial* obj = nativeObject->GetGroundMaterial();
return (jlong)obj;
*/
    private static native long internal_native_GetGroundMaterial(long this_addr);

    public BodyID GetGroundBodyID() {
        long pointer = internal_native_GetGroundBodyID((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static BodyID copy_addr;
copy_addr = nativeObject->GetGroundBodyID();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetGroundBodyID(long this_addr);

    public static int native_GetRefCount(long this_addr) {
        return internal_native_GetRefCount(this_addr);
    }

    public static void native_AddRef(long this_addr) {
        internal_native_AddRef(this_addr);
    }

    public static void native_Release(long this_addr) {
        internal_native_Release(this_addr);
    }

    public static void native_SetMaxSlopeAngle(long this_addr, float inMaxSlopeAngle) {
        internal_native_SetMaxSlopeAngle(this_addr, inMaxSlopeAngle);
    }

    public static float native_GetCosMaxSlopeAngle(long this_addr) {
        return internal_native_GetCosMaxSlopeAngle(this_addr);
    }

    public static void native_SetUp(long this_addr, long inUp_addr) {
        internal_native_SetUp(this_addr, inUp_addr);
    }

    public static long native_GetUp(long this_addr) {
        return internal_native_GetUp(this_addr);
    }

    public static long native_GetShape(long this_addr) {
        return internal_native_GetShape(this_addr);
    }

    public static int native_GetGroundState(long this_addr) {
        return internal_native_GetGroundState(this_addr);
    }

    public static boolean native_IsSlopeTooSteep(long this_addr, long inNormal_addr) {
        return internal_native_IsSlopeTooSteep(this_addr, inNormal_addr);
    }

    public static boolean native_IsSupported(long this_addr) {
        return internal_native_IsSupported(this_addr);
    }

    public static long native_GetGroundPosition(long this_addr) {
        return internal_native_GetGroundPosition(this_addr);
    }

    public static long native_GetGroundNormal(long this_addr) {
        return internal_native_GetGroundNormal(this_addr);
    }

    public static long native_GetGroundVelocity(long this_addr) {
        return internal_native_GetGroundVelocity(this_addr);
    }

    public static long native_GetGroundMaterial(long this_addr) {
        return internal_native_GetGroundMaterial(this_addr);
    }

    public static long native_GetGroundBodyID(long this_addr) {
        return internal_native_GetGroundBodyID(this_addr);
    }
}
