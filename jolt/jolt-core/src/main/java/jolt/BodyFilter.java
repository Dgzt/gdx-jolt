/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.idl.IDLBase;

public class BodyFilter extends IDLBase {

    static private BodyID BodyID_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class BodyFilterJS : public BodyFilter {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID ShouldCollideJ_ID = 0;
	inline static jmethodID ShouldCollideLockedJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(BodyFilterJS::jClassID == 0) {
		BodyFilterJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		BodyFilterJS::ShouldCollideJ_ID = env->GetMethodID(jClassID, "internal_ShouldCollide", "(J)Z");
		BodyFilterJS::ShouldCollideLockedJ_ID = env->GetMethodID(jClassID, "internal_ShouldCollideLocked", "(J)Z");
	}
}
virtual bool ShouldCollide(const BodyID& inBodyID) const {
   return env->CallBooleanMethod(obj, BodyFilterJS::ShouldCollideJ_ID, (jlong)&inBodyID);
}
virtual bool ShouldCollideLocked(const Body& inBody) const {
   return env->CallBooleanMethod(obj, BodyFilterJS::ShouldCollideLockedJ_ID, (jlong)&inBody);
}
};
*/
    @Deprecated()
    public BodyFilter(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
BodyFilterJS* nativeObject = (BodyFilterJS*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public BodyFilter() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(getNativeData().getCPointer());
    }

    protected boolean ShouldCollide(BodyID inBodyID) {
        return false;
    }

    private boolean internal_ShouldCollide(long inBodyID) {
        if (BodyID_TEMP_STATIC_GEN_0 == null)
            BodyID_TEMP_STATIC_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_STATIC_GEN_0.getNativeData().reset(inBodyID, false);
        return ShouldCollide(BodyID_TEMP_STATIC_GEN_0);
    }

    protected boolean ShouldCollideLocked(Body inBody) {
        return false;
    }

    private boolean internal_ShouldCollideLocked(long inBody) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.getNativeData().reset(inBody, false);
        return ShouldCollideLocked(Body_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new BodyFilterJS();
*/
    private static native long internal_native_create();

    /*[-JNI;-NATIVE]
BodyFilterJS* nativeObject = (BodyFilterJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    private native void internal_native_setupCallback(long this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
