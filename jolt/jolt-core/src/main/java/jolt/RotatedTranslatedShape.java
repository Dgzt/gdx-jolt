/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.math.Vec3;

public class RotatedTranslatedShape extends DecoratedShape {

    private Quat Quat_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    static public final RotatedTranslatedShape T_01 = new RotatedTranslatedShape((byte) 1, (char) 1);

    static public final RotatedTranslatedShape T_02 = new RotatedTranslatedShape((byte) 1, (char) 1);

    static public final RotatedTranslatedShape T_03 = new RotatedTranslatedShape((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RotatedTranslatedShape(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public Quat GetRotation() {
        long pointer = internal_native_GetRotation((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RotatedTranslatedShape* nativeObject = (RotatedTranslatedShape*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetRotation();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetRotation(long this_addr);

    public Vec3 GetPosition() {
        long pointer = internal_native_GetPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RotatedTranslatedShape* nativeObject = (RotatedTranslatedShape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetPosition(long this_addr);

    public static long native_GetRotation(long this_addr) {
        return internal_native_GetRotation(this_addr);
    }

    public static long native_GetPosition(long this_addr) {
        return internal_native_GetPosition(this_addr);
    }
}
