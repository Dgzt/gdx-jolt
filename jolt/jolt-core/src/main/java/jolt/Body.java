/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.physics.softbody.SoftBodyCreationSettings;

public class Body extends IDLBase {

    private BodyID BodyID_TEMP_GEN_0;

    private CollisionGroup CollisionGroup_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Mat44 Mat44_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_4;

    private Quat Quat_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_5;

    private Mat44 Mat44_TEMP_GEN_2;

    private Mat44 Mat44_TEMP_GEN_3;

    private AABox AABox_TEMP_GEN_0;

    private TransformedShape TransformedShape_TEMP_GEN_0;

    private BodyCreationSettings BodyCreationSettings_TEMP_GEN_0;

    private SoftBodyCreationSettings SoftBodyCreationSettings_TEMP_GEN_0;

    private MotionProperties MotionProperties_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_6;

    static public final Body T_01 = new Body((byte) 1, (char) 1);

    static public final Body T_02 = new Body((byte) 1, (char) 1);

    static public final Body T_03 = new Body((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Body(byte b, char c) {
    }

    public BodyID GetID() {
        long pointer = internal_native_GetID((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return (jlong)&nativeObject->GetID();
*/
    private static native long internal_native_GetID(long this_addr);

    public boolean IsActive() {
        return internal_native_IsActive((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsActive();
*/
    private static native boolean internal_native_IsActive(long this_addr);

    public boolean IsRigidBody() {
        return internal_native_IsRigidBody((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsRigidBody();
*/
    private static native boolean internal_native_IsRigidBody(long this_addr);

    public boolean IsSoftBody() {
        return internal_native_IsSoftBody((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsSoftBody();
*/
    private static native boolean internal_native_IsSoftBody(long this_addr);

    public boolean IsStatic() {
        return internal_native_IsStatic((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsStatic();
*/
    private static native boolean internal_native_IsStatic(long this_addr);

    public boolean IsKinematic() {
        return internal_native_IsKinematic((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsKinematic();
*/
    private static native boolean internal_native_IsKinematic(long this_addr);

    public boolean IsDynamic() {
        return internal_native_IsDynamic((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsDynamic();
*/
    private static native boolean internal_native_IsDynamic(long this_addr);

    public boolean CanBeKinematicOrDynamic() {
        return internal_native_CanBeKinematicOrDynamic((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->CanBeKinematicOrDynamic();
*/
    private static native boolean internal_native_CanBeKinematicOrDynamic(long this_addr);

    public int GetBodyType() {
        return internal_native_GetBodyType((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return (int)nativeObject->GetBodyType();
*/
    private static native int internal_native_GetBodyType(long this_addr);

    public int GetMotionType() {
        return internal_native_GetMotionType((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return (int)nativeObject->GetMotionType();
*/
    private static native int internal_native_GetMotionType(long this_addr);

    public void SetIsSensor(boolean inIsSensor) {
        internal_native_SetIsSensor((long) getNativeData().getCPointer(), inIsSensor);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetIsSensor(inIsSensor);
*/
    private static native void internal_native_SetIsSensor(long this_addr, boolean inIsSensor);

    public boolean IsSensor() {
        return internal_native_IsSensor((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsSensor();
*/
    private static native boolean internal_native_IsSensor(long this_addr);

    public void SetCollideKinematicVsNonDynamic(boolean inCollide) {
        internal_native_SetCollideKinematicVsNonDynamic((long) getNativeData().getCPointer(), inCollide);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetCollideKinematicVsNonDynamic(inCollide);
*/
    private static native void internal_native_SetCollideKinematicVsNonDynamic(long this_addr, boolean inCollide);

    public boolean GetCollideKinematicVsNonDynamic() {
        return internal_native_GetCollideKinematicVsNonDynamic((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetCollideKinematicVsNonDynamic();
*/
    private static native boolean internal_native_GetCollideKinematicVsNonDynamic(long this_addr);

    public void SetUseManifoldReduction(boolean inUseReduction) {
        internal_native_SetUseManifoldReduction((long) getNativeData().getCPointer(), inUseReduction);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetUseManifoldReduction(inUseReduction);
*/
    private static native void internal_native_SetUseManifoldReduction(long this_addr, boolean inUseReduction);

    public boolean GetUseManifoldReduction() {
        return internal_native_GetUseManifoldReduction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetUseManifoldReduction();
*/
    private static native boolean internal_native_GetUseManifoldReduction(long this_addr);

    public void SetApplyGyroscopicForce(boolean inApply) {
        internal_native_SetApplyGyroscopicForce((long) getNativeData().getCPointer(), inApply);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetApplyGyroscopicForce(inApply);
*/
    private static native void internal_native_SetApplyGyroscopicForce(long this_addr, boolean inApply);

    public boolean GetApplyGyroscopicForce() {
        return internal_native_GetApplyGyroscopicForce((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetApplyGyroscopicForce();
*/
    private static native boolean internal_native_GetApplyGyroscopicForce(long this_addr);

    public void SetEnhancedInternalEdgeRemoval(boolean inApply) {
        internal_native_SetEnhancedInternalEdgeRemoval((long) getNativeData().getCPointer(), inApply);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetEnhancedInternalEdgeRemoval(inApply);
*/
    private static native void internal_native_SetEnhancedInternalEdgeRemoval(long this_addr, boolean inApply);

    public boolean GetEnhancedInternalEdgeRemoval() {
        return internal_native_GetEnhancedInternalEdgeRemoval((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetEnhancedInternalEdgeRemoval();
*/
    private static native boolean internal_native_GetEnhancedInternalEdgeRemoval(long this_addr);

    public int GetObjectLayer() {
        return internal_native_GetObjectLayer((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetObjectLayer();
*/
    private static native int internal_native_GetObjectLayer(long this_addr);

    public CollisionGroup GetCollisionGroup() {
        long pointer = internal_native_GetCollisionGroup((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (CollisionGroup_TEMP_GEN_0 == null)
            CollisionGroup_TEMP_GEN_0 = new CollisionGroup((byte) 1, (char) 1);
        CollisionGroup_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return CollisionGroup_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return (jlong)&nativeObject->GetCollisionGroup();
*/
    private static native long internal_native_GetCollisionGroup(long this_addr);

    public boolean GetAllowSleeping() {
        return internal_native_GetAllowSleeping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetAllowSleeping();
*/
    private static native boolean internal_native_GetAllowSleeping(long this_addr);

    public void SetAllowSleeping(boolean inAllow) {
        internal_native_SetAllowSleeping((long) getNativeData().getCPointer(), inAllow);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetAllowSleeping(inAllow);
*/
    private static native void internal_native_SetAllowSleeping(long this_addr, boolean inAllow);

    public void ResetSleepTimer() {
        internal_native_ResetSleepTimer((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->ResetSleepTimer();
*/
    private static native void internal_native_ResetSleepTimer(long this_addr);

    public float GetFriction() {
        return internal_native_GetFriction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetFriction();
*/
    private static native float internal_native_GetFriction(long this_addr);

    public void SetFriction(float inFriction) {
        internal_native_SetFriction((long) getNativeData().getCPointer(), inFriction);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetFriction((float)inFriction);
*/
    private static native void internal_native_SetFriction(long this_addr, float inFriction);

    public float GetRestitution() {
        return internal_native_GetRestitution((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetRestitution();
*/
    private static native float internal_native_GetRestitution(long this_addr);

    public void SetRestitution(float inRestitution) {
        internal_native_SetRestitution((long) getNativeData().getCPointer(), inRestitution);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetRestitution((float)inRestitution);
*/
    private static native void internal_native_SetRestitution(long this_addr, float inRestitution);

    public Vec3 GetLinearVelocity() {
        long pointer = internal_native_GetLinearVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLinearVelocity();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetLinearVelocity(long this_addr);

    public void SetLinearVelocity(Vec3 inVelocity) {
        internal_native_SetLinearVelocity((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetLinearVelocity(*((Vec3* )inVelocity_addr));
*/
    private static native void internal_native_SetLinearVelocity(long this_addr, long inVelocity_addr);

    public void SetLinearVelocityClamped(Vec3 inVelocity) {
        internal_native_SetLinearVelocityClamped((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetLinearVelocityClamped(*((Vec3* )inVelocity_addr));
*/
    private static native void internal_native_SetLinearVelocityClamped(long this_addr, long inVelocity_addr);

    public Vec3 GetAngularVelocity() {
        long pointer = internal_native_GetAngularVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAngularVelocity();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetAngularVelocity(long this_addr);

    public void SetAngularVelocity(Vec3 inVelocity) {
        internal_native_SetAngularVelocity((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetAngularVelocity(*((Vec3* )inVelocity_addr));
*/
    private static native void internal_native_SetAngularVelocity(long this_addr, long inVelocity_addr);

    public void SetAngularVelocityClamped(Vec3 inVelocity) {
        internal_native_SetAngularVelocityClamped((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetAngularVelocityClamped(*((Vec3* )inVelocity_addr));
*/
    private static native void internal_native_SetAngularVelocityClamped(long this_addr, long inVelocity_addr);

    public void AddForce(Vec3 inForce) {
        internal_native_AddForce((long) getNativeData().getCPointer(), (long) (inForce != null ? inForce.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->AddForce(*((Vec3* )inForce_addr));
*/
    private static native void internal_native_AddForce(long this_addr, long inForce_addr);

    public void AddForce(Vec3 inForce, Vec3 inPosition) {
        internal_native_AddForce((long) getNativeData().getCPointer(), (long) (inForce != null ? inForce.getNativeData().getCPointer() : 0), (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->AddForce(*((Vec3* )inForce_addr), *((Vec3* )inPosition_addr));
*/
    private static native void internal_native_AddForce(long this_addr, long inForce_addr, long inPosition_addr);

    public void AddTorque(Vec3 inTorque) {
        internal_native_AddTorque((long) getNativeData().getCPointer(), (long) (inTorque != null ? inTorque.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->AddTorque(*((Vec3* )inTorque_addr));
*/
    private static native void internal_native_AddTorque(long this_addr, long inTorque_addr);

    public Vec3 GetAccumulatedForce() {
        long pointer = internal_native_GetAccumulatedForce((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAccumulatedForce();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetAccumulatedForce(long this_addr);

    public Vec3 GetAccumulatedTorque() {
        long pointer = internal_native_GetAccumulatedTorque((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAccumulatedTorque();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetAccumulatedTorque(long this_addr);

    public void ResetForce() {
        internal_native_ResetForce((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->ResetForce();
*/
    private static native void internal_native_ResetForce(long this_addr);

    public void ResetTorque() {
        internal_native_ResetTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->ResetTorque();
*/
    private static native void internal_native_ResetTorque(long this_addr);

    public void ResetMotion() {
        internal_native_ResetMotion((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->ResetMotion();
*/
    private static native void internal_native_ResetMotion(long this_addr);

    public void AddImpulse(Vec3 inImpulse) {
        internal_native_AddImpulse((long) getNativeData().getCPointer(), (long) (inImpulse != null ? inImpulse.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->AddImpulse(*((Vec3* )inImpulse_addr));
*/
    private static native void internal_native_AddImpulse(long this_addr, long inImpulse_addr);

    public void AddImpulse(Vec3 inImpulse, Vec3 inPosition) {
        internal_native_AddImpulse((long) getNativeData().getCPointer(), (long) (inImpulse != null ? inImpulse.getNativeData().getCPointer() : 0), (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->AddImpulse(*((Vec3* )inImpulse_addr), *((Vec3* )inPosition_addr));
*/
    private static native void internal_native_AddImpulse(long this_addr, long inImpulse_addr, long inPosition_addr);

    public void AddAngularImpulse(Vec3 inAngularImpulse) {
        internal_native_AddAngularImpulse((long) getNativeData().getCPointer(), (long) (inAngularImpulse != null ? inAngularImpulse.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->AddAngularImpulse(*((Vec3* )inAngularImpulse_addr));
*/
    private static native void internal_native_AddAngularImpulse(long this_addr, long inAngularImpulse_addr);

    public void MoveKinematic(Vec3 inPosition, Quat inRotation, float inDeltaTime) {
        internal_native_MoveKinematic((long) getNativeData().getCPointer(), (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0), inDeltaTime);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->MoveKinematic(*((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), (float)inDeltaTime);
*/
    private static native void internal_native_MoveKinematic(long this_addr, long inPosition_addr, long inRotation_addr, float inDeltaTime);

    public boolean ApplyBuoyancyImpulse(Vec3 inSurfacePosition, Vec3 inSurfaceNormal, float inBuoyancy, float inLinearDrag, float inAngularDrag, Vec3 inFluidVelocity, Vec3 inGravity, float inDeltaTime) {
        return internal_native_ApplyBuoyancyImpulse((long) getNativeData().getCPointer(), (long) (inSurfacePosition != null ? inSurfacePosition.getNativeData().getCPointer() : 0), (long) (inSurfaceNormal != null ? inSurfaceNormal.getNativeData().getCPointer() : 0), inBuoyancy, inLinearDrag, inAngularDrag, (long) (inFluidVelocity != null ? inFluidVelocity.getNativeData().getCPointer() : 0), (long) (inGravity != null ? inGravity.getNativeData().getCPointer() : 0), inDeltaTime);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->ApplyBuoyancyImpulse(*((Vec3* )inSurfacePosition_addr), *((Vec3* )inSurfaceNormal_addr), (float)inBuoyancy, (float)inLinearDrag, (float)inAngularDrag, *((Vec3* )inFluidVelocity_addr), *((Vec3* )inGravity_addr), (float)inDeltaTime);
*/
    private static native boolean internal_native_ApplyBuoyancyImpulse(long this_addr, long inSurfacePosition_addr, long inSurfaceNormal_addr, float inBuoyancy, float inLinearDrag, float inAngularDrag, long inFluidVelocity_addr, long inGravity_addr, float inDeltaTime);

    public boolean IsInBroadPhase() {
        return internal_native_IsInBroadPhase((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->IsInBroadPhase();
*/
    private static native boolean internal_native_IsInBroadPhase(long this_addr);

    public Mat44 GetInverseInertia() {
        long pointer = internal_native_GetInverseInertia((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetInverseInertia();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetInverseInertia(long this_addr);

    public Shape GetShape() {
        long pointer = internal_native_GetShape((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
const Shape* obj = nativeObject->GetShape();
return (jlong)obj;
*/
    private static native long internal_native_GetShape(long this_addr);

    public Vec3 GetPosition() {
        long pointer = internal_native_GetPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetPosition(long this_addr);

    public Quat GetRotation() {
        long pointer = internal_native_GetRotation((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetRotation();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetRotation(long this_addr);

    public Mat44 GetWorldTransform() {
        long pointer = internal_native_GetWorldTransform((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Mat44_TEMP_GEN_1 == null)
            Mat44_TEMP_GEN_1 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetWorldTransform();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetWorldTransform(long this_addr);

    public Vec3 GetCenterOfMassPosition() {
        long pointer = internal_native_GetCenterOfMassPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetCenterOfMassPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetCenterOfMassPosition(long this_addr);

    public Mat44 GetCenterOfMassTransform() {
        long pointer = internal_native_GetCenterOfMassTransform((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Mat44_TEMP_GEN_2 == null)
            Mat44_TEMP_GEN_2 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetCenterOfMassTransform();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetCenterOfMassTransform(long this_addr);

    public Mat44 GetInverseCenterOfMassTransform() {
        long pointer = internal_native_GetInverseCenterOfMassTransform((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Mat44_TEMP_GEN_3 == null)
            Mat44_TEMP_GEN_3 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetInverseCenterOfMassTransform();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetInverseCenterOfMassTransform(long this_addr);

    public AABox GetWorldSpaceBounds() {
        long pointer = internal_native_GetWorldSpaceBounds((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_GEN_0 == null)
            AABox_TEMP_GEN_0 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return AABox_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static AABox copy_addr;
copy_addr = nativeObject->GetWorldSpaceBounds();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetWorldSpaceBounds(long this_addr);

    public TransformedShape GetTransformedShape() {
        long pointer = internal_native_GetTransformedShape((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (TransformedShape_TEMP_GEN_0 == null)
            TransformedShape_TEMP_GEN_0 = new TransformedShape((byte) 1, (char) 1);
        TransformedShape_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return TransformedShape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static TransformedShape copy_addr;
copy_addr = nativeObject->GetTransformedShape();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTransformedShape(long this_addr);

    public BodyCreationSettings GetBodyCreationSettings() {
        long pointer = internal_native_GetBodyCreationSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (BodyCreationSettings_TEMP_GEN_0 == null)
            BodyCreationSettings_TEMP_GEN_0 = new BodyCreationSettings((byte) 1, (char) 1);
        BodyCreationSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return BodyCreationSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static BodyCreationSettings copy_addr;
copy_addr = nativeObject->GetBodyCreationSettings();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetBodyCreationSettings(long this_addr);

    public SoftBodyCreationSettings GetSoftBodyCreationSettings() {
        long pointer = internal_native_GetSoftBodyCreationSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SoftBodyCreationSettings_TEMP_GEN_0 == null)
            SoftBodyCreationSettings_TEMP_GEN_0 = new SoftBodyCreationSettings((byte) 1, (char) 1);
        SoftBodyCreationSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SoftBodyCreationSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static SoftBodyCreationSettings copy_addr;
copy_addr = nativeObject->GetSoftBodyCreationSettings();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetSoftBodyCreationSettings(long this_addr);

    public MotionProperties GetMotionProperties() {
        long pointer = internal_native_GetMotionProperties((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (MotionProperties_TEMP_GEN_0 == null)
            MotionProperties_TEMP_GEN_0 = new MotionProperties((byte) 1, (char) 1);
        MotionProperties_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return MotionProperties_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
MotionProperties* obj = nativeObject->GetMotionProperties();
return (jlong)obj;
*/
    private static native long internal_native_GetMotionProperties(long this_addr);

    public Vec3 GetWorldSpaceSurfaceNormal(SubShapeID inSubShapeID, Vec3 inPosition) {
        long pointer = internal_native_GetWorldSpaceSurfaceNormal((long) getNativeData().getCPointer(), (long) (inSubShapeID != null ? inSubShapeID.getNativeData().getCPointer() : 0), (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetWorldSpaceSurfaceNormal(*((SubShapeID* )inSubShapeID_addr), *((Vec3* )inPosition_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_GetWorldSpaceSurfaceNormal(long this_addr, long inSubShapeID_addr, long inPosition_addr);

    public long GetUserData() {
        return internal_native_GetUserData((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
return nativeObject->GetUserData();
*/
    private static native long internal_native_GetUserData(long this_addr);

    public void SetUserData(long inUserData) {
        internal_native_SetUserData((long) getNativeData().getCPointer(), inUserData);
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetUserData(inUserData);
*/
    private static native void internal_native_SetUserData(long this_addr, long inUserData);

    public void SetCollisionGroup(CollisionGroup inGroup) {
        internal_native_SetCollisionGroup((long) getNativeData().getCPointer(), (long) (inGroup != null ? inGroup.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Body* nativeObject = (Body*)this_addr;
nativeObject->SetCollisionGroup(*((CollisionGroup* )inGroup_addr));
*/
    private static native void internal_native_SetCollisionGroup(long this_addr, long inGroup_addr);

    public static long native_GetID(long this_addr) {
        return internal_native_GetID(this_addr);
    }

    public static boolean native_IsActive(long this_addr) {
        return internal_native_IsActive(this_addr);
    }

    public static boolean native_IsRigidBody(long this_addr) {
        return internal_native_IsRigidBody(this_addr);
    }

    public static boolean native_IsSoftBody(long this_addr) {
        return internal_native_IsSoftBody(this_addr);
    }

    public static boolean native_IsStatic(long this_addr) {
        return internal_native_IsStatic(this_addr);
    }

    public static boolean native_IsKinematic(long this_addr) {
        return internal_native_IsKinematic(this_addr);
    }

    public static boolean native_IsDynamic(long this_addr) {
        return internal_native_IsDynamic(this_addr);
    }

    public static boolean native_CanBeKinematicOrDynamic(long this_addr) {
        return internal_native_CanBeKinematicOrDynamic(this_addr);
    }

    public static int native_GetBodyType(long this_addr) {
        return internal_native_GetBodyType(this_addr);
    }

    public static int native_GetMotionType(long this_addr) {
        return internal_native_GetMotionType(this_addr);
    }

    public static void native_SetIsSensor(long this_addr, boolean inIsSensor) {
        internal_native_SetIsSensor(this_addr, inIsSensor);
    }

    public static boolean native_IsSensor(long this_addr) {
        return internal_native_IsSensor(this_addr);
    }

    public static void native_SetCollideKinematicVsNonDynamic(long this_addr, boolean inCollide) {
        internal_native_SetCollideKinematicVsNonDynamic(this_addr, inCollide);
    }

    public static boolean native_GetCollideKinematicVsNonDynamic(long this_addr) {
        return internal_native_GetCollideKinematicVsNonDynamic(this_addr);
    }

    public static void native_SetUseManifoldReduction(long this_addr, boolean inUseReduction) {
        internal_native_SetUseManifoldReduction(this_addr, inUseReduction);
    }

    public static boolean native_GetUseManifoldReduction(long this_addr) {
        return internal_native_GetUseManifoldReduction(this_addr);
    }

    public static void native_SetApplyGyroscopicForce(long this_addr, boolean inApply) {
        internal_native_SetApplyGyroscopicForce(this_addr, inApply);
    }

    public static boolean native_GetApplyGyroscopicForce(long this_addr) {
        return internal_native_GetApplyGyroscopicForce(this_addr);
    }

    public static void native_SetEnhancedInternalEdgeRemoval(long this_addr, boolean inApply) {
        internal_native_SetEnhancedInternalEdgeRemoval(this_addr, inApply);
    }

    public static boolean native_GetEnhancedInternalEdgeRemoval(long this_addr) {
        return internal_native_GetEnhancedInternalEdgeRemoval(this_addr);
    }

    public static int native_GetObjectLayer(long this_addr) {
        return internal_native_GetObjectLayer(this_addr);
    }

    public static long native_GetCollisionGroup(long this_addr) {
        return internal_native_GetCollisionGroup(this_addr);
    }

    public static boolean native_GetAllowSleeping(long this_addr) {
        return internal_native_GetAllowSleeping(this_addr);
    }

    public static void native_SetAllowSleeping(long this_addr, boolean inAllow) {
        internal_native_SetAllowSleeping(this_addr, inAllow);
    }

    public static void native_ResetSleepTimer(long this_addr) {
        internal_native_ResetSleepTimer(this_addr);
    }

    public static float native_GetFriction(long this_addr) {
        return internal_native_GetFriction(this_addr);
    }

    public static void native_SetFriction(long this_addr, float inFriction) {
        internal_native_SetFriction(this_addr, inFriction);
    }

    public static float native_GetRestitution(long this_addr) {
        return internal_native_GetRestitution(this_addr);
    }

    public static void native_SetRestitution(long this_addr, float inRestitution) {
        internal_native_SetRestitution(this_addr, inRestitution);
    }

    public static long native_GetLinearVelocity(long this_addr) {
        return internal_native_GetLinearVelocity(this_addr);
    }

    public static void native_SetLinearVelocity(long this_addr, long inVelocity_addr) {
        internal_native_SetLinearVelocity(this_addr, inVelocity_addr);
    }

    public static void native_SetLinearVelocityClamped(long this_addr, long inVelocity_addr) {
        internal_native_SetLinearVelocityClamped(this_addr, inVelocity_addr);
    }

    public static long native_GetAngularVelocity(long this_addr) {
        return internal_native_GetAngularVelocity(this_addr);
    }

    public static void native_SetAngularVelocity(long this_addr, long inVelocity_addr) {
        internal_native_SetAngularVelocity(this_addr, inVelocity_addr);
    }

    public static void native_SetAngularVelocityClamped(long this_addr, long inVelocity_addr) {
        internal_native_SetAngularVelocityClamped(this_addr, inVelocity_addr);
    }

    public static void native_AddForce(long this_addr, long inForce_addr) {
        internal_native_AddForce(this_addr, inForce_addr);
    }

    public static void native_AddForce(long this_addr, long inForce_addr, long inPosition_addr) {
        internal_native_AddForce(this_addr, inForce_addr, inPosition_addr);
    }

    public static void native_AddTorque(long this_addr, long inTorque_addr) {
        internal_native_AddTorque(this_addr, inTorque_addr);
    }

    public static long native_GetAccumulatedForce(long this_addr) {
        return internal_native_GetAccumulatedForce(this_addr);
    }

    public static long native_GetAccumulatedTorque(long this_addr) {
        return internal_native_GetAccumulatedTorque(this_addr);
    }

    public static void native_ResetForce(long this_addr) {
        internal_native_ResetForce(this_addr);
    }

    public static void native_ResetTorque(long this_addr) {
        internal_native_ResetTorque(this_addr);
    }

    public static void native_ResetMotion(long this_addr) {
        internal_native_ResetMotion(this_addr);
    }

    public static void native_AddImpulse(long this_addr, long inImpulse_addr) {
        internal_native_AddImpulse(this_addr, inImpulse_addr);
    }

    public static void native_AddImpulse(long this_addr, long inImpulse_addr, long inPosition_addr) {
        internal_native_AddImpulse(this_addr, inImpulse_addr, inPosition_addr);
    }

    public static void native_AddAngularImpulse(long this_addr, long inAngularImpulse_addr) {
        internal_native_AddAngularImpulse(this_addr, inAngularImpulse_addr);
    }

    public static void native_MoveKinematic(long this_addr, long inPosition_addr, long inRotation_addr, float inDeltaTime) {
        internal_native_MoveKinematic(this_addr, inPosition_addr, inRotation_addr, inDeltaTime);
    }

    public static boolean native_ApplyBuoyancyImpulse(long this_addr, long inSurfacePosition_addr, long inSurfaceNormal_addr, float inBuoyancy, float inLinearDrag, float inAngularDrag, long inFluidVelocity_addr, long inGravity_addr, float inDeltaTime) {
        return internal_native_ApplyBuoyancyImpulse(this_addr, inSurfacePosition_addr, inSurfaceNormal_addr, inBuoyancy, inLinearDrag, inAngularDrag, inFluidVelocity_addr, inGravity_addr, inDeltaTime);
    }

    public static boolean native_IsInBroadPhase(long this_addr) {
        return internal_native_IsInBroadPhase(this_addr);
    }

    public static long native_GetInverseInertia(long this_addr) {
        return internal_native_GetInverseInertia(this_addr);
    }

    public static long native_GetShape(long this_addr) {
        return internal_native_GetShape(this_addr);
    }

    public static long native_GetPosition(long this_addr) {
        return internal_native_GetPosition(this_addr);
    }

    public static long native_GetRotation(long this_addr) {
        return internal_native_GetRotation(this_addr);
    }

    public static long native_GetWorldTransform(long this_addr) {
        return internal_native_GetWorldTransform(this_addr);
    }

    public static long native_GetCenterOfMassPosition(long this_addr) {
        return internal_native_GetCenterOfMassPosition(this_addr);
    }

    public static long native_GetCenterOfMassTransform(long this_addr) {
        return internal_native_GetCenterOfMassTransform(this_addr);
    }

    public static long native_GetInverseCenterOfMassTransform(long this_addr) {
        return internal_native_GetInverseCenterOfMassTransform(this_addr);
    }

    public static long native_GetWorldSpaceBounds(long this_addr) {
        return internal_native_GetWorldSpaceBounds(this_addr);
    }

    public static long native_GetTransformedShape(long this_addr) {
        return internal_native_GetTransformedShape(this_addr);
    }

    public static long native_GetBodyCreationSettings(long this_addr) {
        return internal_native_GetBodyCreationSettings(this_addr);
    }

    public static long native_GetSoftBodyCreationSettings(long this_addr) {
        return internal_native_GetSoftBodyCreationSettings(this_addr);
    }

    public static long native_GetMotionProperties(long this_addr) {
        return internal_native_GetMotionProperties(this_addr);
    }

    public static long native_GetWorldSpaceSurfaceNormal(long this_addr, long inSubShapeID_addr, long inPosition_addr) {
        return internal_native_GetWorldSpaceSurfaceNormal(this_addr, inSubShapeID_addr, inPosition_addr);
    }

    public static long native_GetUserData(long this_addr) {
        return internal_native_GetUserData(this_addr);
    }

    public static void native_SetUserData(long this_addr, long inUserData) {
        internal_native_SetUserData(this_addr, inUserData);
    }

    public static void native_SetCollisionGroup(long this_addr, long inGroup_addr) {
        internal_native_SetCollisionGroup(this_addr, inGroup_addr);
    }
}
