/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.core;

public class JobSystemThreadPool extends JobSystemWithBarrier {

    static public final JobSystemThreadPool NULL = JobSystemThreadPool.native_new();

    static public final JobSystemThreadPool T_01 = JobSystemThreadPool.native_new();

    static public final JobSystemThreadPool T_02 = JobSystemThreadPool.native_new();

    static public final JobSystemThreadPool T_03 = JobSystemThreadPool.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected JobSystemThreadPool(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static JobSystemThreadPool native_new() {
        return new JobSystemThreadPool((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JobSystemThreadPool* nativeObject = (JobSystemThreadPool*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public int GetMaxConcurrency() {
        return internal_native_GetMaxConcurrency(native_address);
    }

    /*[-JNI;-NATIVE]
JobSystemThreadPool* nativeObject = (JobSystemThreadPool*)this_addr;
return nativeObject->GetMaxConcurrency();
*/
    public static native int internal_native_GetMaxConcurrency(long this_addr);

    public void SetNumThreads(int inNumThreads) {
        internal_native_SetNumThreads(native_address, inNumThreads);
    }

    /*[-JNI;-NATIVE]
JobSystemThreadPool* nativeObject = (JobSystemThreadPool*)this_addr;
nativeObject->SetNumThreads((int)inNumThreads);
*/
    public static native void internal_native_SetNumThreads(long this_addr, int inNumThreads);
}
