/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.core;

public class JobSystemThreadPool extends JobSystemWithBarrier {

    static public final JobSystemThreadPool T_01 = new JobSystemThreadPool((byte) 1, (char) 1);

    static public final JobSystemThreadPool T_02 = new JobSystemThreadPool((byte) 1, (char) 1);

    static public final JobSystemThreadPool T_03 = new JobSystemThreadPool((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public JobSystemThreadPool(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
JobSystemThreadPool* nativeObject = (JobSystemThreadPool*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public int GetMaxConcurrency() {
        return internal_native_GetMaxConcurrency((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
JobSystemThreadPool* nativeObject = (JobSystemThreadPool*)this_addr;
return nativeObject->GetMaxConcurrency();
*/
    private static native int internal_native_GetMaxConcurrency(long this_addr);

    public void SetNumThreads(int inNumThreads) {
        internal_native_SetNumThreads((long) getNativeData().getCPointer(), inNumThreads);
    }

    /*[-JNI;-NATIVE]
JobSystemThreadPool* nativeObject = (JobSystemThreadPool*)this_addr;
nativeObject->SetNumThreads((int)inNumThreads);
*/
    private static native void internal_native_SetNumThreads(long this_addr, int inNumThreads);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static int native_GetMaxConcurrency(long this_addr) {
        return internal_native_GetMaxConcurrency(this_addr);
    }

    public static void native_SetNumThreads(long this_addr, int inNumThreads) {
        internal_native_SetNumThreads(this_addr, inNumThreads);
    }
}
