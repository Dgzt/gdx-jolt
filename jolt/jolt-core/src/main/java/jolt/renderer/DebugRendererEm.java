/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.renderer;

import jolt.idl.IDLBase;
import jolt.PhysicsSystem;
import jolt.physics.body.BodyManagerDrawSettings;
import jolt.Mat44;
import jolt.Color;
import jolt.math.Vec3;

public class DebugRendererEm extends IDLBase {

    static private Mat44 Mat44_TEMP_STATIC_GEN_0;

    static private DebugArrayTriangle DebugArrayTriangle_TEMP_STATIC_GEN_0;

    static private Color Color_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Color Color_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    static private Color Color_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_5;

    static private Color Color_TEMP_STATIC_GEN_3;

    /*[-JNI;-NATIVE]
class DebugRendererImplCustom : public DebugRendererEm {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID DrawMeshIJJJII_ID = 0;
	inline static jmethodID DrawLineJJJ_ID = 0;
	inline static jmethodID DrawTriangleJJJJI_ID = 0;
	inline static jmethodID DrawText3DJJIJF_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(DebugRendererImplCustom::jClassID == 0) {
		DebugRendererImplCustom::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		DebugRendererImplCustom::DrawMeshIJJJII_ID = env->GetMethodID(jClassID, "internal_DrawMesh", "(IJJJII)V");
		DebugRendererImplCustom::DrawLineJJJ_ID = env->GetMethodID(jClassID, "internal_DrawLine", "(JJJ)V");
		DebugRendererImplCustom::DrawTriangleJJJJI_ID = env->GetMethodID(jClassID, "internal_DrawTriangle", "(JJJJI)V");
		DebugRendererImplCustom::DrawText3DJJIJF_ID = env->GetMethodID(jClassID, "internal_DrawText3D", "(JJIJF)V");
	}
}
virtual void DrawMesh(int id, const Mat44& inModelMatrix, const DebugArrayTriangle& triangleArray, const Color& inModelColor, ECullMode inCullMode, EDrawMode inDrawMode) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawMeshIJJJII_ID, id, (jlong)&inModelMatrix, (jlong)&triangleArray, (jlong)&inModelColor, inCullMode, inDrawMode);
}
virtual void DrawLine(const Vec3* inFrom, const Vec3* inTo, const Color* inColor) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawLineJJJ_ID, (jlong)inFrom, (jlong)inTo, (jlong)inColor);
}
virtual void DrawTriangle(const Vec3* inV1, const Vec3* inV2, const Vec3* inV3, const Color* inColor, ECastShadow inCastShadow) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawTriangleJJJJI_ID, (jlong)inV1, (jlong)inV2, (jlong)inV3, (jlong)inColor, inCastShadow);
}
virtual void DrawText3D(const Vec3* inPosition, const void* inString, unsigned int inStringLen, const Color* inColor, float inHeight) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawText3DJJIJF_ID, (jlong)inPosition, inString, inStringLen, (jlong)inColor, inHeight);
}
};
*/
    @Deprecated()
    public DebugRendererEm(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
DebugRendererImplCustom* nativeObject = (DebugRendererImplCustom*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public void DrawBodies(PhysicsSystem system, BodyManagerDrawSettings inDrawSettings) {
        internal_native_DrawBodies((long) getNativeData().getCPointer(), (long) (system != null ? system.getNativeData().getCPointer() : 0), (long) (inDrawSettings != null ? inDrawSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawBodies((PhysicsSystem* )system_addr, (BodyManagerDrawSettings* )inDrawSettings_addr);
*/
    private static native void internal_native_DrawBodies(long this_addr, long system_addr, long inDrawSettings_addr);

    public void DrawBodies(PhysicsSystem system) {
        internal_native_DrawBodies((long) getNativeData().getCPointer(), (long) (system != null ? system.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawBodies((PhysicsSystem* )system_addr);
*/
    private static native void internal_native_DrawBodies(long this_addr, long system_addr);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor, int inCastShadow, int inDrawMode) {
        internal_native_DrawCylinder((long) getNativeData().getCPointer(), (long) (inMatrix != null ? inMatrix.getNativeData().getCPointer() : 0), inHalfHeight, inRadius, (long) (inColor != null ? inColor.getNativeData().getCPointer() : 0), inCastShadow, inDrawMode);
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawCylinder(*((Mat44* )inMatrix_addr), (float)inHalfHeight, (float)inRadius, *((Color* )inColor_addr), (::ECastShadow)inCastShadow, (::EDrawMode)inDrawMode);
*/
    private static native void internal_native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, int inCastShadow, int inDrawMode);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor, int inCastShadow) {
        internal_native_DrawCylinder((long) getNativeData().getCPointer(), (long) (inMatrix != null ? inMatrix.getNativeData().getCPointer() : 0), inHalfHeight, inRadius, (long) (inColor != null ? inColor.getNativeData().getCPointer() : 0), inCastShadow);
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawCylinder(*((Mat44* )inMatrix_addr), (float)inHalfHeight, (float)inRadius, *((Color* )inColor_addr), (::ECastShadow)inCastShadow);
*/
    private static native void internal_native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, int inCastShadow);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor) {
        internal_native_DrawCylinder((long) getNativeData().getCPointer(), (long) (inMatrix != null ? inMatrix.getNativeData().getCPointer() : 0), inHalfHeight, inRadius, (long) (inColor != null ? inColor.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawCylinder(*((Mat44* )inMatrix_addr), (float)inHalfHeight, (float)inRadius, *((Color* )inColor_addr));
*/
    private static native void internal_native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr);

    public DebugRendererEm() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(getNativeData().getCPointer());
    }

    protected void DrawMesh(int id, Mat44 inModelMatrix, DebugArrayTriangle triangleArray, Color inModelColor, int inCullMode, int inDrawMode) {
    }

    private void internal_DrawMesh(int id, long inModelMatrix, long triangleArray, long inModelColor, int inCullMode, int inDrawMode) {
        if (Mat44_TEMP_STATIC_GEN_0 == null)
            Mat44_TEMP_STATIC_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_STATIC_GEN_0.getNativeData().reset(inModelMatrix, false);
        if (DebugArrayTriangle_TEMP_STATIC_GEN_0 == null)
            DebugArrayTriangle_TEMP_STATIC_GEN_0 = new DebugArrayTriangle((byte) 1, (char) 1);
        DebugArrayTriangle_TEMP_STATIC_GEN_0.getNativeData().reset(triangleArray, false);
        if (Color_TEMP_STATIC_GEN_0 == null)
            Color_TEMP_STATIC_GEN_0 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_0.getNativeData().reset(inModelColor, false);
        DrawMesh(id, Mat44_TEMP_STATIC_GEN_0, DebugArrayTriangle_TEMP_STATIC_GEN_0, Color_TEMP_STATIC_GEN_0, inCullMode, inDrawMode);
    }

    protected void DrawLine(Vec3 inFrom, Vec3 inTo, Color inColor) {
    }

    private void internal_DrawLine(long inFrom, long inTo, long inColor) {
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.getNativeData().reset(inFrom, false);
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.getNativeData().reset(inTo, false);
        if (Color_TEMP_STATIC_GEN_1 == null)
            Color_TEMP_STATIC_GEN_1 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_1.getNativeData().reset(inColor, false);
        DrawLine(Vec3_TEMP_STATIC_GEN_0, Vec3_TEMP_STATIC_GEN_1, Color_TEMP_STATIC_GEN_1);
    }

    protected void DrawTriangle(Vec3 inV1, Vec3 inV2, Vec3 inV3, Color inColor, int inCastShadow) {
    }

    private void internal_DrawTriangle(long inV1, long inV2, long inV3, long inColor, int inCastShadow) {
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.getNativeData().reset(inV1, false);
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.getNativeData().reset(inV2, false);
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.getNativeData().reset(inV3, false);
        if (Color_TEMP_STATIC_GEN_2 == null)
            Color_TEMP_STATIC_GEN_2 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_2.getNativeData().reset(inColor, false);
        DrawTriangle(Vec3_TEMP_STATIC_GEN_2, Vec3_TEMP_STATIC_GEN_3, Vec3_TEMP_STATIC_GEN_4, Color_TEMP_STATIC_GEN_2, inCastShadow);
    }

    protected void DrawText3D(Vec3 inPosition, long inString, int inStringLen, Color inColor, float inHeight) {
    }

    private void internal_DrawText3D(long inPosition, long inString, int inStringLen, long inColor, float inHeight) {
        if (Vec3_TEMP_STATIC_GEN_5 == null)
            Vec3_TEMP_STATIC_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_5.getNativeData().reset(inPosition, false);
        if (Color_TEMP_STATIC_GEN_3 == null)
            Color_TEMP_STATIC_GEN_3 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_3.getNativeData().reset(inColor, false);
        DrawText3D(Vec3_TEMP_STATIC_GEN_5, inString, inStringLen, Color_TEMP_STATIC_GEN_3, inHeight);
    }

    /*[-JNI;-NATIVE]
return (jlong)new DebugRendererImplCustom();
*/
    private static native long internal_native_create();

    /*[-JNI;-NATIVE]
DebugRendererImplCustom* nativeObject = (DebugRendererImplCustom*)this_addr;
nativeObject->setupCallback(env, object);
*/
    private native void internal_native_setupCallback(long this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static void native_DrawBodies(long this_addr, long system_addr, long inDrawSettings_addr) {
        internal_native_DrawBodies(this_addr, system_addr, inDrawSettings_addr);
    }

    public static void native_DrawBodies(long this_addr, long system_addr) {
        internal_native_DrawBodies(this_addr, system_addr);
    }

    public static void native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, int inCastShadow, int inDrawMode) {
        internal_native_DrawCylinder(this_addr, inMatrix_addr, inHalfHeight, inRadius, inColor_addr, inCastShadow, inDrawMode);
    }

    public static void native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, int inCastShadow) {
        internal_native_DrawCylinder(this_addr, inMatrix_addr, inHalfHeight, inRadius, inColor_addr, inCastShadow);
    }

    public static void native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr) {
        internal_native_DrawCylinder(this_addr, inMatrix_addr, inHalfHeight, inRadius, inColor_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
