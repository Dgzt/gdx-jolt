/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.idl.IDLBase;

public class VehicleAntiRollBar extends IDLBase {

    static public final VehicleAntiRollBar T_01 = new VehicleAntiRollBar((byte) 1, (char) 1);

    static public final VehicleAntiRollBar T_02 = new VehicleAntiRollBar((byte) 1, (char) 1);

    static public final VehicleAntiRollBar T_03 = new VehicleAntiRollBar((byte) 1, (char) 1);

    public VehicleAntiRollBar() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new VehicleAntiRollBar();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public VehicleAntiRollBar(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public int get_mLeftWheel() {
        return internal_native_get_mLeftWheel((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
return nativeObject->mLeftWheel;
*/
    private static native int internal_native_get_mLeftWheel(long this_addr);

    public void set_mLeftWheel(int mLeftWheel) {
        internal_native_set_mLeftWheel((long) getNativeData().getCPointer(), mLeftWheel);
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
nativeObject->mLeftWheel = mLeftWheel;
*/
    private static native void internal_native_set_mLeftWheel(long this_addr, int mLeftWheel);

    public int get_mRightWheel() {
        return internal_native_get_mRightWheel((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
return nativeObject->mRightWheel;
*/
    private static native int internal_native_get_mRightWheel(long this_addr);

    public void set_mRightWheel(int mRightWheel) {
        internal_native_set_mRightWheel((long) getNativeData().getCPointer(), mRightWheel);
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
nativeObject->mRightWheel = mRightWheel;
*/
    private static native void internal_native_set_mRightWheel(long this_addr, int mRightWheel);

    public float get_mStiffness() {
        return internal_native_get_mStiffness((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
return nativeObject->mStiffness;
*/
    private static native float internal_native_get_mStiffness(long this_addr);

    public void set_mStiffness(float mStiffness) {
        internal_native_set_mStiffness((long) getNativeData().getCPointer(), mStiffness);
    }

    /*[-JNI;-NATIVE]
VehicleAntiRollBar* nativeObject = (VehicleAntiRollBar*)this_addr;
nativeObject->mStiffness = mStiffness;
*/
    private static native void internal_native_set_mStiffness(long this_addr, float mStiffness);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static int native_get_mLeftWheel(long this_addr) {
        return internal_native_get_mLeftWheel(this_addr);
    }

    public static void native_set_mLeftWheel(long this_addr, int mLeftWheel) {
        internal_native_set_mLeftWheel(this_addr, mLeftWheel);
    }

    public static int native_get_mRightWheel(long this_addr) {
        return internal_native_get_mRightWheel(this_addr);
    }

    public static void native_set_mRightWheel(long this_addr, int mRightWheel) {
        internal_native_set_mRightWheel(this_addr, mRightWheel);
    }

    public static float native_get_mStiffness(long this_addr) {
        return internal_native_get_mStiffness(this_addr);
    }

    public static void native_set_mStiffness(long this_addr, float mStiffness) {
        internal_native_set_mStiffness(this_addr, mStiffness);
    }
}
