/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.math;

import jolt.idl.IDLBase;

public class Quat extends IDLBase {

    static private Quat Quat_TEMP_STATIC_GEN_0;

    static private Quat Quat_TEMP_STATIC_GEN_1;

    static private Quat Quat_TEMP_STATIC_GEN_2;

    static private Quat Quat_TEMP_STATIC_GEN_3;

    private Quat Quat_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_1;

    private Quat Quat_TEMP_GEN_2;

    static private Quat Quat_TEMP_STATIC_GEN_4;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private Vec3 Vec3_TEMP_GEN_6;

    private Quat Quat_TEMP_GEN_3;

    private Quat Quat_TEMP_GEN_4;

    private Quat Quat_TEMP_GEN_5;

    private Quat Quat_TEMP_GEN_6;

    private Quat Quat_TEMP_GEN_7;

    private Quat Quat_TEMP_GEN_8;

    private Quat Quat_TEMP_GEN_9;

    static public final Quat T_01 = new Quat((byte) 1, (char) 1);

    static public final Quat T_02 = new Quat((byte) 1, (char) 1);

    static public final Quat T_03 = new Quat((byte) 1, (char) 1);

    public Quat() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Quat();
*/
    private static native long internal_native_create();

    public Quat(float inX, float inY, float inZ, float inW) {
        long addr = internal_native_create_float_float_float_float(inX, inY, inZ, inW);
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Quat((float)inX, (float)inY, (float)inZ, (float)inW);
*/
    private static native long internal_native_create_float_float_float_float(float inX, float inY, float inZ, float inW);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Quat(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public static Quat sZero() {
        long pointer = internal_native_sZero();
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_0 == null)
            Quat_TEMP_STATIC_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sZero();
return (jlong)&copy_addr;*/
    private static native long internal_native_sZero();

    public static Quat sIdentity() {
        long pointer = internal_native_sIdentity();
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_1 == null)
            Quat_TEMP_STATIC_GEN_1 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_1.getNativeData().reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sIdentity();
return (jlong)&copy_addr;*/
    private static native long internal_native_sIdentity();

    public static Quat sRotation(Vec3 inRotation, float inAngle) {
        long pointer = internal_native_sRotation((long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0), inAngle);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_2 == null)
            Quat_TEMP_STATIC_GEN_2 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_2.getNativeData().reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_2;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sRotation(*((Vec3* )inRotation_addr), (float)inAngle);
return (jlong)&copy_addr;*/
    private static native long internal_native_sRotation(long inRotation_addr, float inAngle);

    public static Quat sFromTo(Vec3 inFrom, Vec3 inTo) {
        long pointer = internal_native_sFromTo((long) (inFrom != null ? inFrom.getNativeData().getCPointer() : 0), (long) (inTo != null ? inTo.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_3 == null)
            Quat_TEMP_STATIC_GEN_3 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_3.getNativeData().reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_3;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sFromTo(*((Vec3* )inFrom_addr), *((Vec3* )inTo_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_sFromTo(long inFrom_addr, long inTo_addr);

    public boolean Equals(Quat inQ) {
        return internal_native_Equals((long) getNativeData().getCPointer(), (long) (inQ != null ? inQ.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return ((*nativeObject == *((Quat* )inQ_addr)));*/
    private static native boolean internal_native_Equals(long this_addr, long inQ_addr);

    public boolean NotEquals(Quat inQ) {
        return internal_native_NotEquals((long) getNativeData().getCPointer(), (long) (inQ != null ? inQ.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return ((*nativeObject != *((Quat* )inQ_addr)));*/
    private static native boolean internal_native_NotEquals(long this_addr, long inQ_addr);

    public Quat MulQuat(Quat inQ) {
        long pointer = internal_native_MulQuat((long) getNativeData().getCPointer(), (long) (inQ != null ? inQ.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = (*nativeObject * *((Quat* )inQ_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_MulQuat(long this_addr, long inQ_addr);

    public Vec3 MulVec3(Vec3 inV) {
        long pointer = internal_native_MulVec3((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = (*nativeObject * *((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_MulVec3(long this_addr, long inV_addr);

    public Quat MulFloat(float inV) {
        long pointer = internal_native_MulFloat((long) getNativeData().getCPointer(), inV);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_1 == null)
            Quat_TEMP_GEN_1 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = (*nativeObject * (float)inV);
return (jlong)&copy_addr;*/
    private static native long internal_native_MulFloat(long this_addr, float inV);

    public boolean IsClose(Quat inQ, float inMaxDistSq) {
        return internal_native_IsClose((long) getNativeData().getCPointer(), (long) (inQ != null ? inQ.getNativeData().getCPointer() : 0), inMaxDistSq);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsClose(*((Quat* )inQ_addr), (float)inMaxDistSq);
*/
    private static native boolean internal_native_IsClose(long this_addr, long inQ_addr, float inMaxDistSq);

    public boolean IsClose(Quat inQ) {
        return internal_native_IsClose((long) getNativeData().getCPointer(), (long) (inQ != null ? inQ.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsClose(*((Quat* )inQ_addr));
*/
    private static native boolean internal_native_IsClose(long this_addr, long inQ_addr);

    public boolean IsNormalized(float inTolerance) {
        return internal_native_IsNormalized((long) getNativeData().getCPointer(), inTolerance);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsNormalized((float)inTolerance);
*/
    private static native boolean internal_native_IsNormalized(long this_addr, float inTolerance);

    public boolean IsNormalized() {
        return internal_native_IsNormalized((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsNormalized();
*/
    private static native boolean internal_native_IsNormalized(long this_addr);

    public float Length() {
        return internal_native_Length((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->Length();
*/
    private static native float internal_native_Length(long this_addr);

    public float LengthSq() {
        return internal_native_LengthSq((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->LengthSq();
*/
    private static native float internal_native_LengthSq(long this_addr);

    public Quat Normalized() {
        long pointer = internal_native_Normalized((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_2 == null)
            Quat_TEMP_GEN_2 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->Normalized();
return (jlong)&copy_addr;*/
    private static native long internal_native_Normalized(long this_addr);

    public static Quat sEulerAngles(Vec3 inInput) {
        long pointer = internal_native_sEulerAngles((long) (inInput != null ? inInput.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_4 == null)
            Quat_TEMP_STATIC_GEN_4 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_4.getNativeData().reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_4;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sEulerAngles(*((Vec3* )inInput_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_sEulerAngles(long inInput_addr);

    public Vec3 GetEulerAngles() {
        long pointer = internal_native_GetEulerAngles((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetEulerAngles();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetEulerAngles(long this_addr);

    public float GetX() {
        return internal_native_GetX((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetX();
*/
    private static native float internal_native_GetX(long this_addr);

    public float GetY() {
        return internal_native_GetY((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetY();
*/
    private static native float internal_native_GetY(long this_addr);

    public float GetZ() {
        return internal_native_GetZ((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetZ();
*/
    private static native float internal_native_GetZ(long this_addr);

    public float GetW() {
        return internal_native_GetW((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetW();
*/
    private static native float internal_native_GetW(long this_addr);

    public Vec3 GetXYZ() {
        long pointer = internal_native_GetXYZ((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetXYZ();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetXYZ(long this_addr);

    public void SetX(float inX) {
        internal_native_SetX((long) getNativeData().getCPointer(), inX);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetX((float)inX);
*/
    private static native void internal_native_SetX(long this_addr, float inX);

    public void SetY(float inY) {
        internal_native_SetY((long) getNativeData().getCPointer(), inY);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetY((float)inY);
*/
    private static native void internal_native_SetY(long this_addr, float inY);

    public void SetZ(float inZ) {
        internal_native_SetZ((long) getNativeData().getCPointer(), inZ);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetZ((float)inZ);
*/
    private static native void internal_native_SetZ(long this_addr, float inZ);

    public void SetW(float inW) {
        internal_native_SetW((long) getNativeData().getCPointer(), inW);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetW((float)inW);
*/
    private static native void internal_native_SetW(long this_addr, float inW);

    public void Set(float inX, float inY, float inZ, float inW) {
        internal_native_Set((long) getNativeData().getCPointer(), inX, inY, inZ, inW);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->Set((float)inX, (float)inY, (float)inZ, (float)inW);
*/
    private static native void internal_native_Set(long this_addr, float inX, float inY, float inZ, float inW);

    public Vec3 InverseRotate(Vec3 inV) {
        long pointer = internal_native_InverseRotate((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->InverseRotate(*((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_InverseRotate(long this_addr, long inV_addr);

    public Vec3 RotateAxisX() {
        long pointer = internal_native_RotateAxisX((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->RotateAxisX();
return (jlong)&copy_addr;*/
    private static native long internal_native_RotateAxisX(long this_addr);

    public Vec3 RotateAxisY() {
        long pointer = internal_native_RotateAxisY((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->RotateAxisY();
return (jlong)&copy_addr;*/
    private static native long internal_native_RotateAxisY(long this_addr);

    public Vec3 RotateAxisZ() {
        long pointer = internal_native_RotateAxisZ((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->RotateAxisZ();
return (jlong)&copy_addr;*/
    private static native long internal_native_RotateAxisZ(long this_addr);

    public float Dot(Quat inQ) {
        return internal_native_Dot((long) getNativeData().getCPointer(), (long) (inQ != null ? inQ.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->Dot(*((Quat* )inQ_addr));
*/
    private static native float internal_native_Dot(long this_addr, long inQ_addr);

    public Quat Conjugated() {
        long pointer = internal_native_Conjugated((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_3 == null)
            Quat_TEMP_GEN_3 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->Conjugated();
return (jlong)&copy_addr;*/
    private static native long internal_native_Conjugated(long this_addr);

    public Quat Inversed() {
        long pointer = internal_native_Inversed((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_4 == null)
            Quat_TEMP_GEN_4 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->Inversed();
return (jlong)&copy_addr;*/
    private static native long internal_native_Inversed(long this_addr);

    public Quat EnsureWPositive() {
        long pointer = internal_native_EnsureWPositive((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_5 == null)
            Quat_TEMP_GEN_5 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->EnsureWPositive();
return (jlong)&copy_addr;*/
    private static native long internal_native_EnsureWPositive(long this_addr);

    public Quat GetPerpendicular() {
        long pointer = internal_native_GetPerpendicular((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_6 == null)
            Quat_TEMP_GEN_6 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_6.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetPerpendicular();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetPerpendicular(long this_addr);

    public float GetRotationAngle(Vec3 inAxis) {
        return internal_native_GetRotationAngle((long) getNativeData().getCPointer(), (long) (inAxis != null ? inAxis.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetRotationAngle(*((Vec3* )inAxis_addr));
*/
    private static native float internal_native_GetRotationAngle(long this_addr, long inAxis_addr);

    public Quat GetTwist(Vec3 inAxis) {
        long pointer = internal_native_GetTwist((long) getNativeData().getCPointer(), (long) (inAxis != null ? inAxis.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_7 == null)
            Quat_TEMP_GEN_7 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_7.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_7;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetTwist(*((Vec3* )inAxis_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTwist(long this_addr, long inAxis_addr);

    public void GetSwingTwist(Quat outSwing, Quat outTwist) {
        internal_native_GetSwingTwist((long) getNativeData().getCPointer(), (long) (outSwing != null ? outSwing.getNativeData().getCPointer() : 0), (long) (outTwist != null ? outTwist.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->GetSwingTwist(*((Quat* )outSwing_addr), *((Quat* )outTwist_addr));
*/
    private static native void internal_native_GetSwingTwist(long this_addr, long outSwing_addr, long outTwist_addr);

    public Quat LERP(Quat inDestination, float inFraction) {
        long pointer = internal_native_LERP((long) getNativeData().getCPointer(), (long) (inDestination != null ? inDestination.getNativeData().getCPointer() : 0), inFraction);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_8 == null)
            Quat_TEMP_GEN_8 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_8.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_8;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->LERP(*((Quat* )inDestination_addr), (float)inFraction);
return (jlong)&copy_addr;*/
    private static native long internal_native_LERP(long this_addr, long inDestination_addr, float inFraction);

    public Quat SLERP(Quat inDestination, float inFraction) {
        long pointer = internal_native_SLERP((long) getNativeData().getCPointer(), (long) (inDestination != null ? inDestination.getNativeData().getCPointer() : 0), inFraction);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_9 == null)
            Quat_TEMP_GEN_9 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_9.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_9;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->SLERP(*((Quat* )inDestination_addr), (float)inFraction);
return (jlong)&copy_addr;*/
    private static native long internal_native_SLERP(long this_addr, long inDestination_addr, float inFraction);

    public static long native_create() {
        return internal_native_create();
    }

    public static long native_create_float_float_float_float(float inX, float inY, float inZ, float inW) {
        return internal_native_create_float_float_float_float(inX, inY, inZ, inW);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_sZero() {
        return internal_native_sZero();
    }

    public static long native_sIdentity() {
        return internal_native_sIdentity();
    }

    public static long native_sRotation(long inRotation_addr, float inAngle) {
        return internal_native_sRotation(inRotation_addr, inAngle);
    }

    public static long native_sFromTo(long inFrom_addr, long inTo_addr) {
        return internal_native_sFromTo(inFrom_addr, inTo_addr);
    }

    public static boolean native_Equals(long this_addr, long inQ_addr) {
        return internal_native_Equals(this_addr, inQ_addr);
    }

    public static boolean native_NotEquals(long this_addr, long inQ_addr) {
        return internal_native_NotEquals(this_addr, inQ_addr);
    }

    public static long native_MulQuat(long this_addr, long inQ_addr) {
        return internal_native_MulQuat(this_addr, inQ_addr);
    }

    public static long native_MulVec3(long this_addr, long inV_addr) {
        return internal_native_MulVec3(this_addr, inV_addr);
    }

    public static long native_MulFloat(long this_addr, float inV) {
        return internal_native_MulFloat(this_addr, inV);
    }

    public static boolean native_IsClose(long this_addr, long inQ_addr, float inMaxDistSq) {
        return internal_native_IsClose(this_addr, inQ_addr, inMaxDistSq);
    }

    public static boolean native_IsClose(long this_addr, long inQ_addr) {
        return internal_native_IsClose(this_addr, inQ_addr);
    }

    public static boolean native_IsNormalized(long this_addr, float inTolerance) {
        return internal_native_IsNormalized(this_addr, inTolerance);
    }

    public static boolean native_IsNormalized(long this_addr) {
        return internal_native_IsNormalized(this_addr);
    }

    public static float native_Length(long this_addr) {
        return internal_native_Length(this_addr);
    }

    public static float native_LengthSq(long this_addr) {
        return internal_native_LengthSq(this_addr);
    }

    public static long native_Normalized(long this_addr) {
        return internal_native_Normalized(this_addr);
    }

    public static long native_sEulerAngles(long inInput_addr) {
        return internal_native_sEulerAngles(inInput_addr);
    }

    public static long native_GetEulerAngles(long this_addr) {
        return internal_native_GetEulerAngles(this_addr);
    }

    public static float native_GetX(long this_addr) {
        return internal_native_GetX(this_addr);
    }

    public static float native_GetY(long this_addr) {
        return internal_native_GetY(this_addr);
    }

    public static float native_GetZ(long this_addr) {
        return internal_native_GetZ(this_addr);
    }

    public static float native_GetW(long this_addr) {
        return internal_native_GetW(this_addr);
    }

    public static long native_GetXYZ(long this_addr) {
        return internal_native_GetXYZ(this_addr);
    }

    public static void native_SetX(long this_addr, float inX) {
        internal_native_SetX(this_addr, inX);
    }

    public static void native_SetY(long this_addr, float inY) {
        internal_native_SetY(this_addr, inY);
    }

    public static void native_SetZ(long this_addr, float inZ) {
        internal_native_SetZ(this_addr, inZ);
    }

    public static void native_SetW(long this_addr, float inW) {
        internal_native_SetW(this_addr, inW);
    }

    public static void native_Set(long this_addr, float inX, float inY, float inZ, float inW) {
        internal_native_Set(this_addr, inX, inY, inZ, inW);
    }

    public static long native_InverseRotate(long this_addr, long inV_addr) {
        return internal_native_InverseRotate(this_addr, inV_addr);
    }

    public static long native_RotateAxisX(long this_addr) {
        return internal_native_RotateAxisX(this_addr);
    }

    public static long native_RotateAxisY(long this_addr) {
        return internal_native_RotateAxisY(this_addr);
    }

    public static long native_RotateAxisZ(long this_addr) {
        return internal_native_RotateAxisZ(this_addr);
    }

    public static float native_Dot(long this_addr, long inQ_addr) {
        return internal_native_Dot(this_addr, inQ_addr);
    }

    public static long native_Conjugated(long this_addr) {
        return internal_native_Conjugated(this_addr);
    }

    public static long native_Inversed(long this_addr) {
        return internal_native_Inversed(this_addr);
    }

    public static long native_EnsureWPositive(long this_addr) {
        return internal_native_EnsureWPositive(this_addr);
    }

    public static long native_GetPerpendicular(long this_addr) {
        return internal_native_GetPerpendicular(this_addr);
    }

    public static float native_GetRotationAngle(long this_addr, long inAxis_addr) {
        return internal_native_GetRotationAngle(this_addr, inAxis_addr);
    }

    public static long native_GetTwist(long this_addr, long inAxis_addr) {
        return internal_native_GetTwist(this_addr, inAxis_addr);
    }

    public static void native_GetSwingTwist(long this_addr, long outSwing_addr, long outTwist_addr) {
        internal_native_GetSwingTwist(this_addr, outSwing_addr, outTwist_addr);
    }

    public static long native_LERP(long this_addr, long inDestination_addr, float inFraction) {
        return internal_native_LERP(this_addr, inDestination_addr, inFraction);
    }

    public static long native_SLERP(long this_addr, long inDestination_addr, float inFraction) {
        return internal_native_SLERP(this_addr, inDestination_addr, inFraction);
    }
}
