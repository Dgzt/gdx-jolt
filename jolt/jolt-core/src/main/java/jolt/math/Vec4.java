/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.math;

import jolt.idl.IDLBase;

public class Vec4 extends IDLBase {

    static private Vec4 Vec4_TEMP_STATIC_GEN_0;

    static private Vec4 Vec4_TEMP_STATIC_GEN_1;

    static private Vec4 Vec4_TEMP_STATIC_GEN_2;

    static private Vec4 Vec4_TEMP_STATIC_GEN_3;

    static private Vec4 Vec4_TEMP_STATIC_GEN_4;

    static private Vec4 Vec4_TEMP_STATIC_GEN_5;

    static private Vec4 Vec4_TEMP_STATIC_GEN_6;

    static private Vec4 Vec4_TEMP_STATIC_GEN_7;

    static private Vec4 Vec4_TEMP_STATIC_GEN_8;

    private Vec4 Vec4_TEMP_GEN_0;

    private Vec4 Vec4_TEMP_GEN_1;

    private Vec4 Vec4_TEMP_GEN_2;

    private Vec4 Vec4_TEMP_GEN_3;

    private Vec4 Vec4_TEMP_GEN_4;

    private Vec4 Vec4_TEMP_GEN_5;

    static public final Vec4 T_01 = new Vec4((byte) 1, (char) 1);

    static public final Vec4 T_02 = new Vec4((byte) 1, (char) 1);

    static public final Vec4 T_03 = new Vec4((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Vec4(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static Vec4 sZero() {
        long pointer = internal_native_sZero();
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_0 == null)
            Vec4_TEMP_STATIC_GEN_0 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sZero();
return (jlong)&copy_addr;*/
    public static native long internal_native_sZero();

    public static Vec4 sOne() {
        long pointer = internal_native_sOne();
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_1 == null)
            Vec4_TEMP_STATIC_GEN_1 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_1.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sOne();
return (jlong)&copy_addr;*/
    public static native long internal_native_sOne();

    public static Vec4 sReplicate(float inV) {
        long pointer = internal_native_sReplicate(inV);
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_2 == null)
            Vec4_TEMP_STATIC_GEN_2 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_2.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_2;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sReplicate((float)inV);
return (jlong)&copy_addr;*/
    public static native long internal_native_sReplicate(float inV);

    public static Vec4 sMin(Vec4 inLHS, Vec4 inRHS) {
        long pointer = internal_native_sMin((long) (inLHS != null ? inLHS.getNativeData().getCPointer() : 0), (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_3 == null)
            Vec4_TEMP_STATIC_GEN_3 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_3.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_3;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sMin(*((Vec4* )inLHS_addr), *((Vec4* )inRHS_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sMin(long inLHS_addr, long inRHS_addr);

    public static Vec4 sMax(Vec4 inLHS, Vec4 inRHS) {
        long pointer = internal_native_sMax((long) (inLHS != null ? inLHS.getNativeData().getCPointer() : 0), (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_4 == null)
            Vec4_TEMP_STATIC_GEN_4 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_4.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_4;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sMax(*((Vec4* )inLHS_addr), *((Vec4* )inRHS_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sMax(long inLHS_addr, long inRHS_addr);

    public static Vec4 sFusedMultiplyAdd(Vec4 inMul1, Vec4 inMul2, Vec4 inAdd) {
        long pointer = internal_native_sFusedMultiplyAdd((long) (inMul1 != null ? inMul1.getNativeData().getCPointer() : 0), (long) (inMul2 != null ? inMul2.getNativeData().getCPointer() : 0), (long) (inAdd != null ? inAdd.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_5 == null)
            Vec4_TEMP_STATIC_GEN_5 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_5.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_5;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sFusedMultiplyAdd(*((Vec4* )inMul1_addr), *((Vec4* )inMul2_addr), *((Vec4* )inAdd_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sFusedMultiplyAdd(long inMul1_addr, long inMul2_addr, long inAdd_addr);

    public static Vec4 sOr(Vec4 inV1, Vec4 inV2) {
        long pointer = internal_native_sOr((long) (inV1 != null ? inV1.getNativeData().getCPointer() : 0), (long) (inV2 != null ? inV2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_6 == null)
            Vec4_TEMP_STATIC_GEN_6 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_6.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_6;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sOr(*((Vec4* )inV1_addr), *((Vec4* )inV2_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sOr(long inV1_addr, long inV2_addr);

    public static Vec4 sXor(Vec4 inV1, Vec4 inV2) {
        long pointer = internal_native_sXor((long) (inV1 != null ? inV1.getNativeData().getCPointer() : 0), (long) (inV2 != null ? inV2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_7 == null)
            Vec4_TEMP_STATIC_GEN_7 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_7.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_7;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sXor(*((Vec4* )inV1_addr), *((Vec4* )inV2_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sXor(long inV1_addr, long inV2_addr);

    public static Vec4 sAnd(Vec4 inV1, Vec4 inV2) {
        long pointer = internal_native_sAnd((long) (inV1 != null ? inV1.getNativeData().getCPointer() : 0), (long) (inV2 != null ? inV2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_STATIC_GEN_8 == null)
            Vec4_TEMP_STATIC_GEN_8 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_STATIC_GEN_8.getNativeData().reset(pointer, false);
        return Vec4_TEMP_STATIC_GEN_8;
    }

    /*[-JNI;-NATIVE]
static Vec4 copy_addr;
copy_addr = Vec4::sAnd(*((Vec4* )inV1_addr), *((Vec4* )inV2_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sAnd(long inV1_addr, long inV2_addr);

    public float GetX() {
        return internal_native_GetX((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->GetX();
*/
    public static native float internal_native_GetX(long this_addr);

    public float GetY() {
        return internal_native_GetY((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->GetY();
*/
    public static native float internal_native_GetY(long this_addr);

    public float GetZ() {
        return internal_native_GetZ((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->GetZ();
*/
    public static native float internal_native_GetZ(long this_addr);

    public float GetW() {
        return internal_native_GetW((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->GetW();
*/
    public static native float internal_native_GetW(long this_addr);

    public void SetX(float inX) {
        internal_native_SetX((long) getNativeData().getCPointer(), inX);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
nativeObject->SetX((float)inX);
*/
    public static native void internal_native_SetX(long this_addr, float inX);

    public void SetY(float inY) {
        internal_native_SetY((long) getNativeData().getCPointer(), inY);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
nativeObject->SetY((float)inY);
*/
    public static native void internal_native_SetY(long this_addr, float inY);

    public void SetZ(float inZ) {
        internal_native_SetZ((long) getNativeData().getCPointer(), inZ);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
nativeObject->SetZ((float)inZ);
*/
    public static native void internal_native_SetZ(long this_addr, float inZ);

    public void SetW(float inW) {
        internal_native_SetW((long) getNativeData().getCPointer(), inW);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
nativeObject->SetW((float)inW);
*/
    public static native void internal_native_SetW(long this_addr, float inW);

    public void Set(float inX, float inY, float inZ, float inW) {
        internal_native_Set((long) getNativeData().getCPointer(), inX, inY, inZ, inW);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
nativeObject->Set((float)inX, (float)inY, (float)inZ, (float)inW);
*/
    public static native void internal_native_Set(long this_addr, float inX, float inY, float inZ, float inW);

    public float GetComponent(int inCoordinate) {
        return internal_native_GetComponent((long) getNativeData().getCPointer(), inCoordinate);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return ((*nativeObject)[inCoordinate]);*/
    public static native float internal_native_GetComponent(long this_addr, int inCoordinate);

    public boolean IsClose(Vec4 inV, float inMaxDistSq) {
        return internal_native_IsClose((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0), inMaxDistSq);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->IsClose(*((Vec4* )inV_addr), (float)inMaxDistSq);
*/
    public static native boolean internal_native_IsClose(long this_addr, long inV_addr, float inMaxDistSq);

    public boolean IsClose(Vec4 inV) {
        return internal_native_IsClose((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->IsClose(*((Vec4* )inV_addr));
*/
    public static native boolean internal_native_IsClose(long this_addr, long inV_addr);

    public boolean IsNormalized(float inTolerance) {
        return internal_native_IsNormalized((long) getNativeData().getCPointer(), inTolerance);
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->IsNormalized((float)inTolerance);
*/
    public static native boolean internal_native_IsNormalized(long this_addr, float inTolerance);

    public boolean IsNormalized() {
        return internal_native_IsNormalized((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return nativeObject->IsNormalized();
*/
    public static native boolean internal_native_IsNormalized(long this_addr);

    public Vec4 Add(Vec4 inV) {
        internal_native_Add((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        return this;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return (jlong)&(*nativeObject += *((Vec4* )inV_addr));
*/
    public static native long internal_native_Add(long this_addr, long inV_addr);

    public Vec4 Sub(Vec4 inV) {
        internal_native_Sub((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        return this;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return (jlong)&(*nativeObject -= *((Vec4* )inV_addr));
*/
    public static native long internal_native_Sub(long this_addr, long inV_addr);

    public Vec4 Mul(float inV) {
        internal_native_Mul((long) getNativeData().getCPointer(), inV);
        return this;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return (jlong)&(*nativeObject *= (float)inV);
*/
    public static native long internal_native_Mul(long this_addr, float inV);

    public Vec4 Div(float inV) {
        internal_native_Div((long) getNativeData().getCPointer(), inV);
        return this;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
return (jlong)&(*nativeObject /= (float)inV);
*/
    public static native long internal_native_Div(long this_addr, float inV);

    public Vec4 MulVec4(Vec4 inV) {
        long pointer = internal_native_MulVec4((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_0 == null)
            Vec4_TEMP_GEN_0 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
static Vec4 copy_addr;
copy_addr = (*nativeObject * *((Vec4* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_MulVec4(long this_addr, long inV_addr);

    public Vec4 MulFloat(float inV) {
        long pointer = internal_native_MulFloat((long) getNativeData().getCPointer(), inV);
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_1 == null)
            Vec4_TEMP_GEN_1 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
static Vec4 copy_addr;
copy_addr = (*nativeObject * (float)inV);
return (jlong)&copy_addr;*/
    public static native long internal_native_MulFloat(long this_addr, float inV);

    public Vec4 DivVec4(Vec4 inV) {
        long pointer = internal_native_DivVec4((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_2 == null)
            Vec4_TEMP_GEN_2 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
static Vec4 copy_addr;
copy_addr = (*nativeObject / *((Vec4* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_DivVec4(long this_addr, long inV_addr);

    public Vec4 DivFloat(float inV) {
        long pointer = internal_native_DivFloat((long) getNativeData().getCPointer(), inV);
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_3 == null)
            Vec4_TEMP_GEN_3 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
static Vec4 copy_addr;
copy_addr = (*nativeObject / (float)inV);
return (jlong)&copy_addr;*/
    public static native long internal_native_DivFloat(long this_addr, float inV);

    public Vec4 AddVec4(Vec4 inV) {
        long pointer = internal_native_AddVec4((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_4 == null)
            Vec4_TEMP_GEN_4 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
static Vec4 copy_addr;
copy_addr = (*nativeObject + *((Vec4* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_AddVec4(long this_addr, long inV_addr);

    public Vec4 SubVec4(Vec4 inV) {
        long pointer = internal_native_SubVec4((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_5 == null)
            Vec4_TEMP_GEN_5 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
Vec4* nativeObject = (Vec4*)this_addr;
static Vec4 copy_addr;
copy_addr = (*nativeObject - *((Vec4* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_SubVec4(long this_addr, long inV_addr);
}
