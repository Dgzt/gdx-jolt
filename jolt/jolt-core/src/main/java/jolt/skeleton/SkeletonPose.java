/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.skeleton;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.ArrayMat44;
import jolt.math.Mat44;

public class SkeletonPose extends IDLBase {

    private Skeleton Skeleton_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private SkeletalAnimationJointState SkeletalAnimationJointState_TEMP_GEN_0;

    private ArrayMat44 ArrayMat44_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    static public final SkeletonPose T_01 = new SkeletonPose((byte) 1, (char) 1);

    static public final SkeletonPose T_02 = new SkeletonPose((byte) 1, (char) 1);

    static public final SkeletonPose T_03 = new SkeletonPose((byte) 1, (char) 1);

    public SkeletonPose() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SkeletonPose();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SkeletonPose(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public void SetSkeleton(Skeleton inSkeleton) {
        internal_native_SetSkeleton((long) getNativeData().getCPointer(), (long) (inSkeleton != null ? inSkeleton.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
nativeObject->SetSkeleton((Skeleton* )inSkeleton_addr);
*/
    private static native void internal_native_SetSkeleton(long this_addr, long inSkeleton_addr);

    public Skeleton GetSkeleton() {
        long pointer = internal_native_GetSkeleton((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Skeleton_TEMP_GEN_0 == null)
            Skeleton_TEMP_GEN_0 = new Skeleton((byte) 1, (char) 1);
        Skeleton_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Skeleton_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
const Skeleton* obj = nativeObject->GetSkeleton();
return (jlong)obj;
*/
    private static native long internal_native_GetSkeleton(long this_addr);

    public void SetRootOffset(Vec3 inOffset) {
        internal_native_SetRootOffset((long) getNativeData().getCPointer(), (long) (inOffset != null ? inOffset.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
nativeObject->SetRootOffset(*((Vec3* )inOffset_addr));
*/
    private static native void internal_native_SetRootOffset(long this_addr, long inOffset_addr);

    public Vec3 GetRootOffset() {
        long pointer = internal_native_GetRootOffset((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetRootOffset();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetRootOffset(long this_addr);

    public int GetJointCount() {
        return internal_native_GetJointCount((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
return nativeObject->GetJointCount();
*/
    private static native int internal_native_GetJointCount(long this_addr);

    public SkeletalAnimationJointState GetJoint(int inJoint) {
        long pointer = internal_native_GetJoint((long) getNativeData().getCPointer(), inJoint);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SkeletalAnimationJointState_TEMP_GEN_0 == null)
            SkeletalAnimationJointState_TEMP_GEN_0 = new SkeletalAnimationJointState((byte) 1, (char) 1);
        SkeletalAnimationJointState_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SkeletalAnimationJointState_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
return (jlong)&nativeObject->GetJoint((int)inJoint);
*/
    private static native long internal_native_GetJoint(long this_addr, int inJoint);

    public ArrayMat44 GetJointMatrices() {
        long pointer = internal_native_GetJointMatrices((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArrayMat44_TEMP_GEN_0 == null)
            ArrayMat44_TEMP_GEN_0 = new ArrayMat44((byte) 1, (char) 1);
        ArrayMat44_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArrayMat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
return (jlong)&nativeObject->GetJointMatrices();
*/
    private static native long internal_native_GetJointMatrices(long this_addr);

    public Mat44 GetJointMatrix(int inJoint) {
        long pointer = internal_native_GetJointMatrix((long) getNativeData().getCPointer(), inJoint);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
return (jlong)&nativeObject->GetJointMatrix((int)inJoint);
*/
    private static native long internal_native_GetJointMatrix(long this_addr, int inJoint);

    public void CalculateJointMatrices() {
        internal_native_CalculateJointMatrices((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
nativeObject->CalculateJointMatrices();
*/
    private static native void internal_native_CalculateJointMatrices(long this_addr);

    public void CalculateJointStates() {
        internal_native_CalculateJointStates((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SkeletonPose* nativeObject = (SkeletonPose*)this_addr;
nativeObject->CalculateJointStates();
*/
    private static native void internal_native_CalculateJointStates(long this_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static void native_SetSkeleton(long this_addr, long inSkeleton_addr) {
        internal_native_SetSkeleton(this_addr, inSkeleton_addr);
    }

    public static long native_GetSkeleton(long this_addr) {
        return internal_native_GetSkeleton(this_addr);
    }

    public static void native_SetRootOffset(long this_addr, long inOffset_addr) {
        internal_native_SetRootOffset(this_addr, inOffset_addr);
    }

    public static long native_GetRootOffset(long this_addr) {
        return internal_native_GetRootOffset(this_addr);
    }

    public static int native_GetJointCount(long this_addr) {
        return internal_native_GetJointCount(this_addr);
    }

    public static long native_GetJoint(long this_addr, int inJoint) {
        return internal_native_GetJoint(this_addr, inJoint);
    }

    public static long native_GetJointMatrices(long this_addr) {
        return internal_native_GetJointMatrices(this_addr);
    }

    public static long native_GetJointMatrix(long this_addr, int inJoint) {
        return internal_native_GetJointMatrix(this_addr, inJoint);
    }

    public static void native_CalculateJointMatrices(long this_addr) {
        internal_native_CalculateJointMatrices(this_addr);
    }

    public static void native_CalculateJointStates(long this_addr) {
        internal_native_CalculateJointStates(this_addr);
    }
}
