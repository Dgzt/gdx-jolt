/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.physics.vehicle.MotorcycleControllerSettings;

public class MotorcycleController extends WheeledVehicleController {

    static public final MotorcycleController T_01 = new MotorcycleController((byte) 1, (char) 1);

    static public final MotorcycleController T_02 = new MotorcycleController((byte) 1, (char) 1);

    static public final MotorcycleController T_03 = new MotorcycleController((byte) 1, (char) 1);

    public MotorcycleController(MotorcycleControllerSettings inSettings, VehicleConstraint inConstraint) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_MotorcycleControllerSettings_VehicleConstraint((long) (inSettings != null ? inSettings.getNativeData().getCPointer() : 0), (long) (inConstraint != null ? inConstraint.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MotorcycleController(*((MotorcycleControllerSettings* )inSettings_addr), *((VehicleConstraint* )inConstraint_addr));
*/
    private static native long internal_native_create_MotorcycleControllerSettings_VehicleConstraint(long inSettings_addr, long inConstraint_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MotorcycleController(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorcycleController* nativeObject = (MotorcycleController*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public float GetWheelBase() {
        return internal_native_GetWheelBase((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorcycleController* nativeObject = (MotorcycleController*)this_addr;
return nativeObject->GetWheelBase();
*/
    private static native float internal_native_GetWheelBase(long this_addr);

    public void EnableLeanController(boolean inEnable) {
        internal_native_EnableLeanController((long) getNativeData().getCPointer(), inEnable);
    }

    /*[-JNI;-NATIVE]
MotorcycleController* nativeObject = (MotorcycleController*)this_addr;
nativeObject->EnableLeanController(inEnable);
*/
    private static native void internal_native_EnableLeanController(long this_addr, boolean inEnable);

    public boolean IsLeanControllerEnabled() {
        return internal_native_IsLeanControllerEnabled((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorcycleController* nativeObject = (MotorcycleController*)this_addr;
return nativeObject->IsLeanControllerEnabled();
*/
    private static native boolean internal_native_IsLeanControllerEnabled(long this_addr);

    public static long native_create_MotorcycleControllerSettings_VehicleConstraint(long inSettings_addr, long inConstraint_addr) {
        return internal_native_create_MotorcycleControllerSettings_VehicleConstraint(inSettings_addr, inConstraint_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static float native_GetWheelBase(long this_addr) {
        return internal_native_GetWheelBase(this_addr);
    }

    public static void native_EnableLeanController(long this_addr, boolean inEnable) {
        internal_native_EnableLeanController(this_addr, inEnable);
    }

    public static boolean native_IsLeanControllerEnabled(long this_addr) {
        return internal_native_IsLeanControllerEnabled(this_addr);
    }
}
