/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.body;

import jolt.idl.IDLBase;
import jolt.enums.EMotionQuality;
import jolt.enums.EAllowedDOFs;
import jolt.math.Vec3;
import jolt.math.Quat;
import jolt.math.Mat44;

public class MotionProperties extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Quat Quat_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private Vec3 Vec3_TEMP_GEN_6;

    private Vec3 Vec3_TEMP_GEN_7;

    private Vec3 Vec3_TEMP_GEN_8;

    static public final MotionProperties T_01 = new MotionProperties((byte) 1, (char) 1);

    static public final MotionProperties T_02 = new MotionProperties((byte) 1, (char) 1);

    static public final MotionProperties T_03 = new MotionProperties((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MotionProperties(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public EMotionQuality GetMotionQuality() {
        int value = internal_native_GetMotionQuality((long) getNativeData().getCPointer());
        return EMotionQuality.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return (int)nativeObject->GetMotionQuality();
*/
    public static native int internal_native_GetMotionQuality(long this_addr);

    public EAllowedDOFs GetAllowedDOFs() {
        int value = internal_native_GetAllowedDOFs((long) getNativeData().getCPointer());
        return EAllowedDOFs.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return (int)nativeObject->GetAllowedDOFs();
*/
    public static native int internal_native_GetAllowedDOFs(long this_addr);

    public boolean GetAllowSleeping() {
        return internal_native_GetAllowSleeping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetAllowSleeping();
*/
    public static native boolean internal_native_GetAllowSleeping(long this_addr);

    public Vec3 GetLinearVelocity() {
        long pointer = internal_native_GetLinearVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLinearVelocity();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetLinearVelocity(long this_addr);

    public void SetLinearVelocity(Vec3 inVelocity) {
        internal_native_SetLinearVelocity((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetLinearVelocity(*((Vec3* )inVelocity_addr));
*/
    public static native void internal_native_SetLinearVelocity(long this_addr, long inVelocity_addr);

    public void SetLinearVelocityClamped(Vec3 inVelocity) {
        internal_native_SetLinearVelocityClamped((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetLinearVelocityClamped(*((Vec3* )inVelocity_addr));
*/
    public static native void internal_native_SetLinearVelocityClamped(long this_addr, long inVelocity_addr);

    public Vec3 GetAngularVelocity() {
        long pointer = internal_native_GetAngularVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAngularVelocity();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetAngularVelocity(long this_addr);

    public void SetAngularVelocity(Vec3 inVelocity) {
        internal_native_SetAngularVelocity((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetAngularVelocity(*((Vec3* )inVelocity_addr));
*/
    public static native void internal_native_SetAngularVelocity(long this_addr, long inVelocity_addr);

    public void SetAngularVelocityClamped(Vec3 inVelocity) {
        internal_native_SetAngularVelocityClamped((long) getNativeData().getCPointer(), (long) (inVelocity != null ? inVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetAngularVelocityClamped(*((Vec3* )inVelocity_addr));
*/
    public static native void internal_native_SetAngularVelocityClamped(long this_addr, long inVelocity_addr);

    public void MoveKinematic(Vec3 inPosition, Quat inRotation, float inDeltaTime) {
        internal_native_MoveKinematic((long) getNativeData().getCPointer(), (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0), inDeltaTime);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->MoveKinematic(*((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), (float)inDeltaTime);
*/
    public static native void internal_native_MoveKinematic(long this_addr, long inPosition_addr, long inRotation_addr, float inDeltaTime);

    public float GetMaxLinearVelocity() {
        return internal_native_GetMaxLinearVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetMaxLinearVelocity();
*/
    public static native float internal_native_GetMaxLinearVelocity(long this_addr);

    public void SetMaxLinearVelocity(float inVelocity) {
        internal_native_SetMaxLinearVelocity((long) getNativeData().getCPointer(), inVelocity);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetMaxLinearVelocity((float)inVelocity);
*/
    public static native void internal_native_SetMaxLinearVelocity(long this_addr, float inVelocity);

    public float GetMaxAngularVelocity() {
        return internal_native_GetMaxAngularVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetMaxAngularVelocity();
*/
    public static native float internal_native_GetMaxAngularVelocity(long this_addr);

    public void SetMaxAngularVelocity(float inVelocity) {
        internal_native_SetMaxAngularVelocity((long) getNativeData().getCPointer(), inVelocity);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetMaxAngularVelocity((float)inVelocity);
*/
    public static native void internal_native_SetMaxAngularVelocity(long this_addr, float inVelocity);

    public void ClampLinearVelocity() {
        internal_native_ClampLinearVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->ClampLinearVelocity();
*/
    public static native void internal_native_ClampLinearVelocity(long this_addr);

    public void ClampAngularVelocity() {
        internal_native_ClampAngularVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->ClampAngularVelocity();
*/
    public static native void internal_native_ClampAngularVelocity(long this_addr);

    public float GetLinearDamping() {
        return internal_native_GetLinearDamping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetLinearDamping();
*/
    public static native float internal_native_GetLinearDamping(long this_addr);

    public void SetLinearDamping(float inDamping) {
        internal_native_SetLinearDamping((long) getNativeData().getCPointer(), inDamping);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetLinearDamping((float)inDamping);
*/
    public static native void internal_native_SetLinearDamping(long this_addr, float inDamping);

    public float GetAngularDamping() {
        return internal_native_GetAngularDamping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetAngularDamping();
*/
    public static native float internal_native_GetAngularDamping(long this_addr);

    public void SetAngularDamping(float inDamping) {
        internal_native_SetAngularDamping((long) getNativeData().getCPointer(), inDamping);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetAngularDamping((float)inDamping);
*/
    public static native void internal_native_SetAngularDamping(long this_addr, float inDamping);

    public float GetGravityFactor() {
        return internal_native_GetGravityFactor((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetGravityFactor();
*/
    public static native float internal_native_GetGravityFactor(long this_addr);

    public void SetGravityFactor(float inFactor) {
        internal_native_SetGravityFactor((long) getNativeData().getCPointer(), inFactor);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetGravityFactor((float)inFactor);
*/
    public static native void internal_native_SetGravityFactor(long this_addr, float inFactor);

    public void SetMassProperties(EAllowedDOFs inAllowedDOFs, MassProperties inMassProperties) {
        internal_native_SetMassProperties((long) getNativeData().getCPointer(), (long) (inAllowedDOFs != null ? inAllowedDOFs.getValue() : 0), (long) (inMassProperties != null ? inMassProperties.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetMassProperties((::EAllowedDOFs)inAllowedDOFs, *((MassProperties* )inMassProperties_addr));
*/
    public static native void internal_native_SetMassProperties(long this_addr, long inAllowedDOFs, long inMassProperties_addr);

    public float GetInverseMass() {
        return internal_native_GetInverseMass((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetInverseMass();
*/
    public static native float internal_native_GetInverseMass(long this_addr);

    public float GetInverseMassUnchecked() {
        return internal_native_GetInverseMassUnchecked((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetInverseMassUnchecked();
*/
    public static native float internal_native_GetInverseMassUnchecked(long this_addr);

    public void SetInverseMass(float inInvM) {
        internal_native_SetInverseMass((long) getNativeData().getCPointer(), inInvM);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetInverseMass((float)inInvM);
*/
    public static native void internal_native_SetInverseMass(long this_addr, float inInvM);

    public Vec3 GetInverseInertiaDiagonal() {
        long pointer = internal_native_GetInverseInertiaDiagonal((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetInverseInertiaDiagonal();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetInverseInertiaDiagonal(long this_addr);

    public Quat GetInertiaRotation() {
        long pointer = internal_native_GetInertiaRotation((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetInertiaRotation();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetInertiaRotation(long this_addr);

    public void SetInverseInertia(Vec3 inInvI, Quat inRotation) {
        internal_native_SetInverseInertia((long) getNativeData().getCPointer(), (long) (inInvI != null ? inInvI.getNativeData().getCPointer() : 0), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetInverseInertia(*((Vec3* )inInvI_addr), *((Quat* )inRotation_addr));
*/
    public static native void internal_native_SetInverseInertia(long this_addr, long inInvI_addr, long inRotation_addr);

    public Mat44 GetLocalSpaceInverseInertia() {
        long pointer = internal_native_GetLocalSpaceInverseInertia((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetLocalSpaceInverseInertia();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetLocalSpaceInverseInertia(long this_addr);

    public Mat44 GetInverseInertiaForRotation(Mat44 inRotation) {
        long pointer = internal_native_GetInverseInertiaForRotation((long) getNativeData().getCPointer(), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_1 == null)
            Mat44_TEMP_GEN_1 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetInverseInertiaForRotation(*((Mat44* )inRotation_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetInverseInertiaForRotation(long this_addr, long inRotation_addr);

    public Vec3 MultiplyWorldSpaceInverseInertiaByVector(Quat inRotation, Vec3 inV) {
        long pointer = internal_native_MultiplyWorldSpaceInverseInertiaByVector((long) getNativeData().getCPointer(), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->MultiplyWorldSpaceInverseInertiaByVector(*((Quat* )inRotation_addr), *((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_MultiplyWorldSpaceInverseInertiaByVector(long this_addr, long inRotation_addr, long inV_addr);

    public Vec3 GetPointVelocityCOM(Vec3 inPointRelativeToCOM) {
        long pointer = internal_native_GetPointVelocityCOM((long) getNativeData().getCPointer(), (long) (inPointRelativeToCOM != null ? inPointRelativeToCOM.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPointVelocityCOM(*((Vec3* )inPointRelativeToCOM_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPointVelocityCOM(long this_addr, long inPointRelativeToCOM_addr);

    public Vec3 GetAccumulatedForce() {
        long pointer = internal_native_GetAccumulatedForce((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAccumulatedForce();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetAccumulatedForce(long this_addr);

    public Vec3 GetAccumulatedTorque() {
        long pointer = internal_native_GetAccumulatedTorque((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAccumulatedTorque();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetAccumulatedTorque(long this_addr);

    public void ResetForce() {
        internal_native_ResetForce((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->ResetForce();
*/
    public static native void internal_native_ResetForce(long this_addr);

    public void ResetTorque() {
        internal_native_ResetTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->ResetTorque();
*/
    public static native void internal_native_ResetTorque(long this_addr);

    public void ResetMotion() {
        internal_native_ResetMotion((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->ResetMotion();
*/
    public static native void internal_native_ResetMotion(long this_addr);

    public Vec3 LockTranslation(Vec3 inV) {
        long pointer = internal_native_LockTranslation((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_7 == null)
            Vec3_TEMP_GEN_7 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_7.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_7;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->LockTranslation(*((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_LockTranslation(long this_addr, long inV_addr);

    public Vec3 LockAngular(Vec3 inV) {
        long pointer = internal_native_LockAngular((long) getNativeData().getCPointer(), (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_8 == null)
            Vec3_TEMP_GEN_8 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_8.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_8;
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->LockAngular(*((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_LockAngular(long this_addr, long inV_addr);

    public void SetNumVelocityStepsOverride(int inN) {
        internal_native_SetNumVelocityStepsOverride((long) getNativeData().getCPointer(), inN);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetNumVelocityStepsOverride(inN);
*/
    public static native void internal_native_SetNumVelocityStepsOverride(long this_addr, int inN);

    public int GetNumVelocityStepsOverride() {
        return internal_native_GetNumVelocityStepsOverride((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetNumVelocityStepsOverride();
*/
    public static native int internal_native_GetNumVelocityStepsOverride(long this_addr);

    public void SetNumPositionStepsOverride(int inN) {
        internal_native_SetNumPositionStepsOverride((long) getNativeData().getCPointer(), inN);
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
nativeObject->SetNumPositionStepsOverride(inN);
*/
    public static native void internal_native_SetNumPositionStepsOverride(long this_addr, int inN);

    public int GetNumPositionStepsOverride() {
        return internal_native_GetNumPositionStepsOverride((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotionProperties* nativeObject = (MotionProperties*)this_addr;
return nativeObject->GetNumPositionStepsOverride();
*/
    public static native int internal_native_GetNumPositionStepsOverride(long this_addr);
}
