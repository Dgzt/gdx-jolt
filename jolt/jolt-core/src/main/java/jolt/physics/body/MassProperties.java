/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.body;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Mat44;

public class MassProperties extends IDLBase {

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    static public final MassProperties T_01 = new MassProperties((byte) 1, (char) 1);

    static public final MassProperties T_02 = new MassProperties((byte) 1, (char) 1);

    static public final MassProperties T_03 = new MassProperties((byte) 1, (char) 1);

    public MassProperties() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MassProperties();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MassProperties(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public void SetMassAndInertiaOfSolidBox(Vec3 inBoxSize, float inDensity) {
        internal_native_SetMassAndInertiaOfSolidBox((long) getNativeData().getCPointer(), (long) (inBoxSize != null ? inBoxSize.getNativeData().getCPointer() : 0), inDensity);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->SetMassAndInertiaOfSolidBox(*((Vec3* )inBoxSize_addr), (float)inDensity);
*/
    private static native void internal_native_SetMassAndInertiaOfSolidBox(long this_addr, long inBoxSize_addr, float inDensity);

    public void ScaleToMass(float inMass) {
        internal_native_ScaleToMass((long) getNativeData().getCPointer(), inMass);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->ScaleToMass((float)inMass);
*/
    private static native void internal_native_ScaleToMass(long this_addr, float inMass);

    public static Vec3 sGetEquivalentSolidBoxSize(float inMass, Vec3 inInertiaDiagonal) {
        long pointer = internal_native_sGetEquivalentSolidBoxSize(inMass, (long) (inInertiaDiagonal != null ? inInertiaDiagonal.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static Vec3 copy_addr;
copy_addr = MassProperties::sGetEquivalentSolidBoxSize((float)inMass, *((Vec3* )inInertiaDiagonal_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_sGetEquivalentSolidBoxSize(float inMass, long inInertiaDiagonal_addr);

    public void Rotate(Mat44 inRotation) {
        internal_native_Rotate((long) getNativeData().getCPointer(), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->Rotate(*((Mat44* )inRotation_addr));
*/
    private static native void internal_native_Rotate(long this_addr, long inRotation_addr);

    public void Translate(Vec3 inTranslation) {
        internal_native_Translate((long) getNativeData().getCPointer(), (long) (inTranslation != null ? inTranslation.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->Translate(*((Vec3* )inTranslation_addr));
*/
    private static native void internal_native_Translate(long this_addr, long inTranslation_addr);

    public void Scale(Vec3 inScale) {
        internal_native_Scale((long) getNativeData().getCPointer(), (long) (inScale != null ? inScale.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->Scale(*((Vec3* )inScale_addr));
*/
    private static native void internal_native_Scale(long this_addr, long inScale_addr);

    public float get_mMass() {
        return internal_native_get_mMass((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
return nativeObject->mMass;
*/
    private static native float internal_native_get_mMass(long this_addr);

    public void set_mMass(float mMass) {
        internal_native_set_mMass((long) getNativeData().getCPointer(), mMass);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->mMass = mMass;
*/
    private static native void internal_native_set_mMass(long this_addr, float mMass);

    public Mat44 get_mInertia() {
        long pointer = internal_native_get_mInertia((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
return (jlong)&nativeObject->mInertia;
*/
    private static native long internal_native_get_mInertia(long this_addr);

    public void set_mInertia(Mat44 mInertia) {
        internal_native_set_mInertia((long) getNativeData().getCPointer(), (long) (mInertia != null ? mInertia.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->mInertia = *((Mat44*)mInertia_addr);
*/
    private static native void internal_native_set_mInertia(long this_addr, long mInertia_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static void native_SetMassAndInertiaOfSolidBox(long this_addr, long inBoxSize_addr, float inDensity) {
        internal_native_SetMassAndInertiaOfSolidBox(this_addr, inBoxSize_addr, inDensity);
    }

    public static void native_ScaleToMass(long this_addr, float inMass) {
        internal_native_ScaleToMass(this_addr, inMass);
    }

    public static long native_sGetEquivalentSolidBoxSize(float inMass, long inInertiaDiagonal_addr) {
        return internal_native_sGetEquivalentSolidBoxSize(inMass, inInertiaDiagonal_addr);
    }

    public static void native_Rotate(long this_addr, long inRotation_addr) {
        internal_native_Rotate(this_addr, inRotation_addr);
    }

    public static void native_Translate(long this_addr, long inTranslation_addr) {
        internal_native_Translate(this_addr, inTranslation_addr);
    }

    public static void native_Scale(long this_addr, long inScale_addr) {
        internal_native_Scale(this_addr, inScale_addr);
    }

    public static float native_get_mMass(long this_addr) {
        return internal_native_get_mMass(this_addr);
    }

    public static void native_set_mMass(long this_addr, float mMass) {
        internal_native_set_mMass(this_addr, mMass);
    }

    public static long native_get_mInertia(long this_addr) {
        return internal_native_get_mInertia(this_addr);
    }

    public static void native_set_mInertia(long this_addr, long mInertia_addr) {
        internal_native_set_mInertia(this_addr, mInertia_addr);
    }
}
