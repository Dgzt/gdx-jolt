/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.body;

import jolt.idl.IDLBase;
import jolt.core.SharedMutex;

public class BodyLockInterface extends IDLBase {

    private Body Body_TEMP_GEN_0;

    private SharedMutex SharedMutex_TEMP_GEN_0;

    private SharedMutex SharedMutex_TEMP_GEN_1;

    static public final BodyLockInterface T_01 = new BodyLockInterface((byte) 1, (char) 1);

    static public final BodyLockInterface T_02 = new BodyLockInterface((byte) 1, (char) 1);

    static public final BodyLockInterface T_03 = new BodyLockInterface((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public BodyLockInterface(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public Body TryGetBody(BodyID inBodyID) {
        long pointer = internal_native_TryGetBody((long) getNativeData().getCPointer(), (long) (inBodyID != null ? inBodyID.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Body_TEMP_GEN_0 == null)
            Body_TEMP_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Body_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
Body* obj = nativeObject->TryGetBody(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    private static native long internal_native_TryGetBody(long this_addr, long inBodyID_addr);

    public SharedMutex LockRead(BodyID inBodyID) {
        long pointer = internal_native_LockRead((long) getNativeData().getCPointer(), (long) (inBodyID != null ? inBodyID.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SharedMutex_TEMP_GEN_0 == null)
            SharedMutex_TEMP_GEN_0 = new SharedMutex((byte) 1, (char) 1);
        SharedMutex_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SharedMutex_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
SharedMutex* obj = nativeObject->LockRead(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    private static native long internal_native_LockRead(long this_addr, long inBodyID_addr);

    public void UnlockRead(SharedMutex inMutex) {
        internal_native_UnlockRead((long) getNativeData().getCPointer(), (long) (inMutex != null ? inMutex.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->UnlockRead((SharedMutex* )inMutex_addr);
*/
    private static native void internal_native_UnlockRead(long this_addr, long inMutex_addr);

    public SharedMutex LockWrite(BodyID inBodyID) {
        long pointer = internal_native_LockWrite((long) getNativeData().getCPointer(), (long) (inBodyID != null ? inBodyID.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SharedMutex_TEMP_GEN_1 == null)
            SharedMutex_TEMP_GEN_1 = new SharedMutex((byte) 1, (char) 1);
        SharedMutex_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return SharedMutex_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
SharedMutex* obj = nativeObject->LockWrite(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    private static native long internal_native_LockWrite(long this_addr, long inBodyID_addr);

    public void UnlockWrite(SharedMutex inMutex) {
        internal_native_UnlockWrite((long) getNativeData().getCPointer(), (long) (inMutex != null ? inMutex.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->UnlockWrite((SharedMutex* )inMutex_addr);
*/
    private static native void internal_native_UnlockWrite(long this_addr, long inMutex_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_TryGetBody(long this_addr, long inBodyID_addr) {
        return internal_native_TryGetBody(this_addr, inBodyID_addr);
    }

    public static long native_LockRead(long this_addr, long inBodyID_addr) {
        return internal_native_LockRead(this_addr, inBodyID_addr);
    }

    public static void native_UnlockRead(long this_addr, long inMutex_addr) {
        internal_native_UnlockRead(this_addr, inMutex_addr);
    }

    public static long native_LockWrite(long this_addr, long inBodyID_addr) {
        return internal_native_LockWrite(this_addr, inBodyID_addr);
    }

    public static void native_UnlockWrite(long this_addr, long inMutex_addr) {
        internal_native_UnlockWrite(this_addr, inMutex_addr);
    }
}
