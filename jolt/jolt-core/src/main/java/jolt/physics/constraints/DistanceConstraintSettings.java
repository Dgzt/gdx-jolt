/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.enums.EConstraintSpace;
import jolt.math.Vec3;

public class DistanceConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private SpringSettings SpringSettings_TEMP_GEN_0;

    static public final DistanceConstraintSettings T_01 = new DistanceConstraintSettings((byte) 1, (char) 1);

    static public final DistanceConstraintSettings T_02 = new DistanceConstraintSettings((byte) 1, (char) 1);

    static public final DistanceConstraintSettings T_03 = new DistanceConstraintSettings((byte) 1, (char) 1);

    public DistanceConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new DistanceConstraintSettings();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public DistanceConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public EConstraintSpace get_mSpace() {
        int value = internal_native_get_mSpace((long) getNativeData().getCPointer());
        return EConstraintSpace.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    private static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(EConstraintSpace mSpace) {
        internal_native_set_mSpace((long) getNativeData().getCPointer(), (long) (mSpace != null ? mSpace.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    private static native void internal_native_set_mSpace(long this_addr, long mSpace);

    public Vec3 get_mPoint1() {
        long pointer = internal_native_get_mPoint1((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint1;
*/
    private static native long internal_native_get_mPoint1(long this_addr);

    public void set_mPoint1(Vec3 mPoint1) {
        internal_native_set_mPoint1((long) getNativeData().getCPointer(), (long) (mPoint1 != null ? mPoint1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
nativeObject->mPoint1 = *((Vec3*)mPoint1_addr);
*/
    private static native void internal_native_set_mPoint1(long this_addr, long mPoint1_addr);

    public Vec3 get_mPoint2() {
        long pointer = internal_native_get_mPoint2((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint2;
*/
    private static native long internal_native_get_mPoint2(long this_addr);

    public void set_mPoint2(Vec3 mPoint2) {
        internal_native_set_mPoint2((long) getNativeData().getCPointer(), (long) (mPoint2 != null ? mPoint2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
nativeObject->mPoint2 = *((Vec3*)mPoint2_addr);
*/
    private static native void internal_native_set_mPoint2(long this_addr, long mPoint2_addr);

    public float get_mMinDistance() {
        return internal_native_get_mMinDistance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
return nativeObject->mMinDistance;
*/
    private static native float internal_native_get_mMinDistance(long this_addr);

    public void set_mMinDistance(float mMinDistance) {
        internal_native_set_mMinDistance((long) getNativeData().getCPointer(), mMinDistance);
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
nativeObject->mMinDistance = mMinDistance;
*/
    private static native void internal_native_set_mMinDistance(long this_addr, float mMinDistance);

    public float get_mMaxDistance() {
        return internal_native_get_mMaxDistance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
return nativeObject->mMaxDistance;
*/
    private static native float internal_native_get_mMaxDistance(long this_addr);

    public void set_mMaxDistance(float mMaxDistance) {
        internal_native_set_mMaxDistance((long) getNativeData().getCPointer(), mMaxDistance);
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
nativeObject->mMaxDistance = mMaxDistance;
*/
    private static native void internal_native_set_mMaxDistance(long this_addr, float mMaxDistance);

    public SpringSettings get_mLimitsSpringSettings() {
        long pointer = internal_native_get_mLimitsSpringSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (SpringSettings_TEMP_GEN_0 == null)
            SpringSettings_TEMP_GEN_0 = new SpringSettings((byte) 1, (char) 1);
        SpringSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SpringSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
return (jlong)&nativeObject->mLimitsSpringSettings;
*/
    private static native long internal_native_get_mLimitsSpringSettings(long this_addr);

    public void set_mLimitsSpringSettings(SpringSettings mLimitsSpringSettings) {
        internal_native_set_mLimitsSpringSettings((long) getNativeData().getCPointer(), (long) (mLimitsSpringSettings != null ? mLimitsSpringSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
DistanceConstraintSettings* nativeObject = (DistanceConstraintSettings*)this_addr;
nativeObject->mLimitsSpringSettings = *((SpringSettings*)mLimitsSpringSettings_addr);
*/
    private static native void internal_native_set_mLimitsSpringSettings(long this_addr, long mLimitsSpringSettings_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_get_mSpace(long this_addr) {
        return internal_native_get_mSpace(this_addr);
    }

    public static void native_set_mSpace(long this_addr, long mSpace) {
        internal_native_set_mSpace(this_addr, mSpace);
    }

    public static long native_get_mPoint1(long this_addr) {
        return internal_native_get_mPoint1(this_addr);
    }

    public static void native_set_mPoint1(long this_addr, long mPoint1_addr) {
        internal_native_set_mPoint1(this_addr, mPoint1_addr);
    }

    public static long native_get_mPoint2(long this_addr) {
        return internal_native_get_mPoint2(this_addr);
    }

    public static void native_set_mPoint2(long this_addr, long mPoint2_addr) {
        internal_native_set_mPoint2(this_addr, mPoint2_addr);
    }

    public static float native_get_mMinDistance(long this_addr) {
        return internal_native_get_mMinDistance(this_addr);
    }

    public static void native_set_mMinDistance(long this_addr, float mMinDistance) {
        internal_native_set_mMinDistance(this_addr, mMinDistance);
    }

    public static float native_get_mMaxDistance(long this_addr) {
        return internal_native_get_mMaxDistance(this_addr);
    }

    public static void native_set_mMaxDistance(long this_addr, float mMaxDistance) {
        internal_native_set_mMaxDistance(this_addr, mMaxDistance);
    }

    public static long native_get_mLimitsSpringSettings(long this_addr) {
        return internal_native_get_mLimitsSpringSettings(this_addr);
    }

    public static void native_set_mLimitsSpringSettings(long this_addr, long mLimitsSpringSettings_addr) {
        internal_native_set_mLimitsSpringSettings(this_addr, mLimitsSpringSettings_addr);
    }
}
