/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.math.Vec3;

public class RackAndPinionConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    static public final RackAndPinionConstraintSettings T_01 = new RackAndPinionConstraintSettings((byte) 1, (char) 1);

    static public final RackAndPinionConstraintSettings T_02 = new RackAndPinionConstraintSettings((byte) 1, (char) 1);

    static public final RackAndPinionConstraintSettings T_03 = new RackAndPinionConstraintSettings((byte) 1, (char) 1);

    public RackAndPinionConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RackAndPinionConstraintSettings();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RackAndPinionConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public void SetRatio(int inNumTeethRack, float inRackLength, int inNumTeethPinion) {
        internal_native_SetRatio((long) getNativeData().getCPointer(), inNumTeethRack, inRackLength, inNumTeethPinion);
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
nativeObject->SetRatio((int)inNumTeethRack, (float)inRackLength, (int)inNumTeethPinion);
*/
    private static native void internal_native_SetRatio(long this_addr, int inNumTeethRack, float inRackLength, int inNumTeethPinion);

    public int get_mSpace() {
        return internal_native_get_mSpace((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    private static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(int mSpace) {
        internal_native_set_mSpace((long) getNativeData().getCPointer(), mSpace);
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    private static native void internal_native_set_mSpace(long this_addr, int mSpace);

    public Vec3 get_mHingeAxis() {
        long pointer = internal_native_get_mHingeAxis((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
return (jlong)&nativeObject->mHingeAxis;
*/
    private static native long internal_native_get_mHingeAxis(long this_addr);

    public void set_mHingeAxis(Vec3 mHingeAxis) {
        internal_native_set_mHingeAxis((long) getNativeData().getCPointer(), (long) (mHingeAxis != null ? mHingeAxis.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
nativeObject->mHingeAxis = *((Vec3*)mHingeAxis_addr);
*/
    private static native void internal_native_set_mHingeAxis(long this_addr, long mHingeAxis_addr);

    public Vec3 get_mSliderAxis() {
        long pointer = internal_native_get_mSliderAxis((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
return (jlong)&nativeObject->mSliderAxis;
*/
    private static native long internal_native_get_mSliderAxis(long this_addr);

    public void set_mSliderAxis(Vec3 mSliderAxis) {
        internal_native_set_mSliderAxis((long) getNativeData().getCPointer(), (long) (mSliderAxis != null ? mSliderAxis.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
nativeObject->mSliderAxis = *((Vec3*)mSliderAxis_addr);
*/
    private static native void internal_native_set_mSliderAxis(long this_addr, long mSliderAxis_addr);

    public float get_mRatio() {
        return internal_native_get_mRatio((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
return nativeObject->mRatio;
*/
    private static native float internal_native_get_mRatio(long this_addr);

    public void set_mRatio(float mRatio) {
        internal_native_set_mRatio((long) getNativeData().getCPointer(), mRatio);
    }

    /*[-JNI;-NATIVE]
RackAndPinionConstraintSettings* nativeObject = (RackAndPinionConstraintSettings*)this_addr;
nativeObject->mRatio = mRatio;
*/
    private static native void internal_native_set_mRatio(long this_addr, float mRatio);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static void native_SetRatio(long this_addr, int inNumTeethRack, float inRackLength, int inNumTeethPinion) {
        internal_native_SetRatio(this_addr, inNumTeethRack, inRackLength, inNumTeethPinion);
    }

    public static int native_get_mSpace(long this_addr) {
        return internal_native_get_mSpace(this_addr);
    }

    public static void native_set_mSpace(long this_addr, int mSpace) {
        internal_native_set_mSpace(this_addr, mSpace);
    }

    public static long native_get_mHingeAxis(long this_addr) {
        return internal_native_get_mHingeAxis(this_addr);
    }

    public static void native_set_mHingeAxis(long this_addr, long mHingeAxis_addr) {
        internal_native_set_mHingeAxis(this_addr, mHingeAxis_addr);
    }

    public static long native_get_mSliderAxis(long this_addr) {
        return internal_native_get_mSliderAxis(this_addr);
    }

    public static void native_set_mSliderAxis(long this_addr, long mSliderAxis_addr) {
        internal_native_set_mSliderAxis(this_addr, mSliderAxis_addr);
    }

    public static float native_get_mRatio(long this_addr) {
        return internal_native_get_mRatio(this_addr);
    }

    public static void native_set_mRatio(long this_addr, float mRatio) {
        internal_native_set_mRatio(this_addr, mRatio);
    }
}
