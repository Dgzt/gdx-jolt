/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.idl.IDLBase;

public class MotorSettings extends IDLBase {

    private SpringSettings SpringSettings_TEMP_GEN_0;

    static public final MotorSettings T_01 = new MotorSettings((byte) 1, (char) 1);

    static public final MotorSettings T_02 = new MotorSettings((byte) 1, (char) 1);

    static public final MotorSettings T_03 = new MotorSettings((byte) 1, (char) 1);

    public MotorSettings() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MotorSettings();
*/
    private static native long internal_native_create();

    public MotorSettings(float inFrequency, float inDamping) {
        long addr = internal_native_create_float_float(inFrequency, inDamping);
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MotorSettings((float)inFrequency, (float)inDamping);
*/
    private static native long internal_native_create_float_float(float inFrequency, float inDamping);

    public MotorSettings(float inFrequency, float inDamping, float inForceLimit, float inTorqueLimit) {
        long addr = internal_native_create_float_float_float_float(inFrequency, inDamping, inForceLimit, inTorqueLimit);
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MotorSettings((float)inFrequency, (float)inDamping, (float)inForceLimit, (float)inTorqueLimit);
*/
    private static native long internal_native_create_float_float_float_float(float inFrequency, float inDamping, float inForceLimit, float inTorqueLimit);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MotorSettings(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public SpringSettings get_mSpringSettings() {
        long pointer = internal_native_get_mSpringSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SpringSettings_TEMP_GEN_0 == null)
            SpringSettings_TEMP_GEN_0 = new SpringSettings((byte) 1, (char) 1);
        SpringSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SpringSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
return (jlong)&nativeObject->mSpringSettings;
*/
    private static native long internal_native_get_mSpringSettings(long this_addr);

    public void set_mSpringSettings(SpringSettings mSpringSettings) {
        internal_native_set_mSpringSettings((long) getNativeData().getCPointer(), (long) (mSpringSettings != null ? mSpringSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
nativeObject->mSpringSettings = *((SpringSettings*)mSpringSettings_addr);
*/
    private static native void internal_native_set_mSpringSettings(long this_addr, long mSpringSettings_addr);

    public float get_mMinForceLimit() {
        return internal_native_get_mMinForceLimit((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
return nativeObject->mMinForceLimit;
*/
    private static native float internal_native_get_mMinForceLimit(long this_addr);

    public void set_mMinForceLimit(float mMinForceLimit) {
        internal_native_set_mMinForceLimit((long) getNativeData().getCPointer(), mMinForceLimit);
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
nativeObject->mMinForceLimit = mMinForceLimit;
*/
    private static native void internal_native_set_mMinForceLimit(long this_addr, float mMinForceLimit);

    public float get_mMaxForceLimit() {
        return internal_native_get_mMaxForceLimit((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
return nativeObject->mMaxForceLimit;
*/
    private static native float internal_native_get_mMaxForceLimit(long this_addr);

    public void set_mMaxForceLimit(float mMaxForceLimit) {
        internal_native_set_mMaxForceLimit((long) getNativeData().getCPointer(), mMaxForceLimit);
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
nativeObject->mMaxForceLimit = mMaxForceLimit;
*/
    private static native void internal_native_set_mMaxForceLimit(long this_addr, float mMaxForceLimit);

    public float get_mMinTorqueLimit() {
        return internal_native_get_mMinTorqueLimit((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
return nativeObject->mMinTorqueLimit;
*/
    private static native float internal_native_get_mMinTorqueLimit(long this_addr);

    public void set_mMinTorqueLimit(float mMinTorqueLimit) {
        internal_native_set_mMinTorqueLimit((long) getNativeData().getCPointer(), mMinTorqueLimit);
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
nativeObject->mMinTorqueLimit = mMinTorqueLimit;
*/
    private static native void internal_native_set_mMinTorqueLimit(long this_addr, float mMinTorqueLimit);

    public float get_mMaxTorqueLimit() {
        return internal_native_get_mMaxTorqueLimit((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
return nativeObject->mMaxTorqueLimit;
*/
    private static native float internal_native_get_mMaxTorqueLimit(long this_addr);

    public void set_mMaxTorqueLimit(float mMaxTorqueLimit) {
        internal_native_set_mMaxTorqueLimit((long) getNativeData().getCPointer(), mMaxTorqueLimit);
    }

    /*[-JNI;-NATIVE]
MotorSettings* nativeObject = (MotorSettings*)this_addr;
nativeObject->mMaxTorqueLimit = mMaxTorqueLimit;
*/
    private static native void internal_native_set_mMaxTorqueLimit(long this_addr, float mMaxTorqueLimit);

    public static long native_create() {
        return internal_native_create();
    }

    public static long native_create_float_float(float inFrequency, float inDamping) {
        return internal_native_create_float_float(inFrequency, inDamping);
    }

    public static long native_create_float_float_float_float(float inFrequency, float inDamping, float inForceLimit, float inTorqueLimit) {
        return internal_native_create_float_float_float_float(inFrequency, inDamping, inForceLimit, inTorqueLimit);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_get_mSpringSettings(long this_addr) {
        return internal_native_get_mSpringSettings(this_addr);
    }

    public static void native_set_mSpringSettings(long this_addr, long mSpringSettings_addr) {
        internal_native_set_mSpringSettings(this_addr, mSpringSettings_addr);
    }

    public static float native_get_mMinForceLimit(long this_addr) {
        return internal_native_get_mMinForceLimit(this_addr);
    }

    public static void native_set_mMinForceLimit(long this_addr, float mMinForceLimit) {
        internal_native_set_mMinForceLimit(this_addr, mMinForceLimit);
    }

    public static float native_get_mMaxForceLimit(long this_addr) {
        return internal_native_get_mMaxForceLimit(this_addr);
    }

    public static void native_set_mMaxForceLimit(long this_addr, float mMaxForceLimit) {
        internal_native_set_mMaxForceLimit(this_addr, mMaxForceLimit);
    }

    public static float native_get_mMinTorqueLimit(long this_addr) {
        return internal_native_get_mMinTorqueLimit(this_addr);
    }

    public static void native_set_mMinTorqueLimit(long this_addr, float mMinTorqueLimit) {
        internal_native_set_mMinTorqueLimit(this_addr, mMinTorqueLimit);
    }

    public static float native_get_mMaxTorqueLimit(long this_addr) {
        return internal_native_get_mMaxTorqueLimit(this_addr);
    }

    public static void native_set_mMaxTorqueLimit(long this_addr, float mMaxTorqueLimit) {
        internal_native_set_mMaxTorqueLimit(this_addr, mMaxTorqueLimit);
    }
}
