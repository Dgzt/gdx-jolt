/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.idl.IDLBase;

public class PathConstraintPath extends IDLBase {

    static public final PathConstraintPath T_01 = new PathConstraintPath((byte) 1, (char) 1);

    static public final PathConstraintPath T_02 = new PathConstraintPath((byte) 1, (char) 1);

    static public final PathConstraintPath T_03 = new PathConstraintPath((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public PathConstraintPath(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PathConstraintPath* nativeObject = (PathConstraintPath*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public boolean IsLooping() {
        return internal_native_IsLooping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PathConstraintPath* nativeObject = (PathConstraintPath*)this_addr;
return nativeObject->IsLooping();
*/
    private static native boolean internal_native_IsLooping(long this_addr);

    public void SetIsLooping(boolean inIsLooping) {
        internal_native_SetIsLooping((long) getNativeData().getCPointer(), inIsLooping);
    }

    /*[-JNI;-NATIVE]
PathConstraintPath* nativeObject = (PathConstraintPath*)this_addr;
nativeObject->SetIsLooping(inIsLooping);
*/
    private static native void internal_native_SetIsLooping(long this_addr, boolean inIsLooping);

    public int GetRefCount() {
        return internal_native_GetRefCount((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PathConstraintPath* nativeObject = (PathConstraintPath*)this_addr;
return nativeObject->GetRefCount();
*/
    private static native int internal_native_GetRefCount(long this_addr);

    public void AddRef() {
        internal_native_AddRef((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PathConstraintPath* nativeObject = (PathConstraintPath*)this_addr;
nativeObject->AddRef();
*/
    private static native void internal_native_AddRef(long this_addr);

    public void Release() {
        internal_native_Release((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PathConstraintPath* nativeObject = (PathConstraintPath*)this_addr;
nativeObject->Release();
*/
    private static native void internal_native_Release(long this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static boolean native_IsLooping(long this_addr) {
        return internal_native_IsLooping(this_addr);
    }

    public static void native_SetIsLooping(long this_addr, boolean inIsLooping) {
        internal_native_SetIsLooping(this_addr, inIsLooping);
    }

    public static int native_GetRefCount(long this_addr) {
        return internal_native_GetRefCount(this_addr);
    }

    public static void native_AddRef(long this_addr) {
        internal_native_AddRef(this_addr);
    }

    public static void native_Release(long this_addr) {
        internal_native_Release(this_addr);
    }
}
