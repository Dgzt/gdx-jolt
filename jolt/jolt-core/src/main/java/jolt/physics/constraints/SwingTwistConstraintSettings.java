/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.enums.EConstraintSpace;
import jolt.math.Vec3;
import jolt.enums.ESwingType;

public class SwingTwistConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private MotorSettings MotorSettings_TEMP_GEN_0;

    private MotorSettings MotorSettings_TEMP_GEN_1;

    static public final SwingTwistConstraintSettings T_01 = new SwingTwistConstraintSettings((byte) 1, (char) 1);

    static public final SwingTwistConstraintSettings T_02 = new SwingTwistConstraintSettings((byte) 1, (char) 1);

    static public final SwingTwistConstraintSettings T_03 = new SwingTwistConstraintSettings((byte) 1, (char) 1);

    public SwingTwistConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SwingTwistConstraintSettings();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SwingTwistConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public EConstraintSpace get_mSpace() {
        int value = internal_native_get_mSpace((long) getNativeData().getCPointer());
        return EConstraintSpace.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    public static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(EConstraintSpace mSpace) {
        internal_native_set_mSpace((long) getNativeData().getCPointer(), (long) (mSpace != null ? mSpace.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    public static native void internal_native_set_mSpace(long this_addr, long mSpace);

    public Vec3 get_mPosition1() {
        long pointer = internal_native_get_mPosition1((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPosition1;
*/
    public static native long internal_native_get_mPosition1(long this_addr);

    public void set_mPosition1(Vec3 mPosition1) {
        internal_native_set_mPosition1((long) getNativeData().getCPointer(), (long) (mPosition1 != null ? mPosition1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mPosition1 = *((Vec3*)mPosition1_addr);
*/
    public static native void internal_native_set_mPosition1(long this_addr, long mPosition1_addr);

    public Vec3 get_mTwistAxis1() {
        long pointer = internal_native_get_mTwistAxis1((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mTwistAxis1;
*/
    public static native long internal_native_get_mTwistAxis1(long this_addr);

    public void set_mTwistAxis1(Vec3 mTwistAxis1) {
        internal_native_set_mTwistAxis1((long) getNativeData().getCPointer(), (long) (mTwistAxis1 != null ? mTwistAxis1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mTwistAxis1 = *((Vec3*)mTwistAxis1_addr);
*/
    public static native void internal_native_set_mTwistAxis1(long this_addr, long mTwistAxis1_addr);

    public Vec3 get_mPlaneAxis1() {
        long pointer = internal_native_get_mPlaneAxis1((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPlaneAxis1;
*/
    public static native long internal_native_get_mPlaneAxis1(long this_addr);

    public void set_mPlaneAxis1(Vec3 mPlaneAxis1) {
        internal_native_set_mPlaneAxis1((long) getNativeData().getCPointer(), (long) (mPlaneAxis1 != null ? mPlaneAxis1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mPlaneAxis1 = *((Vec3*)mPlaneAxis1_addr);
*/
    public static native void internal_native_set_mPlaneAxis1(long this_addr, long mPlaneAxis1_addr);

    public Vec3 get_mPosition2() {
        long pointer = internal_native_get_mPosition2((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPosition2;
*/
    public static native long internal_native_get_mPosition2(long this_addr);

    public void set_mPosition2(Vec3 mPosition2) {
        internal_native_set_mPosition2((long) getNativeData().getCPointer(), (long) (mPosition2 != null ? mPosition2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mPosition2 = *((Vec3*)mPosition2_addr);
*/
    public static native void internal_native_set_mPosition2(long this_addr, long mPosition2_addr);

    public Vec3 get_mTwistAxis2() {
        long pointer = internal_native_get_mTwistAxis2((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mTwistAxis2;
*/
    public static native long internal_native_get_mTwistAxis2(long this_addr);

    public void set_mTwistAxis2(Vec3 mTwistAxis2) {
        internal_native_set_mTwistAxis2((long) getNativeData().getCPointer(), (long) (mTwistAxis2 != null ? mTwistAxis2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mTwistAxis2 = *((Vec3*)mTwistAxis2_addr);
*/
    public static native void internal_native_set_mTwistAxis2(long this_addr, long mTwistAxis2_addr);

    public Vec3 get_mPlaneAxis2() {
        long pointer = internal_native_get_mPlaneAxis2((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPlaneAxis2;
*/
    public static native long internal_native_get_mPlaneAxis2(long this_addr);

    public void set_mPlaneAxis2(Vec3 mPlaneAxis2) {
        internal_native_set_mPlaneAxis2((long) getNativeData().getCPointer(), (long) (mPlaneAxis2 != null ? mPlaneAxis2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mPlaneAxis2 = *((Vec3*)mPlaneAxis2_addr);
*/
    public static native void internal_native_set_mPlaneAxis2(long this_addr, long mPlaneAxis2_addr);

    public ESwingType get_mSwingType() {
        int value = internal_native_get_mSwingType((long) getNativeData().getCPointer());
        return ESwingType.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jint)nativeObject->mSwingType;
*/
    public static native int internal_native_get_mSwingType(long this_addr);

    public void set_mSwingType(ESwingType mSwingType) {
        internal_native_set_mSwingType((long) getNativeData().getCPointer(), (long) (mSwingType != null ? mSwingType.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mSwingType = (::ESwingType)mSwingType;
*/
    public static native void internal_native_set_mSwingType(long this_addr, long mSwingType);

    public float get_mNormalHalfConeAngle() {
        return internal_native_get_mNormalHalfConeAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return nativeObject->mNormalHalfConeAngle;
*/
    public static native float internal_native_get_mNormalHalfConeAngle(long this_addr);

    public void set_mNormalHalfConeAngle(float mNormalHalfConeAngle) {
        internal_native_set_mNormalHalfConeAngle((long) getNativeData().getCPointer(), mNormalHalfConeAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mNormalHalfConeAngle = mNormalHalfConeAngle;
*/
    public static native void internal_native_set_mNormalHalfConeAngle(long this_addr, float mNormalHalfConeAngle);

    public float get_mPlaneHalfConeAngle() {
        return internal_native_get_mPlaneHalfConeAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return nativeObject->mPlaneHalfConeAngle;
*/
    public static native float internal_native_get_mPlaneHalfConeAngle(long this_addr);

    public void set_mPlaneHalfConeAngle(float mPlaneHalfConeAngle) {
        internal_native_set_mPlaneHalfConeAngle((long) getNativeData().getCPointer(), mPlaneHalfConeAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mPlaneHalfConeAngle = mPlaneHalfConeAngle;
*/
    public static native void internal_native_set_mPlaneHalfConeAngle(long this_addr, float mPlaneHalfConeAngle);

    public float get_mTwistMinAngle() {
        return internal_native_get_mTwistMinAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return nativeObject->mTwistMinAngle;
*/
    public static native float internal_native_get_mTwistMinAngle(long this_addr);

    public void set_mTwistMinAngle(float mTwistMinAngle) {
        internal_native_set_mTwistMinAngle((long) getNativeData().getCPointer(), mTwistMinAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mTwistMinAngle = mTwistMinAngle;
*/
    public static native void internal_native_set_mTwistMinAngle(long this_addr, float mTwistMinAngle);

    public float get_mTwistMaxAngle() {
        return internal_native_get_mTwistMaxAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return nativeObject->mTwistMaxAngle;
*/
    public static native float internal_native_get_mTwistMaxAngle(long this_addr);

    public void set_mTwistMaxAngle(float mTwistMaxAngle) {
        internal_native_set_mTwistMaxAngle((long) getNativeData().getCPointer(), mTwistMaxAngle);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mTwistMaxAngle = mTwistMaxAngle;
*/
    public static native void internal_native_set_mTwistMaxAngle(long this_addr, float mTwistMaxAngle);

    public float get_mMaxFrictionTorque() {
        return internal_native_get_mMaxFrictionTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return nativeObject->mMaxFrictionTorque;
*/
    public static native float internal_native_get_mMaxFrictionTorque(long this_addr);

    public void set_mMaxFrictionTorque(float mMaxFrictionTorque) {
        internal_native_set_mMaxFrictionTorque((long) getNativeData().getCPointer(), mMaxFrictionTorque);
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mMaxFrictionTorque = mMaxFrictionTorque;
*/
    public static native void internal_native_set_mMaxFrictionTorque(long this_addr, float mMaxFrictionTorque);

    public MotorSettings get_mSwingMotorSettings() {
        long pointer = internal_native_get_mSwingMotorSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (MotorSettings_TEMP_GEN_0 == null)
            MotorSettings_TEMP_GEN_0 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return MotorSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mSwingMotorSettings;
*/
    public static native long internal_native_get_mSwingMotorSettings(long this_addr);

    public void set_mSwingMotorSettings(MotorSettings mSwingMotorSettings) {
        internal_native_set_mSwingMotorSettings((long) getNativeData().getCPointer(), (long) (mSwingMotorSettings != null ? mSwingMotorSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mSwingMotorSettings = *((MotorSettings*)mSwingMotorSettings_addr);
*/
    public static native void internal_native_set_mSwingMotorSettings(long this_addr, long mSwingMotorSettings_addr);

    public MotorSettings get_mTwistMotorSettings() {
        long pointer = internal_native_get_mTwistMotorSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (MotorSettings_TEMP_GEN_1 == null)
            MotorSettings_TEMP_GEN_1 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return MotorSettings_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
return (jlong)&nativeObject->mTwistMotorSettings;
*/
    public static native long internal_native_get_mTwistMotorSettings(long this_addr);

    public void set_mTwistMotorSettings(MotorSettings mTwistMotorSettings) {
        internal_native_set_mTwistMotorSettings((long) getNativeData().getCPointer(), (long) (mTwistMotorSettings != null ? mTwistMotorSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SwingTwistConstraintSettings* nativeObject = (SwingTwistConstraintSettings*)this_addr;
nativeObject->mTwistMotorSettings = *((MotorSettings*)mTwistMotorSettings_addr);
*/
    public static native void internal_native_set_mTwistMotorSettings(long this_addr, long mTwistMotorSettings_addr);
}
