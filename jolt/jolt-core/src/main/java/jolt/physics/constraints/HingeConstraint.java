/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.enums.EMotorState;
import jolt.math.Vec3;
import jolt.math.Vector2;

public class HingeConstraint extends TwoBodyConstraint {

    private MotorSettings MotorSettings_TEMP_GEN_0;

    private SpringSettings SpringSettings_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vector2 Vector2_TEMP_GEN_0;

    static public final HingeConstraint T_01 = new HingeConstraint((byte) 1, (char) 1);

    static public final HingeConstraint T_02 = new HingeConstraint((byte) 1, (char) 1);

    static public final HingeConstraint T_03 = new HingeConstraint((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public HingeConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public float GetCurrentAngle() {
        return internal_native_GetCurrentAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetCurrentAngle();
*/
    private static native float internal_native_GetCurrentAngle(long this_addr);

    public void SetMaxFrictionTorque(float inFrictionTorque) {
        internal_native_SetMaxFrictionTorque((long) getNativeData().getCPointer(), inFrictionTorque);
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
nativeObject->SetMaxFrictionTorque((float)inFrictionTorque);
*/
    private static native void internal_native_SetMaxFrictionTorque(long this_addr, float inFrictionTorque);

    public float GetMaxFrictionTorque() {
        return internal_native_GetMaxFrictionTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetMaxFrictionTorque();
*/
    private static native float internal_native_GetMaxFrictionTorque(long this_addr);

    public MotorSettings GetMotorSettings() {
        long pointer = internal_native_GetMotorSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (MotorSettings_TEMP_GEN_0 == null)
            MotorSettings_TEMP_GEN_0 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return MotorSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return (jlong)&nativeObject->GetMotorSettings();
*/
    private static native long internal_native_GetMotorSettings(long this_addr);

    public void SetMotorState(EMotorState inState) {
        internal_native_SetMotorState((long) getNativeData().getCPointer(), (long) (inState != null ? inState.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
nativeObject->SetMotorState((::EMotorState)inState);
*/
    private static native void internal_native_SetMotorState(long this_addr, long inState);

    public EMotorState GetMotorState() {
        int value = internal_native_GetMotorState((long) getNativeData().getCPointer());
        return EMotorState.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return (int)nativeObject->GetMotorState();
*/
    private static native int internal_native_GetMotorState(long this_addr);

    public void SetTargetAngularVelocity(float inAngularVelocity) {
        internal_native_SetTargetAngularVelocity((long) getNativeData().getCPointer(), inAngularVelocity);
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
nativeObject->SetTargetAngularVelocity((float)inAngularVelocity);
*/
    private static native void internal_native_SetTargetAngularVelocity(long this_addr, float inAngularVelocity);

    public float GetTargetAngularVelocity() {
        return internal_native_GetTargetAngularVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetTargetAngularVelocity();
*/
    private static native float internal_native_GetTargetAngularVelocity(long this_addr);

    public void SetTargetAngle(float inAngle) {
        internal_native_SetTargetAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
nativeObject->SetTargetAngle((float)inAngle);
*/
    private static native void internal_native_SetTargetAngle(long this_addr, float inAngle);

    public float GetTargetAngle() {
        return internal_native_GetTargetAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetTargetAngle();
*/
    private static native float internal_native_GetTargetAngle(long this_addr);

    public void SetLimits(float inLimitsMin, float inLimitsMax) {
        internal_native_SetLimits((long) getNativeData().getCPointer(), inLimitsMin, inLimitsMax);
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
nativeObject->SetLimits((float)inLimitsMin, (float)inLimitsMax);
*/
    private static native void internal_native_SetLimits(long this_addr, float inLimitsMin, float inLimitsMax);

    public float GetLimitsMin() {
        return internal_native_GetLimitsMin((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetLimitsMin();
*/
    private static native float internal_native_GetLimitsMin(long this_addr);

    public float GetLimitsMax() {
        return internal_native_GetLimitsMax((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetLimitsMax();
*/
    private static native float internal_native_GetLimitsMax(long this_addr);

    public boolean HasLimits() {
        return internal_native_HasLimits((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->HasLimits();
*/
    private static native boolean internal_native_HasLimits(long this_addr);

    public SpringSettings GetLimitsSpringSettings() {
        long pointer = internal_native_GetLimitsSpringSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (SpringSettings_TEMP_GEN_0 == null)
            SpringSettings_TEMP_GEN_0 = new SpringSettings((byte) 1, (char) 1);
        SpringSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SpringSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return (jlong)&nativeObject->GetLimitsSpringSettings();
*/
    private static native long internal_native_GetLimitsSpringSettings(long this_addr);

    public void SetLimitsSpringSettings(SpringSettings inLimitsSpringSettings) {
        internal_native_SetLimitsSpringSettings((long) getNativeData().getCPointer(), (long) (inLimitsSpringSettings != null ? inLimitsSpringSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
nativeObject->SetLimitsSpringSettings(*((SpringSettings* )inLimitsSpringSettings_addr));
*/
    private static native void internal_native_SetLimitsSpringSettings(long this_addr, long inLimitsSpringSettings_addr);

    public Vec3 GetTotalLambdaPosition() {
        long pointer = internal_native_GetTotalLambdaPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTotalLambdaPosition(long this_addr);

    public Vector2 GetTotalLambdaRotation() {
        long pointer = internal_native_GetTotalLambdaRotation((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vector2_TEMP_GEN_0 == null)
            Vector2_TEMP_GEN_0 = new Vector2((byte) 1, (char) 1);
        Vector2_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vector2_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
static Vector2 copy_addr;
copy_addr = nativeObject->GetTotalLambdaRotation();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetTotalLambdaRotation(long this_addr);

    public float GetTotalLambdaRotationLimits() {
        return internal_native_GetTotalLambdaRotationLimits((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetTotalLambdaRotationLimits();
*/
    private static native float internal_native_GetTotalLambdaRotationLimits(long this_addr);

    public float GetTotalLambdaMotor() {
        return internal_native_GetTotalLambdaMotor((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HingeConstraint* nativeObject = (HingeConstraint*)this_addr;
return nativeObject->GetTotalLambdaMotor();
*/
    private static native float internal_native_GetTotalLambdaMotor(long this_addr);

    public static float native_GetCurrentAngle(long this_addr) {
        return internal_native_GetCurrentAngle(this_addr);
    }

    public static void native_SetMaxFrictionTorque(long this_addr, float inFrictionTorque) {
        internal_native_SetMaxFrictionTorque(this_addr, inFrictionTorque);
    }

    public static float native_GetMaxFrictionTorque(long this_addr) {
        return internal_native_GetMaxFrictionTorque(this_addr);
    }

    public static long native_GetMotorSettings(long this_addr) {
        return internal_native_GetMotorSettings(this_addr);
    }

    public static void native_SetMotorState(long this_addr, long inState) {
        internal_native_SetMotorState(this_addr, inState);
    }

    public static long native_GetMotorState(long this_addr) {
        return internal_native_GetMotorState(this_addr);
    }

    public static void native_SetTargetAngularVelocity(long this_addr, float inAngularVelocity) {
        internal_native_SetTargetAngularVelocity(this_addr, inAngularVelocity);
    }

    public static float native_GetTargetAngularVelocity(long this_addr) {
        return internal_native_GetTargetAngularVelocity(this_addr);
    }

    public static void native_SetTargetAngle(long this_addr, float inAngle) {
        internal_native_SetTargetAngle(this_addr, inAngle);
    }

    public static float native_GetTargetAngle(long this_addr) {
        return internal_native_GetTargetAngle(this_addr);
    }

    public static void native_SetLimits(long this_addr, float inLimitsMin, float inLimitsMax) {
        internal_native_SetLimits(this_addr, inLimitsMin, inLimitsMax);
    }

    public static float native_GetLimitsMin(long this_addr) {
        return internal_native_GetLimitsMin(this_addr);
    }

    public static float native_GetLimitsMax(long this_addr) {
        return internal_native_GetLimitsMax(this_addr);
    }

    public static boolean native_HasLimits(long this_addr) {
        return internal_native_HasLimits(this_addr);
    }

    public static long native_GetLimitsSpringSettings(long this_addr) {
        return internal_native_GetLimitsSpringSettings(this_addr);
    }

    public static void native_SetLimitsSpringSettings(long this_addr, long inLimitsSpringSettings_addr) {
        internal_native_SetLimitsSpringSettings(this_addr, inLimitsSpringSettings_addr);
    }

    public static long native_GetTotalLambdaPosition(long this_addr) {
        return internal_native_GetTotalLambdaPosition(this_addr);
    }

    public static long native_GetTotalLambdaRotation(long this_addr) {
        return internal_native_GetTotalLambdaRotation(this_addr);
    }

    public static float native_GetTotalLambdaRotationLimits(long this_addr) {
        return internal_native_GetTotalLambdaRotationLimits(this_addr);
    }

    public static float native_GetTotalLambdaMotor(long this_addr) {
        return internal_native_GetTotalLambdaMotor(this_addr);
    }
}
