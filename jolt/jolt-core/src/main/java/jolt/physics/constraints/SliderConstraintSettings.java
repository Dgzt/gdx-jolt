/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.math.Vec3;
import jolt.SpringSettings;
import jolt.MotorSettings;

public class SliderConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private SpringSettings SpringSettings_TEMP_GEN_0;

    private MotorSettings MotorSettings_TEMP_GEN_0;

    static public final SliderConstraintSettings T_01 = new SliderConstraintSettings((byte) 1, (char) 1);

    static public final SliderConstraintSettings T_02 = new SliderConstraintSettings((byte) 1, (char) 1);

    static public final SliderConstraintSettings T_03 = new SliderConstraintSettings((byte) 1, (char) 1);

    public SliderConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SliderConstraintSettings();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SliderConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public int get_mSpace() {
        return internal_native_get_mSpace((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    private static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(int mSpace) {
        internal_native_set_mSpace((long) getNativeData().getCPointer(), mSpace);
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    private static native void internal_native_set_mSpace(long this_addr, int mSpace);

    public boolean get_mAutoDetectPoint() {
        return internal_native_get_mAutoDetectPoint((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return nativeObject->mAutoDetectPoint;
*/
    private static native boolean internal_native_get_mAutoDetectPoint(long this_addr);

    public void set_mAutoDetectPoint(boolean mAutoDetectPoint) {
        internal_native_set_mAutoDetectPoint((long) getNativeData().getCPointer(), mAutoDetectPoint);
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mAutoDetectPoint = mAutoDetectPoint;
*/
    private static native void internal_native_set_mAutoDetectPoint(long this_addr, boolean mAutoDetectPoint);

    public Vec3 get_mPoint1() {
        long pointer = internal_native_get_mPoint1((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint1;
*/
    private static native long internal_native_get_mPoint1(long this_addr);

    public void set_mPoint1(Vec3 mPoint1) {
        internal_native_set_mPoint1((long) getNativeData().getCPointer(), (long) (mPoint1 != null ? mPoint1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mPoint1 = *((Vec3*)mPoint1_addr);
*/
    private static native void internal_native_set_mPoint1(long this_addr, long mPoint1_addr);

    public Vec3 get_mSliderAxis1() {
        long pointer = internal_native_get_mSliderAxis1((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mSliderAxis1;
*/
    private static native long internal_native_get_mSliderAxis1(long this_addr);

    public void set_mSliderAxis1(Vec3 mSliderAxis1) {
        internal_native_set_mSliderAxis1((long) getNativeData().getCPointer(), (long) (mSliderAxis1 != null ? mSliderAxis1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mSliderAxis1 = *((Vec3*)mSliderAxis1_addr);
*/
    private static native void internal_native_set_mSliderAxis1(long this_addr, long mSliderAxis1_addr);

    public Vec3 get_mNormalAxis1() {
        long pointer = internal_native_get_mNormalAxis1((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mNormalAxis1;
*/
    private static native long internal_native_get_mNormalAxis1(long this_addr);

    public void set_mNormalAxis1(Vec3 mNormalAxis1) {
        internal_native_set_mNormalAxis1((long) getNativeData().getCPointer(), (long) (mNormalAxis1 != null ? mNormalAxis1.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mNormalAxis1 = *((Vec3*)mNormalAxis1_addr);
*/
    private static native void internal_native_set_mNormalAxis1(long this_addr, long mNormalAxis1_addr);

    public Vec3 get_mPoint2() {
        long pointer = internal_native_get_mPoint2((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint2;
*/
    private static native long internal_native_get_mPoint2(long this_addr);

    public void set_mPoint2(Vec3 mPoint2) {
        internal_native_set_mPoint2((long) getNativeData().getCPointer(), (long) (mPoint2 != null ? mPoint2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mPoint2 = *((Vec3*)mPoint2_addr);
*/
    private static native void internal_native_set_mPoint2(long this_addr, long mPoint2_addr);

    public Vec3 get_mSliderAxis2() {
        long pointer = internal_native_get_mSliderAxis2((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mSliderAxis2;
*/
    private static native long internal_native_get_mSliderAxis2(long this_addr);

    public void set_mSliderAxis2(Vec3 mSliderAxis2) {
        internal_native_set_mSliderAxis2((long) getNativeData().getCPointer(), (long) (mSliderAxis2 != null ? mSliderAxis2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mSliderAxis2 = *((Vec3*)mSliderAxis2_addr);
*/
    private static native void internal_native_set_mSliderAxis2(long this_addr, long mSliderAxis2_addr);

    public Vec3 get_mNormalAxis2() {
        long pointer = internal_native_get_mNormalAxis2((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mNormalAxis2;
*/
    private static native long internal_native_get_mNormalAxis2(long this_addr);

    public void set_mNormalAxis2(Vec3 mNormalAxis2) {
        internal_native_set_mNormalAxis2((long) getNativeData().getCPointer(), (long) (mNormalAxis2 != null ? mNormalAxis2.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mNormalAxis2 = *((Vec3*)mNormalAxis2_addr);
*/
    private static native void internal_native_set_mNormalAxis2(long this_addr, long mNormalAxis2_addr);

    public float get_mLimitsMin() {
        return internal_native_get_mLimitsMin((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return nativeObject->mLimitsMin;
*/
    private static native float internal_native_get_mLimitsMin(long this_addr);

    public void set_mLimitsMin(float mLimitsMin) {
        internal_native_set_mLimitsMin((long) getNativeData().getCPointer(), mLimitsMin);
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mLimitsMin = mLimitsMin;
*/
    private static native void internal_native_set_mLimitsMin(long this_addr, float mLimitsMin);

    public float get_mLimitsMax() {
        return internal_native_get_mLimitsMax((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return nativeObject->mLimitsMax;
*/
    private static native float internal_native_get_mLimitsMax(long this_addr);

    public void set_mLimitsMax(float mLimitsMax) {
        internal_native_set_mLimitsMax((long) getNativeData().getCPointer(), mLimitsMax);
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mLimitsMax = mLimitsMax;
*/
    private static native void internal_native_set_mLimitsMax(long this_addr, float mLimitsMax);

    public SpringSettings get_mLimitsSpringSettings() {
        long pointer = internal_native_get_mLimitsSpringSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SpringSettings_TEMP_GEN_0 == null)
            SpringSettings_TEMP_GEN_0 = new SpringSettings((byte) 1, (char) 1);
        SpringSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SpringSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mLimitsSpringSettings;
*/
    private static native long internal_native_get_mLimitsSpringSettings(long this_addr);

    public void set_mLimitsSpringSettings(SpringSettings mLimitsSpringSettings) {
        internal_native_set_mLimitsSpringSettings((long) getNativeData().getCPointer(), (long) (mLimitsSpringSettings != null ? mLimitsSpringSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mLimitsSpringSettings = *((SpringSettings*)mLimitsSpringSettings_addr);
*/
    private static native void internal_native_set_mLimitsSpringSettings(long this_addr, long mLimitsSpringSettings_addr);

    public float get_mMaxFrictionForce() {
        return internal_native_get_mMaxFrictionForce((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return nativeObject->mMaxFrictionForce;
*/
    private static native float internal_native_get_mMaxFrictionForce(long this_addr);

    public void set_mMaxFrictionForce(float mMaxFrictionForce) {
        internal_native_set_mMaxFrictionForce((long) getNativeData().getCPointer(), mMaxFrictionForce);
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mMaxFrictionForce = mMaxFrictionForce;
*/
    private static native void internal_native_set_mMaxFrictionForce(long this_addr, float mMaxFrictionForce);

    public MotorSettings get_mMotorSettings() {
        long pointer = internal_native_get_mMotorSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (MotorSettings_TEMP_GEN_0 == null)
            MotorSettings_TEMP_GEN_0 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return MotorSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
return (jlong)&nativeObject->mMotorSettings;
*/
    private static native long internal_native_get_mMotorSettings(long this_addr);

    public void set_mMotorSettings(MotorSettings mMotorSettings) {
        internal_native_set_mMotorSettings((long) getNativeData().getCPointer(), (long) (mMotorSettings != null ? mMotorSettings.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraintSettings* nativeObject = (SliderConstraintSettings*)this_addr;
nativeObject->mMotorSettings = *((MotorSettings*)mMotorSettings_addr);
*/
    private static native void internal_native_set_mMotorSettings(long this_addr, long mMotorSettings_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static int native_get_mSpace(long this_addr) {
        return internal_native_get_mSpace(this_addr);
    }

    public static void native_set_mSpace(long this_addr, int mSpace) {
        internal_native_set_mSpace(this_addr, mSpace);
    }

    public static boolean native_get_mAutoDetectPoint(long this_addr) {
        return internal_native_get_mAutoDetectPoint(this_addr);
    }

    public static void native_set_mAutoDetectPoint(long this_addr, boolean mAutoDetectPoint) {
        internal_native_set_mAutoDetectPoint(this_addr, mAutoDetectPoint);
    }

    public static long native_get_mPoint1(long this_addr) {
        return internal_native_get_mPoint1(this_addr);
    }

    public static void native_set_mPoint1(long this_addr, long mPoint1_addr) {
        internal_native_set_mPoint1(this_addr, mPoint1_addr);
    }

    public static long native_get_mSliderAxis1(long this_addr) {
        return internal_native_get_mSliderAxis1(this_addr);
    }

    public static void native_set_mSliderAxis1(long this_addr, long mSliderAxis1_addr) {
        internal_native_set_mSliderAxis1(this_addr, mSliderAxis1_addr);
    }

    public static long native_get_mNormalAxis1(long this_addr) {
        return internal_native_get_mNormalAxis1(this_addr);
    }

    public static void native_set_mNormalAxis1(long this_addr, long mNormalAxis1_addr) {
        internal_native_set_mNormalAxis1(this_addr, mNormalAxis1_addr);
    }

    public static long native_get_mPoint2(long this_addr) {
        return internal_native_get_mPoint2(this_addr);
    }

    public static void native_set_mPoint2(long this_addr, long mPoint2_addr) {
        internal_native_set_mPoint2(this_addr, mPoint2_addr);
    }

    public static long native_get_mSliderAxis2(long this_addr) {
        return internal_native_get_mSliderAxis2(this_addr);
    }

    public static void native_set_mSliderAxis2(long this_addr, long mSliderAxis2_addr) {
        internal_native_set_mSliderAxis2(this_addr, mSliderAxis2_addr);
    }

    public static long native_get_mNormalAxis2(long this_addr) {
        return internal_native_get_mNormalAxis2(this_addr);
    }

    public static void native_set_mNormalAxis2(long this_addr, long mNormalAxis2_addr) {
        internal_native_set_mNormalAxis2(this_addr, mNormalAxis2_addr);
    }

    public static float native_get_mLimitsMin(long this_addr) {
        return internal_native_get_mLimitsMin(this_addr);
    }

    public static void native_set_mLimitsMin(long this_addr, float mLimitsMin) {
        internal_native_set_mLimitsMin(this_addr, mLimitsMin);
    }

    public static float native_get_mLimitsMax(long this_addr) {
        return internal_native_get_mLimitsMax(this_addr);
    }

    public static void native_set_mLimitsMax(long this_addr, float mLimitsMax) {
        internal_native_set_mLimitsMax(this_addr, mLimitsMax);
    }

    public static long native_get_mLimitsSpringSettings(long this_addr) {
        return internal_native_get_mLimitsSpringSettings(this_addr);
    }

    public static void native_set_mLimitsSpringSettings(long this_addr, long mLimitsSpringSettings_addr) {
        internal_native_set_mLimitsSpringSettings(this_addr, mLimitsSpringSettings_addr);
    }

    public static float native_get_mMaxFrictionForce(long this_addr) {
        return internal_native_get_mMaxFrictionForce(this_addr);
    }

    public static void native_set_mMaxFrictionForce(long this_addr, float mMaxFrictionForce) {
        internal_native_set_mMaxFrictionForce(this_addr, mMaxFrictionForce);
    }

    public static long native_get_mMotorSettings(long this_addr) {
        return internal_native_get_mMotorSettings(this_addr);
    }

    public static void native_set_mMotorSettings(long this_addr, long mMotorSettings_addr) {
        internal_native_set_mMotorSettings(this_addr, mMotorSettings_addr);
    }
}
