/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.raddoll;

import jolt.idl.IDLBase;
import jolt.math.TwoBodyConstraintSettings;

public class RagdollAdditionalConstraint extends IDLBase {

    private TwoBodyConstraintSettings TwoBodyConstraintSettings_TEMP_GEN_0;

    static public final RagdollAdditionalConstraint T_01 = new RagdollAdditionalConstraint((byte) 1, (char) 1);

    static public final RagdollAdditionalConstraint T_02 = new RagdollAdditionalConstraint((byte) 1, (char) 1);

    static public final RagdollAdditionalConstraint T_03 = new RagdollAdditionalConstraint((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RagdollAdditionalConstraint(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RagdollAdditionalConstraint* nativeObject = (RagdollAdditionalConstraint*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public int get_mBodyIdx(int index) {
        return internal_native_get_mBodyIdx((long) getNativeData().getCPointer(), index);
    }

    /*[-JNI;-NATIVE]
RagdollAdditionalConstraint* nativeObject = (RagdollAdditionalConstraint*)this_addr;
return nativeObject->mBodyIdx[index];
*/
    private static native int internal_native_get_mBodyIdx(long this_addr, int index);

    public void set_mBodyIdx(int index, int mBodyIdx) {
        internal_native_set_mBodyIdx((long) getNativeData().getCPointer(), index, mBodyIdx);
    }

    /*[-JNI;-NATIVE]
RagdollAdditionalConstraint* nativeObject = (RagdollAdditionalConstraint*)this_addr;
nativeObject->mBodyIdx[index] = mBodyIdx;
*/
    private static native void internal_native_set_mBodyIdx(long this_addr, int index, int mBodyIdx);

    public TwoBodyConstraintSettings get_mConstraint() {
        long pointer = internal_native_get_mConstraint((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (TwoBodyConstraintSettings_TEMP_GEN_0 == null)
            TwoBodyConstraintSettings_TEMP_GEN_0 = new TwoBodyConstraintSettings((byte) 1, (char) 1);
        TwoBodyConstraintSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return TwoBodyConstraintSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RagdollAdditionalConstraint* nativeObject = (RagdollAdditionalConstraint*)this_addr;
TwoBodyConstraintSettings* attr = nativeObject->mConstraint;
return (jlong)attr;
*/
    private static native long internal_native_get_mConstraint(long this_addr);

    public void set_mConstraint(TwoBodyConstraintSettings mConstraint) {
        internal_native_set_mConstraint((long) getNativeData().getCPointer(), (long) (mConstraint != null ? mConstraint.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RagdollAdditionalConstraint* nativeObject = (RagdollAdditionalConstraint*)this_addr;
nativeObject->mConstraint = (TwoBodyConstraintSettings*)mConstraint_addr;
*/
    private static native void internal_native_set_mConstraint(long this_addr, long mConstraint_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static int native_get_mBodyIdx(long this_addr, int index) {
        return internal_native_get_mBodyIdx(this_addr, index);
    }

    public static void native_set_mBodyIdx(long this_addr, int index, int mBodyIdx) {
        internal_native_set_mBodyIdx(this_addr, index, mBodyIdx);
    }

    public static long native_get_mConstraint(long this_addr) {
        return internal_native_get_mConstraint(this_addr);
    }

    public static void native_set_mConstraint(long this_addr, long mConstraint_addr) {
        internal_native_set_mConstraint(this_addr, mConstraint_addr);
    }
}
