/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.raddoll;

import jolt.idl.IDLBase;
import jolt.physics.PhysicsSystem;
import jolt.physics.ragdoll.Ragdoll;
import jolt.skeleton.Skeleton;
import jolt.math.Mat44MemRef;

public class RagdollSettings extends IDLBase {

    private Ragdoll Ragdoll_TEMP_GEN_0;

    private Skeleton Skeleton_TEMP_GEN_0;

    private ArrayRagdollPart ArrayRagdollPart_TEMP_GEN_0;

    private ArrayRagdollAdditionalConstraint ArrayRagdollAdditionalConstraint_TEMP_GEN_0;

    static public final RagdollSettings T_01 = new RagdollSettings((byte) 1, (char) 1);

    static public final RagdollSettings T_02 = new RagdollSettings((byte) 1, (char) 1);

    static public final RagdollSettings T_03 = new RagdollSettings((byte) 1, (char) 1);

    public RagdollSettings() {
        long addr = internal_native_create();
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RagdollSettings();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RagdollSettings(byte b, char c) {
    }

    public boolean Stabilize() {
        return internal_native_Stabilize((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
return nativeObject->Stabilize();
*/
    private static native boolean internal_native_Stabilize(long this_addr);

    public Ragdoll CreateRagdoll(int inCollisionGroup, int inUserData, PhysicsSystem inSystem) {
        long pointer = internal_native_CreateRagdoll((long) getNativeData().getCPointer(), inCollisionGroup, inUserData, (long) (inSystem != null ? inSystem.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Ragdoll_TEMP_GEN_0 == null)
            Ragdoll_TEMP_GEN_0 = new Ragdoll((byte) 1, (char) 1);
        Ragdoll_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Ragdoll_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
Ragdoll* obj = nativeObject->CreateRagdoll((int)inCollisionGroup, (int)inUserData, (PhysicsSystem* )inSystem_addr);
return (jlong)obj;
*/
    private static native long internal_native_CreateRagdoll(long this_addr, int inCollisionGroup, int inUserData, long inSystem_addr);

    public Skeleton GetSkeleton() {
        long pointer = internal_native_GetSkeleton((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Skeleton_TEMP_GEN_0 == null)
            Skeleton_TEMP_GEN_0 = new Skeleton((byte) 1, (char) 1);
        Skeleton_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Skeleton_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
Skeleton* obj = nativeObject->GetSkeleton();
return (jlong)obj;
*/
    private static native long internal_native_GetSkeleton(long this_addr);

    public void DisableParentChildCollisions(Mat44MemRef inJointMatrices, float inMinSeparationDistance) {
        internal_native_DisableParentChildCollisions((long) getNativeData().getCPointer(), (long) (inJointMatrices != null ? inJointMatrices.getNativeData().getCPointer() : 0), inMinSeparationDistance);
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->DisableParentChildCollisions((Mat44MemRef* )inJointMatrices_addr, (float)inMinSeparationDistance);
*/
    private static native void internal_native_DisableParentChildCollisions(long this_addr, long inJointMatrices_addr, float inMinSeparationDistance);

    public void DisableParentChildCollisions(Mat44MemRef inJointMatrices) {
        internal_native_DisableParentChildCollisions((long) getNativeData().getCPointer(), (long) (inJointMatrices != null ? inJointMatrices.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->DisableParentChildCollisions((Mat44MemRef* )inJointMatrices_addr);
*/
    private static native void internal_native_DisableParentChildCollisions(long this_addr, long inJointMatrices_addr);

    public void DisableParentChildCollisions() {
        internal_native_DisableParentChildCollisions((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->DisableParentChildCollisions();
*/
    private static native void internal_native_DisableParentChildCollisions(long this_addr);

    public void CalculateBodyIndexToConstraintIndex() {
        internal_native_CalculateBodyIndexToConstraintIndex((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->CalculateBodyIndexToConstraintIndex();
*/
    private static native void internal_native_CalculateBodyIndexToConstraintIndex(long this_addr);

    public void CalculateConstraintIndexToBodyIdxPair() {
        internal_native_CalculateConstraintIndexToBodyIdxPair((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->CalculateConstraintIndexToBodyIdxPair();
*/
    private static native void internal_native_CalculateConstraintIndexToBodyIdxPair(long this_addr);

    public ArrayRagdollPart get_mParts() {
        long pointer = internal_native_get_mParts((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArrayRagdollPart_TEMP_GEN_0 == null)
            ArrayRagdollPart_TEMP_GEN_0 = new ArrayRagdollPart((byte) 1, (char) 1);
        ArrayRagdollPart_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArrayRagdollPart_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
return (jlong)&nativeObject->mParts;
*/
    private static native long internal_native_get_mParts(long this_addr);

    public void set_mParts(ArrayRagdollPart mParts) {
        internal_native_set_mParts((long) getNativeData().getCPointer(), (long) (mParts != null ? mParts.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->mParts = *((ArrayRagdollPart*)mParts_addr);
*/
    private static native void internal_native_set_mParts(long this_addr, long mParts_addr);

    public ArrayRagdollAdditionalConstraint get_mAdditionalConstraints() {
        long pointer = internal_native_get_mAdditionalConstraints((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArrayRagdollAdditionalConstraint_TEMP_GEN_0 == null)
            ArrayRagdollAdditionalConstraint_TEMP_GEN_0 = new ArrayRagdollAdditionalConstraint((byte) 1, (char) 1);
        ArrayRagdollAdditionalConstraint_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArrayRagdollAdditionalConstraint_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
return (jlong)&nativeObject->mAdditionalConstraints;
*/
    private static native long internal_native_get_mAdditionalConstraints(long this_addr);

    public void set_mAdditionalConstraints(ArrayRagdollAdditionalConstraint mAdditionalConstraints) {
        internal_native_set_mAdditionalConstraints((long) getNativeData().getCPointer(), (long) (mAdditionalConstraints != null ? mAdditionalConstraints.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RagdollSettings* nativeObject = (RagdollSettings*)this_addr;
nativeObject->mAdditionalConstraints = *((ArrayRagdollAdditionalConstraint*)mAdditionalConstraints_addr);
*/
    private static native void internal_native_set_mAdditionalConstraints(long this_addr, long mAdditionalConstraints_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static boolean native_Stabilize(long this_addr) {
        return internal_native_Stabilize(this_addr);
    }

    public static long native_CreateRagdoll(long this_addr, int inCollisionGroup, int inUserData, long inSystem_addr) {
        return internal_native_CreateRagdoll(this_addr, inCollisionGroup, inUserData, inSystem_addr);
    }

    public static long native_GetSkeleton(long this_addr) {
        return internal_native_GetSkeleton(this_addr);
    }

    public static void native_DisableParentChildCollisions(long this_addr, long inJointMatrices_addr, float inMinSeparationDistance) {
        internal_native_DisableParentChildCollisions(this_addr, inJointMatrices_addr, inMinSeparationDistance);
    }

    public static void native_DisableParentChildCollisions(long this_addr, long inJointMatrices_addr) {
        internal_native_DisableParentChildCollisions(this_addr, inJointMatrices_addr);
    }

    public static void native_DisableParentChildCollisions(long this_addr) {
        internal_native_DisableParentChildCollisions(this_addr);
    }

    public static void native_CalculateBodyIndexToConstraintIndex(long this_addr) {
        internal_native_CalculateBodyIndexToConstraintIndex(this_addr);
    }

    public static void native_CalculateConstraintIndexToBodyIdxPair(long this_addr) {
        internal_native_CalculateConstraintIndexToBodyIdxPair(this_addr);
    }

    public static long native_get_mParts(long this_addr) {
        return internal_native_get_mParts(this_addr);
    }

    public static void native_set_mParts(long this_addr, long mParts_addr) {
        internal_native_set_mParts(this_addr, mParts_addr);
    }

    public static long native_get_mAdditionalConstraints(long this_addr) {
        return internal_native_get_mAdditionalConstraints(this_addr);
    }

    public static void native_set_mAdditionalConstraints(long this_addr, long mAdditionalConstraints_addr) {
        internal_native_set_mAdditionalConstraints(this_addr, mAdditionalConstraints_addr);
    }
}
