/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.TransformedShape;
import jolt.Body;
import jolt.physics.collision.shape.ShapeCastResult;

public class CastShapeCollector extends IDLBase {

    private TransformedShape TransformedShape_TEMP_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_0;

    static private ShapeCastResult ShapeCastResult_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class CastShapeCollectorJS : public CastShapeCollector {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID Reset_ID = 0;
	inline static jmethodID OnBodyJ_ID = 0;
	inline static jmethodID AddHitJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(CastShapeCollectorJS::jClassID == 0) {
		CastShapeCollectorJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		CastShapeCollectorJS::Reset_ID = env->GetMethodID(jClassID, "internal_Reset", "()V");
		CastShapeCollectorJS::OnBodyJ_ID = env->GetMethodID(jClassID, "internal_OnBody", "(J)V");
		CastShapeCollectorJS::AddHitJ_ID = env->GetMethodID(jClassID, "internal_AddHit", "(J)V");
	}
}
virtual void Reset() {
   env->CallVoidMethod(obj, CastShapeCollectorJS::Reset_ID);
}
virtual void OnBody(const Body& inBody) {
   env->CallVoidMethod(obj, CastShapeCollectorJS::OnBodyJ_ID, (jlong)&inBody);
}
virtual void AddHit(const ShapeCastResult& inResult) {
   env->CallVoidMethod(obj, CastShapeCollectorJS::AddHitJ_ID, (jlong)&inResult);
}
};
*/
    @Deprecated()
    public CastShapeCollector(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeCollectorJS* nativeObject = (CastShapeCollectorJS*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public void SetContext(TransformedShape inContext) {
        internal_native_SetContext((long) getNativeData().getCPointer(), (long) (inContext != null ? inContext.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
nativeObject->SetContext((TransformedShape* )inContext_addr);
*/
    private static native void internal_native_SetContext(long this_addr, long inContext_addr);

    public TransformedShape GetContext() {
        long pointer = internal_native_GetContext((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (TransformedShape_TEMP_GEN_0 == null)
            TransformedShape_TEMP_GEN_0 = new TransformedShape((byte) 1, (char) 1);
        TransformedShape_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return TransformedShape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
const TransformedShape* obj = nativeObject->GetContext();
return (jlong)obj;
*/
    private static native long internal_native_GetContext(long this_addr);

    public void UpdateEarlyOutFraction(float inFraction) {
        internal_native_UpdateEarlyOutFraction((long) getNativeData().getCPointer(), inFraction);
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
nativeObject->UpdateEarlyOutFraction((float)inFraction);
*/
    private static native void internal_native_UpdateEarlyOutFraction(long this_addr, float inFraction);

    public void ResetEarlyOutFraction(float inFraction) {
        internal_native_ResetEarlyOutFraction((long) getNativeData().getCPointer(), inFraction);
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
nativeObject->ResetEarlyOutFraction((float)inFraction);
*/
    private static native void internal_native_ResetEarlyOutFraction(long this_addr, float inFraction);

    public void ResetEarlyOutFraction() {
        internal_native_ResetEarlyOutFraction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
nativeObject->ResetEarlyOutFraction();
*/
    private static native void internal_native_ResetEarlyOutFraction(long this_addr);

    public void ForceEarlyOut() {
        internal_native_ForceEarlyOut((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
nativeObject->ForceEarlyOut();
*/
    private static native void internal_native_ForceEarlyOut(long this_addr);

    public boolean ShouldEarlyOut() {
        return internal_native_ShouldEarlyOut((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
return nativeObject->ShouldEarlyOut();
*/
    private static native boolean internal_native_ShouldEarlyOut(long this_addr);

    public float GetEarlyOutFraction() {
        return internal_native_GetEarlyOutFraction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
return nativeObject->GetEarlyOutFraction();
*/
    private static native float internal_native_GetEarlyOutFraction(long this_addr);

    public float GetPositiveEarlyOutFraction() {
        return internal_native_GetPositiveEarlyOutFraction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeCollector* nativeObject = (CastShapeCollector*)this_addr;
return nativeObject->GetPositiveEarlyOutFraction();
*/
    private static native float internal_native_GetPositiveEarlyOutFraction(long this_addr);

    public CastShapeCollector() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(getNativeData().getCPointer());
    }

    protected void Reset() {
    }

    private void internal_Reset() {
        Reset();
    }

    protected void OnBody(Body inBody) {
    }

    private void internal_OnBody(long inBody) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.getNativeData().reset(inBody, false);
        OnBody(Body_TEMP_STATIC_GEN_0);
    }

    protected void AddHit(ShapeCastResult inResult) {
    }

    private void internal_AddHit(long inResult) {
        if (ShapeCastResult_TEMP_STATIC_GEN_0 == null)
            ShapeCastResult_TEMP_STATIC_GEN_0 = new ShapeCastResult((byte) 1, (char) 1);
        ShapeCastResult_TEMP_STATIC_GEN_0.getNativeData().reset(inResult, false);
        AddHit(ShapeCastResult_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new CastShapeCollectorJS();
*/
    private static native long internal_native_create();

    /*[-JNI;-NATIVE]
CastShapeCollectorJS* nativeObject = (CastShapeCollectorJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    private native void internal_native_setupCallback(long this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static void native_SetContext(long this_addr, long inContext_addr) {
        internal_native_SetContext(this_addr, inContext_addr);
    }

    public static long native_GetContext(long this_addr) {
        return internal_native_GetContext(this_addr);
    }

    public static void native_UpdateEarlyOutFraction(long this_addr, float inFraction) {
        internal_native_UpdateEarlyOutFraction(this_addr, inFraction);
    }

    public static void native_ResetEarlyOutFraction(long this_addr, float inFraction) {
        internal_native_ResetEarlyOutFraction(this_addr, inFraction);
    }

    public static void native_ResetEarlyOutFraction(long this_addr) {
        internal_native_ResetEarlyOutFraction(this_addr);
    }

    public static void native_ForceEarlyOut(long this_addr) {
        internal_native_ForceEarlyOut(this_addr);
    }

    public static boolean native_ShouldEarlyOut(long this_addr) {
        return internal_native_ShouldEarlyOut(this_addr);
    }

    public static float native_GetEarlyOutFraction(long this_addr) {
        return internal_native_GetEarlyOutFraction(this_addr);
    }

    public static float native_GetPositiveEarlyOutFraction(long this_addr) {
        return internal_native_GetPositiveEarlyOutFraction(this_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
