/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.physics.body.BodyID;

public class SoftBodyManifold extends IDLBase {

    private ArraySoftBodyVertex ArraySoftBodyVertex_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private BodyID BodyID_TEMP_GEN_0;

    static public final SoftBodyManifold T_01 = new SoftBodyManifold((byte) 1, (char) 1);

    static public final SoftBodyManifold T_02 = new SoftBodyManifold((byte) 1, (char) 1);

    static public final SoftBodyManifold T_03 = new SoftBodyManifold((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodyManifold(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyManifold* nativeObject = (SoftBodyManifold*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public ArraySoftBodyVertex GetVertices() {
        long pointer = internal_native_GetVertices((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (ArraySoftBodyVertex_TEMP_GEN_0 == null)
            ArraySoftBodyVertex_TEMP_GEN_0 = new ArraySoftBodyVertex((byte) 1, (char) 1);
        ArraySoftBodyVertex_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodyVertex_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyManifold* nativeObject = (SoftBodyManifold*)this_addr;
return (jlong)&nativeObject->GetVertices();
*/
    private static native long internal_native_GetVertices(long this_addr);

    public boolean HasContact(SoftBodyVertex inVertex) {
        return internal_native_HasContact((long) getNativeData().getCPointer(), (long) (inVertex != null ? inVertex.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyManifold* nativeObject = (SoftBodyManifold*)this_addr;
return nativeObject->HasContact(*((SoftBodyVertex* )inVertex_addr));
*/
    private static native boolean internal_native_HasContact(long this_addr, long inVertex_addr);

    public Vec3 GetLocalContactPoint(SoftBodyVertex inVertex) {
        long pointer = internal_native_GetLocalContactPoint((long) getNativeData().getCPointer(), (long) (inVertex != null ? inVertex.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyManifold* nativeObject = (SoftBodyManifold*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLocalContactPoint(*((SoftBodyVertex* )inVertex_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_GetLocalContactPoint(long this_addr, long inVertex_addr);

    public Vec3 GetContactNormal(SoftBodyVertex inVertex) {
        long pointer = internal_native_GetContactNormal((long) getNativeData().getCPointer(), (long) (inVertex != null ? inVertex.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SoftBodyManifold* nativeObject = (SoftBodyManifold*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetContactNormal(*((SoftBodyVertex* )inVertex_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactNormal(long this_addr, long inVertex_addr);

    public BodyID GetContactBodyID(SoftBodyVertex inVertex) {
        long pointer = internal_native_GetContactBodyID((long) getNativeData().getCPointer(), (long) (inVertex != null ? inVertex.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyManifold* nativeObject = (SoftBodyManifold*)this_addr;
static BodyID copy_addr;
copy_addr = nativeObject->GetContactBodyID(*((SoftBodyVertex* )inVertex_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactBodyID(long this_addr, long inVertex_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_GetVertices(long this_addr) {
        return internal_native_GetVertices(this_addr);
    }

    public static boolean native_HasContact(long this_addr, long inVertex_addr) {
        return internal_native_HasContact(this_addr, inVertex_addr);
    }

    public static long native_GetLocalContactPoint(long this_addr, long inVertex_addr) {
        return internal_native_GetLocalContactPoint(this_addr, inVertex_addr);
    }

    public static long native_GetContactNormal(long this_addr, long inVertex_addr) {
        return internal_native_GetContactNormal(this_addr, inVertex_addr);
    }

    public static long native_GetContactBodyID(long this_addr, long inVertex_addr) {
        return internal_native_GetContactBodyID(this_addr, inVertex_addr);
    }
}
