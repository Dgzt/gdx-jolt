/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;

public class SoftBodySharedSettingsSkinned extends IDLBase {

    private SoftBodySharedSettingsSkinWeight SoftBodySharedSettingsSkinWeight_TEMP_GEN_0;

    static public final SoftBodySharedSettingsSkinned T_01 = new SoftBodySharedSettingsSkinned((byte) 1, (char) 1);

    static public final SoftBodySharedSettingsSkinned T_02 = new SoftBodySharedSettingsSkinned((byte) 1, (char) 1);

    static public final SoftBodySharedSettingsSkinned T_03 = new SoftBodySharedSettingsSkinned((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodySharedSettingsSkinned(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public int get_mVertex() {
        return internal_native_get_mVertex((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
return nativeObject->mVertex;
*/
    private static native int internal_native_get_mVertex(long this_addr);

    public void set_mVertex(int mVertex) {
        internal_native_set_mVertex((long) getNativeData().getCPointer(), mVertex);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
nativeObject->mVertex = mVertex;
*/
    private static native void internal_native_set_mVertex(long this_addr, int mVertex);

    public SoftBodySharedSettingsSkinWeight get_mWeights(int index) {
        long pointer = internal_native_get_mWeights((long) getNativeData().getCPointer(), index);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SoftBodySharedSettingsSkinWeight_TEMP_GEN_0 == null)
            SoftBodySharedSettingsSkinWeight_TEMP_GEN_0 = new SoftBodySharedSettingsSkinWeight((byte) 1, (char) 1);
        SoftBodySharedSettingsSkinWeight_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SoftBodySharedSettingsSkinWeight_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
return (jlong)&nativeObject->mWeights[index];
*/
    private static native long internal_native_get_mWeights(long this_addr, int index);

    public void set_mWeights(int index, SoftBodySharedSettingsSkinWeight mWeights) {
        internal_native_set_mWeights((long) getNativeData().getCPointer(), index, (long) (mWeights != null ? mWeights.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
nativeObject->mWeights[index] = *((SoftBodySharedSettingsSkinWeight*)mWeights_addr);
*/
    private static native void internal_native_set_mWeights(long this_addr, int index, long mWeights_addr);

    public float get_mMaxDistance() {
        return internal_native_get_mMaxDistance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
return nativeObject->mMaxDistance;
*/
    private static native float internal_native_get_mMaxDistance(long this_addr);

    public void set_mMaxDistance(float mMaxDistance) {
        internal_native_set_mMaxDistance((long) getNativeData().getCPointer(), mMaxDistance);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
nativeObject->mMaxDistance = mMaxDistance;
*/
    private static native void internal_native_set_mMaxDistance(long this_addr, float mMaxDistance);

    public float get_mBackStopDistance() {
        return internal_native_get_mBackStopDistance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
return nativeObject->mBackStopDistance;
*/
    private static native float internal_native_get_mBackStopDistance(long this_addr);

    public void set_mBackStopDistance(float mBackStopDistance) {
        internal_native_set_mBackStopDistance((long) getNativeData().getCPointer(), mBackStopDistance);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
nativeObject->mBackStopDistance = mBackStopDistance;
*/
    private static native void internal_native_set_mBackStopDistance(long this_addr, float mBackStopDistance);

    public float get_mBackStopRadius() {
        return internal_native_get_mBackStopRadius((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
return nativeObject->mBackStopRadius;
*/
    private static native float internal_native_get_mBackStopRadius(long this_addr);

    public void set_mBackStopRadius(float mBackStopRadius) {
        internal_native_set_mBackStopRadius((long) getNativeData().getCPointer(), mBackStopRadius);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsSkinned* nativeObject = (SoftBodySharedSettingsSkinned*)this_addr;
nativeObject->mBackStopRadius = mBackStopRadius;
*/
    private static native void internal_native_set_mBackStopRadius(long this_addr, float mBackStopRadius);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static int native_get_mVertex(long this_addr) {
        return internal_native_get_mVertex(this_addr);
    }

    public static void native_set_mVertex(long this_addr, int mVertex) {
        internal_native_set_mVertex(this_addr, mVertex);
    }

    public static long native_get_mWeights(long this_addr, int index) {
        return internal_native_get_mWeights(this_addr, index);
    }

    public static void native_set_mWeights(long this_addr, int index, long mWeights_addr) {
        internal_native_set_mWeights(this_addr, index, mWeights_addr);
    }

    public static float native_get_mMaxDistance(long this_addr) {
        return internal_native_get_mMaxDistance(this_addr);
    }

    public static void native_set_mMaxDistance(long this_addr, float mMaxDistance) {
        internal_native_set_mMaxDistance(this_addr, mMaxDistance);
    }

    public static float native_get_mBackStopDistance(long this_addr) {
        return internal_native_get_mBackStopDistance(this_addr);
    }

    public static void native_set_mBackStopDistance(long this_addr, float mBackStopDistance) {
        internal_native_set_mBackStopDistance(this_addr, mBackStopDistance);
    }

    public static float native_get_mBackStopRadius(long this_addr) {
        return internal_native_get_mBackStopRadius(this_addr);
    }

    public static void native_set_mBackStopRadius(long this_addr, float mBackStopRadius) {
        internal_native_set_mBackStopRadius(this_addr, mBackStopRadius);
    }
}
