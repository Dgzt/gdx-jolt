/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.math.Vec3;

public class SoftBodyVertex extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    static public final SoftBodyVertex T_01 = new SoftBodyVertex((byte) 1, (char) 1);

    static public final SoftBodyVertex T_02 = new SoftBodyVertex((byte) 1, (char) 1);

    static public final SoftBodyVertex T_03 = new SoftBodyVertex((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodyVertex(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public Vec3 get_mPreviousPosition() {
        long pointer = internal_native_get_mPreviousPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
return (jlong)&nativeObject->mPreviousPosition;
*/
    private static native long internal_native_get_mPreviousPosition(long this_addr);

    public void set_mPreviousPosition(Vec3 mPreviousPosition) {
        internal_native_set_mPreviousPosition((long) getNativeData().getCPointer(), (long) (mPreviousPosition != null ? mPreviousPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
nativeObject->mPreviousPosition = *((Vec3*)mPreviousPosition_addr);
*/
    private static native void internal_native_set_mPreviousPosition(long this_addr, long mPreviousPosition_addr);

    public Vec3 get_mPosition() {
        long pointer = internal_native_get_mPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
return (jlong)&nativeObject->mPosition;
*/
    private static native long internal_native_get_mPosition(long this_addr);

    public void set_mPosition(Vec3 mPosition) {
        internal_native_set_mPosition((long) getNativeData().getCPointer(), (long) (mPosition != null ? mPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
nativeObject->mPosition = *((Vec3*)mPosition_addr);
*/
    private static native void internal_native_set_mPosition(long this_addr, long mPosition_addr);

    public Vec3 get_mVelocity() {
        long pointer = internal_native_get_mVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
return (jlong)&nativeObject->mVelocity;
*/
    private static native long internal_native_get_mVelocity(long this_addr);

    public void set_mVelocity(Vec3 mVelocity) {
        internal_native_set_mVelocity((long) getNativeData().getCPointer(), (long) (mVelocity != null ? mVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
nativeObject->mVelocity = *((Vec3*)mVelocity_addr);
*/
    private static native void internal_native_set_mVelocity(long this_addr, long mVelocity_addr);

    public float get_mInvMass() {
        return internal_native_get_mInvMass((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
return nativeObject->mInvMass;
*/
    private static native float internal_native_get_mInvMass(long this_addr);

    public void set_mInvMass(float mInvMass) {
        internal_native_set_mInvMass((long) getNativeData().getCPointer(), mInvMass);
    }

    /*[-JNI;-NATIVE]
SoftBodyVertex* nativeObject = (SoftBodyVertex*)this_addr;
nativeObject->mInvMass = mInvMass;
*/
    private static native void internal_native_set_mInvMass(long this_addr, float mInvMass);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_get_mPreviousPosition(long this_addr) {
        return internal_native_get_mPreviousPosition(this_addr);
    }

    public static void native_set_mPreviousPosition(long this_addr, long mPreviousPosition_addr) {
        internal_native_set_mPreviousPosition(this_addr, mPreviousPosition_addr);
    }

    public static long native_get_mPosition(long this_addr) {
        return internal_native_get_mPosition(this_addr);
    }

    public static void native_set_mPosition(long this_addr, long mPosition_addr) {
        internal_native_set_mPosition(this_addr, mPosition_addr);
    }

    public static long native_get_mVelocity(long this_addr) {
        return internal_native_get_mVelocity(this_addr);
    }

    public static void native_set_mVelocity(long this_addr, long mVelocity_addr) {
        internal_native_set_mVelocity(this_addr, mVelocity_addr);
    }

    public static float native_get_mInvMass(long this_addr) {
        return internal_native_get_mInvMass(this_addr);
    }

    public static void native_set_mInvMass(long this_addr, float mInvMass) {
        internal_native_set_mInvMass(this_addr, mInvMass);
    }
}
