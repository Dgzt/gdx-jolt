/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Quat;
import jolt.physics.collision.CollisionGroup;

public class SoftBodyCreationSettings extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_0;

    private CollisionGroup CollisionGroup_TEMP_GEN_0;

    static public final SoftBodyCreationSettings T_01 = new SoftBodyCreationSettings((byte) 1, (char) 1);

    static public final SoftBodyCreationSettings T_02 = new SoftBodyCreationSettings((byte) 1, (char) 1);

    static public final SoftBodyCreationSettings T_03 = new SoftBodyCreationSettings((byte) 1, (char) 1);

    public SoftBodyCreationSettings(SoftBodySharedSettings inSettings, Vec3 inPosition, Quat inRotation, int inObjectLayer) {
        long addr = internal_native_create_SoftBodySharedSettings_Vec3_Quat_int((long) (inSettings != null ? inSettings.getNativeData().getCPointer() : 0), (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0), (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0), inObjectLayer);
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SoftBodyCreationSettings((SoftBodySharedSettings* )inSettings_addr, *((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), inObjectLayer);
*/
    private static native long internal_native_create_SoftBodySharedSettings_Vec3_Quat_int(long inSettings_addr, long inPosition_addr, long inRotation_addr, int inObjectLayer);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodyCreationSettings(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public Vec3 get_mPosition() {
        long pointer = internal_native_get_mPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return (jlong)&nativeObject->mPosition;
*/
    private static native long internal_native_get_mPosition(long this_addr);

    public void set_mPosition(Vec3 mPosition) {
        internal_native_set_mPosition((long) getNativeData().getCPointer(), (long) (mPosition != null ? mPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mPosition = *((Vec3*)mPosition_addr);
*/
    private static native void internal_native_set_mPosition(long this_addr, long mPosition_addr);

    public Quat get_mRotation() {
        long pointer = internal_native_get_mRotation((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return (jlong)&nativeObject->mRotation;
*/
    private static native long internal_native_get_mRotation(long this_addr);

    public void set_mRotation(Quat mRotation) {
        internal_native_set_mRotation((long) getNativeData().getCPointer(), (long) (mRotation != null ? mRotation.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mRotation = *((Quat*)mRotation_addr);
*/
    private static native void internal_native_set_mRotation(long this_addr, long mRotation_addr);

    public long get_mUserData() {
        return internal_native_get_mUserData((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mUserData;
*/
    private static native long internal_native_get_mUserData(long this_addr);

    public void set_mUserData(long mUserData) {
        internal_native_set_mUserData((long) getNativeData().getCPointer(), mUserData);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mUserData = mUserData;
*/
    private static native void internal_native_set_mUserData(long this_addr, long mUserData);

    public int get_mObjectLayer() {
        return internal_native_get_mObjectLayer((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mObjectLayer;
*/
    private static native int internal_native_get_mObjectLayer(long this_addr);

    public void set_mObjectLayer(int mObjectLayer) {
        internal_native_set_mObjectLayer((long) getNativeData().getCPointer(), mObjectLayer);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mObjectLayer = mObjectLayer;
*/
    private static native void internal_native_set_mObjectLayer(long this_addr, int mObjectLayer);

    public CollisionGroup get_mCollisionGroup() {
        long pointer = internal_native_get_mCollisionGroup((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (CollisionGroup_TEMP_GEN_0 == null)
            CollisionGroup_TEMP_GEN_0 = new CollisionGroup((byte) 1, (char) 1);
        CollisionGroup_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return CollisionGroup_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return (jlong)&nativeObject->mCollisionGroup;
*/
    private static native long internal_native_get_mCollisionGroup(long this_addr);

    public void set_mCollisionGroup(CollisionGroup mCollisionGroup) {
        internal_native_set_mCollisionGroup((long) getNativeData().getCPointer(), (long) (mCollisionGroup != null ? mCollisionGroup.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mCollisionGroup = *((CollisionGroup*)mCollisionGroup_addr);
*/
    private static native void internal_native_set_mCollisionGroup(long this_addr, long mCollisionGroup_addr);

    public int get_mNumIterations() {
        return internal_native_get_mNumIterations((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mNumIterations;
*/
    private static native int internal_native_get_mNumIterations(long this_addr);

    public void set_mNumIterations(int mNumIterations) {
        internal_native_set_mNumIterations((long) getNativeData().getCPointer(), mNumIterations);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mNumIterations = mNumIterations;
*/
    private static native void internal_native_set_mNumIterations(long this_addr, int mNumIterations);

    public float get_mLinearDamping() {
        return internal_native_get_mLinearDamping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mLinearDamping;
*/
    private static native float internal_native_get_mLinearDamping(long this_addr);

    public void set_mLinearDamping(float mLinearDamping) {
        internal_native_set_mLinearDamping((long) getNativeData().getCPointer(), mLinearDamping);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mLinearDamping = mLinearDamping;
*/
    private static native void internal_native_set_mLinearDamping(long this_addr, float mLinearDamping);

    public float get_mMaxLinearVelocity() {
        return internal_native_get_mMaxLinearVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mMaxLinearVelocity;
*/
    private static native float internal_native_get_mMaxLinearVelocity(long this_addr);

    public void set_mMaxLinearVelocity(float mMaxLinearVelocity) {
        internal_native_set_mMaxLinearVelocity((long) getNativeData().getCPointer(), mMaxLinearVelocity);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mMaxLinearVelocity = mMaxLinearVelocity;
*/
    private static native void internal_native_set_mMaxLinearVelocity(long this_addr, float mMaxLinearVelocity);

    public float get_mRestitution() {
        return internal_native_get_mRestitution((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mRestitution;
*/
    private static native float internal_native_get_mRestitution(long this_addr);

    public void set_mRestitution(float mRestitution) {
        internal_native_set_mRestitution((long) getNativeData().getCPointer(), mRestitution);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mRestitution = mRestitution;
*/
    private static native void internal_native_set_mRestitution(long this_addr, float mRestitution);

    public float get_mFriction() {
        return internal_native_get_mFriction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mFriction;
*/
    private static native float internal_native_get_mFriction(long this_addr);

    public void set_mFriction(float mFriction) {
        internal_native_set_mFriction((long) getNativeData().getCPointer(), mFriction);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mFriction = mFriction;
*/
    private static native void internal_native_set_mFriction(long this_addr, float mFriction);

    public float get_mPressure() {
        return internal_native_get_mPressure((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mPressure;
*/
    private static native float internal_native_get_mPressure(long this_addr);

    public void set_mPressure(float mPressure) {
        internal_native_set_mPressure((long) getNativeData().getCPointer(), mPressure);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mPressure = mPressure;
*/
    private static native void internal_native_set_mPressure(long this_addr, float mPressure);

    public float get_mGravityFactor() {
        return internal_native_get_mGravityFactor((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mGravityFactor;
*/
    private static native float internal_native_get_mGravityFactor(long this_addr);

    public void set_mGravityFactor(float mGravityFactor) {
        internal_native_set_mGravityFactor((long) getNativeData().getCPointer(), mGravityFactor);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mGravityFactor = mGravityFactor;
*/
    private static native void internal_native_set_mGravityFactor(long this_addr, float mGravityFactor);

    public boolean get_mUpdatePosition() {
        return internal_native_get_mUpdatePosition((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mUpdatePosition;
*/
    private static native boolean internal_native_get_mUpdatePosition(long this_addr);

    public void set_mUpdatePosition(boolean mUpdatePosition) {
        internal_native_set_mUpdatePosition((long) getNativeData().getCPointer(), mUpdatePosition);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mUpdatePosition = mUpdatePosition;
*/
    private static native void internal_native_set_mUpdatePosition(long this_addr, boolean mUpdatePosition);

    public boolean get_mMakeRotationIdentity() {
        return internal_native_get_mMakeRotationIdentity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mMakeRotationIdentity;
*/
    private static native boolean internal_native_get_mMakeRotationIdentity(long this_addr);

    public void set_mMakeRotationIdentity(boolean mMakeRotationIdentity) {
        internal_native_set_mMakeRotationIdentity((long) getNativeData().getCPointer(), mMakeRotationIdentity);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mMakeRotationIdentity = mMakeRotationIdentity;
*/
    private static native void internal_native_set_mMakeRotationIdentity(long this_addr, boolean mMakeRotationIdentity);

    public boolean get_mAllowSleeping() {
        return internal_native_get_mAllowSleeping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
return nativeObject->mAllowSleeping;
*/
    private static native boolean internal_native_get_mAllowSleeping(long this_addr);

    public void set_mAllowSleeping(boolean mAllowSleeping) {
        internal_native_set_mAllowSleeping((long) getNativeData().getCPointer(), mAllowSleeping);
    }

    /*[-JNI;-NATIVE]
SoftBodyCreationSettings* nativeObject = (SoftBodyCreationSettings*)this_addr;
nativeObject->mAllowSleeping = mAllowSleeping;
*/
    private static native void internal_native_set_mAllowSleeping(long this_addr, boolean mAllowSleeping);

    public static long native_create_SoftBodySharedSettings_Vec3_Quat_int(long inSettings_addr, long inPosition_addr, long inRotation_addr, int inObjectLayer) {
        return internal_native_create_SoftBodySharedSettings_Vec3_Quat_int(inSettings_addr, inPosition_addr, inRotation_addr, inObjectLayer);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_get_mPosition(long this_addr) {
        return internal_native_get_mPosition(this_addr);
    }

    public static void native_set_mPosition(long this_addr, long mPosition_addr) {
        internal_native_set_mPosition(this_addr, mPosition_addr);
    }

    public static long native_get_mRotation(long this_addr) {
        return internal_native_get_mRotation(this_addr);
    }

    public static void native_set_mRotation(long this_addr, long mRotation_addr) {
        internal_native_set_mRotation(this_addr, mRotation_addr);
    }

    public static long native_get_mUserData(long this_addr) {
        return internal_native_get_mUserData(this_addr);
    }

    public static void native_set_mUserData(long this_addr, long mUserData) {
        internal_native_set_mUserData(this_addr, mUserData);
    }

    public static int native_get_mObjectLayer(long this_addr) {
        return internal_native_get_mObjectLayer(this_addr);
    }

    public static void native_set_mObjectLayer(long this_addr, int mObjectLayer) {
        internal_native_set_mObjectLayer(this_addr, mObjectLayer);
    }

    public static long native_get_mCollisionGroup(long this_addr) {
        return internal_native_get_mCollisionGroup(this_addr);
    }

    public static void native_set_mCollisionGroup(long this_addr, long mCollisionGroup_addr) {
        internal_native_set_mCollisionGroup(this_addr, mCollisionGroup_addr);
    }

    public static int native_get_mNumIterations(long this_addr) {
        return internal_native_get_mNumIterations(this_addr);
    }

    public static void native_set_mNumIterations(long this_addr, int mNumIterations) {
        internal_native_set_mNumIterations(this_addr, mNumIterations);
    }

    public static float native_get_mLinearDamping(long this_addr) {
        return internal_native_get_mLinearDamping(this_addr);
    }

    public static void native_set_mLinearDamping(long this_addr, float mLinearDamping) {
        internal_native_set_mLinearDamping(this_addr, mLinearDamping);
    }

    public static float native_get_mMaxLinearVelocity(long this_addr) {
        return internal_native_get_mMaxLinearVelocity(this_addr);
    }

    public static void native_set_mMaxLinearVelocity(long this_addr, float mMaxLinearVelocity) {
        internal_native_set_mMaxLinearVelocity(this_addr, mMaxLinearVelocity);
    }

    public static float native_get_mRestitution(long this_addr) {
        return internal_native_get_mRestitution(this_addr);
    }

    public static void native_set_mRestitution(long this_addr, float mRestitution) {
        internal_native_set_mRestitution(this_addr, mRestitution);
    }

    public static float native_get_mFriction(long this_addr) {
        return internal_native_get_mFriction(this_addr);
    }

    public static void native_set_mFriction(long this_addr, float mFriction) {
        internal_native_set_mFriction(this_addr, mFriction);
    }

    public static float native_get_mPressure(long this_addr) {
        return internal_native_get_mPressure(this_addr);
    }

    public static void native_set_mPressure(long this_addr, float mPressure) {
        internal_native_set_mPressure(this_addr, mPressure);
    }

    public static float native_get_mGravityFactor(long this_addr) {
        return internal_native_get_mGravityFactor(this_addr);
    }

    public static void native_set_mGravityFactor(long this_addr, float mGravityFactor) {
        internal_native_set_mGravityFactor(this_addr, mGravityFactor);
    }

    public static boolean native_get_mUpdatePosition(long this_addr) {
        return internal_native_get_mUpdatePosition(this_addr);
    }

    public static void native_set_mUpdatePosition(long this_addr, boolean mUpdatePosition) {
        internal_native_set_mUpdatePosition(this_addr, mUpdatePosition);
    }

    public static boolean native_get_mMakeRotationIdentity(long this_addr) {
        return internal_native_get_mMakeRotationIdentity(this_addr);
    }

    public static void native_set_mMakeRotationIdentity(long this_addr, boolean mMakeRotationIdentity) {
        internal_native_set_mMakeRotationIdentity(this_addr, mMakeRotationIdentity);
    }

    public static boolean native_get_mAllowSleeping(long this_addr) {
        return internal_native_get_mAllowSleeping(this_addr);
    }

    public static void native_set_mAllowSleeping(long this_addr, boolean mAllowSleeping) {
        internal_native_set_mAllowSleeping(this_addr, mAllowSleeping);
    }
}
