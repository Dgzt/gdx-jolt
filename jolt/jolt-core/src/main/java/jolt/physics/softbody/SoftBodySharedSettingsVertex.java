/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.Float3;

public class SoftBodySharedSettingsVertex extends IDLBase {

    private Float3 Float3_TEMP_GEN_0;

    private Float3 Float3_TEMP_GEN_1;

    static public final SoftBodySharedSettingsVertex T_01 = new SoftBodySharedSettingsVertex((byte) 1, (char) 1);

    static public final SoftBodySharedSettingsVertex T_02 = new SoftBodySharedSettingsVertex((byte) 1, (char) 1);

    static public final SoftBodySharedSettingsVertex T_03 = new SoftBodySharedSettingsVertex((byte) 1, (char) 1);

    public SoftBodySharedSettingsVertex() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SoftBodySharedSettingsVertex();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodySharedSettingsVertex(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public Float3 get_mPosition() {
        long pointer = internal_native_get_mPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Float3_TEMP_GEN_0 == null)
            Float3_TEMP_GEN_0 = new Float3((byte) 1, (char) 1);
        Float3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Float3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
return (jlong)&nativeObject->mPosition;
*/
    private static native long internal_native_get_mPosition(long this_addr);

    public void set_mPosition(Float3 mPosition) {
        internal_native_set_mPosition((long) getNativeData().getCPointer(), (long) (mPosition != null ? mPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
nativeObject->mPosition = *((Float3*)mPosition_addr);
*/
    private static native void internal_native_set_mPosition(long this_addr, long mPosition_addr);

    public Float3 get_mVelocity() {
        long pointer = internal_native_get_mVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Float3_TEMP_GEN_1 == null)
            Float3_TEMP_GEN_1 = new Float3((byte) 1, (char) 1);
        Float3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Float3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
return (jlong)&nativeObject->mVelocity;
*/
    private static native long internal_native_get_mVelocity(long this_addr);

    public void set_mVelocity(Float3 mVelocity) {
        internal_native_set_mVelocity((long) getNativeData().getCPointer(), (long) (mVelocity != null ? mVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
nativeObject->mVelocity = *((Float3*)mVelocity_addr);
*/
    private static native void internal_native_set_mVelocity(long this_addr, long mVelocity_addr);

    public float get_mInvMass() {
        return internal_native_get_mInvMass((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
return nativeObject->mInvMass;
*/
    private static native float internal_native_get_mInvMass(long this_addr);

    public void set_mInvMass(float mInvMass) {
        internal_native_set_mInvMass((long) getNativeData().getCPointer(), mInvMass);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettingsVertex* nativeObject = (SoftBodySharedSettingsVertex*)this_addr;
nativeObject->mInvMass = mInvMass;
*/
    private static native void internal_native_set_mInvMass(long this_addr, float mInvMass);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_get_mPosition(long this_addr) {
        return internal_native_get_mPosition(this_addr);
    }

    public static void native_set_mPosition(long this_addr, long mPosition_addr) {
        internal_native_set_mPosition(this_addr, mPosition_addr);
    }

    public static long native_get_mVelocity(long this_addr) {
        return internal_native_get_mVelocity(this_addr);
    }

    public static void native_set_mVelocity(long this_addr, long mVelocity_addr) {
        internal_native_set_mVelocity(this_addr, mVelocity_addr);
    }

    public static float native_get_mInvMass(long this_addr) {
        return internal_native_get_mInvMass(this_addr);
    }

    public static void native_set_mInvMass(long this_addr, float mInvMass) {
        internal_native_set_mInvMass(this_addr, mInvMass);
    }
}
