/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.physics.body.Body;

public class SoftBodyContactListenerEm extends SoftBodyContactListener {

    static private Body Body_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_1;

    static private SoftBodyContactSettings SoftBodyContactSettings_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_2;

    static private SoftBodyManifold SoftBodyManifold_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class SoftBodyContactListenerJS : public SoftBodyContactListenerEm {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID OnSoftBodyContactValidateJJJ_ID = 0;
	inline static jmethodID OnSoftBodyContactAddedJJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(SoftBodyContactListenerJS::jClassID == 0) {
		SoftBodyContactListenerJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		SoftBodyContactListenerJS::OnSoftBodyContactValidateJJJ_ID = env->GetMethodID(jClassID, "internal_OnSoftBodyContactValidate", "(JJJ)I");
		SoftBodyContactListenerJS::OnSoftBodyContactAddedJJ_ID = env->GetMethodID(jClassID, "internal_OnSoftBodyContactAdded", "(JJ)V");
	}
}
virtual int OnSoftBodyContactValidate(const Body& inSoftBody, const Body& inOtherBody, SoftBodyContactSettings* ioSettings) {
   return env->CallIntMethod(obj, SoftBodyContactListenerJS::OnSoftBodyContactValidateJJJ_ID, (jlong)&inSoftBody, (jlong)&inOtherBody, (jlong)ioSettings);
}
virtual void OnSoftBodyContactAdded(const Body& inSoftBody, const SoftBodyManifold& inManifold) {
   env->CallVoidMethod(obj, SoftBodyContactListenerJS::OnSoftBodyContactAddedJJ_ID, (jlong)&inSoftBody, (jlong)&inManifold);
}
};
*/
    @Deprecated()
    public SoftBodyContactListenerEm(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodyContactListenerJS* nativeObject = (SoftBodyContactListenerJS*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public SoftBodyContactListenerEm() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(getNativeData().getCPointer());
    }

    protected int OnSoftBodyContactValidate(Body inSoftBody, Body inOtherBody, SoftBodyContactSettings ioSettings) {
        return 0;
    }

    private int internal_OnSoftBodyContactValidate(long inSoftBody, long inOtherBody, long ioSettings) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.getNativeData().reset(inSoftBody, false);
        if (Body_TEMP_STATIC_GEN_1 == null)
            Body_TEMP_STATIC_GEN_1 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_1.getNativeData().reset(inOtherBody, false);
        if (SoftBodyContactSettings_TEMP_STATIC_GEN_0 == null)
            SoftBodyContactSettings_TEMP_STATIC_GEN_0 = new SoftBodyContactSettings((byte) 1, (char) 1);
        SoftBodyContactSettings_TEMP_STATIC_GEN_0.getNativeData().reset(ioSettings, false);
        return OnSoftBodyContactValidate(Body_TEMP_STATIC_GEN_0, Body_TEMP_STATIC_GEN_1, SoftBodyContactSettings_TEMP_STATIC_GEN_0);
    }

    protected void OnSoftBodyContactAdded(Body inSoftBody, SoftBodyManifold inManifold) {
    }

    private void internal_OnSoftBodyContactAdded(long inSoftBody, long inManifold) {
        if (Body_TEMP_STATIC_GEN_2 == null)
            Body_TEMP_STATIC_GEN_2 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_2.getNativeData().reset(inSoftBody, false);
        if (SoftBodyManifold_TEMP_STATIC_GEN_0 == null)
            SoftBodyManifold_TEMP_STATIC_GEN_0 = new SoftBodyManifold((byte) 1, (char) 1);
        SoftBodyManifold_TEMP_STATIC_GEN_0.getNativeData().reset(inManifold, false);
        OnSoftBodyContactAdded(Body_TEMP_STATIC_GEN_2, SoftBodyManifold_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SoftBodyContactListenerJS();
*/
    private static native long internal_native_create();

    /*[-JNI;-NATIVE]
SoftBodyContactListenerJS* nativeObject = (SoftBodyContactListenerJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    private native void internal_native_setupCallback(long this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
