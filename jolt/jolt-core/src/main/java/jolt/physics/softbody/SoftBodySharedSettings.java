/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.physics.collision.PhysicsMaterialList;

public class SoftBodySharedSettings extends IDLBase {

    private ArraySoftBodySharedSettingsVertex ArraySoftBodySharedSettingsVertex_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsFace ArraySoftBodySharedSettingsFace_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsEdge ArraySoftBodySharedSettingsEdge_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsDihedralBend ArraySoftBodySharedSettingsDihedralBend_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsVolume ArraySoftBodySharedSettingsVolume_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsSkinned ArraySoftBodySharedSettingsSkinned_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsInvBind ArraySoftBodySharedSettingsInvBind_TEMP_GEN_0;

    private ArraySoftBodySharedSettingsLRA ArraySoftBodySharedSettingsLRA_TEMP_GEN_0;

    private PhysicsMaterialList PhysicsMaterialList_TEMP_GEN_0;

    static public final SoftBodySharedSettings T_01 = new SoftBodySharedSettings((byte) 1, (char) 1);

    static public final SoftBodySharedSettings T_02 = new SoftBodySharedSettings((byte) 1, (char) 1);

    static public final SoftBodySharedSettings T_03 = new SoftBodySharedSettings((byte) 1, (char) 1);

    public SoftBodySharedSettings() {
        long addr = internal_native_create();
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new SoftBodySharedSettings();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodySharedSettings(byte b, char c) {
    }

    public int GetRefCount() {
        return internal_native_GetRefCount((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return nativeObject->GetRefCount();
*/
    private static native int internal_native_GetRefCount(long this_addr);

    public void AddRef() {
        internal_native_AddRef((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->AddRef();
*/
    private static native void internal_native_AddRef(long this_addr);

    public void Release() {
        internal_native_Release((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->Release();
*/
    private static native void internal_native_Release(long this_addr);

    public void CreateConstraints(SoftBodySharedSettingsVertexAttributes inVertexAttributes, int inVertexAttributesLength, int inBendType, float inAngleTolerance) {
        internal_native_CreateConstraints((long) getNativeData().getCPointer(), (long) (inVertexAttributes != null ? inVertexAttributes.getNativeData().getCPointer() : 0), inVertexAttributesLength, inBendType, inAngleTolerance);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CreateConstraints((SoftBodySharedSettingsVertexAttributes* )inVertexAttributes_addr, inVertexAttributesLength, (::SoftBodySharedSettings_EBendType)inBendType, (float)inAngleTolerance);
*/
    private static native void internal_native_CreateConstraints(long this_addr, long inVertexAttributes_addr, int inVertexAttributesLength, int inBendType, float inAngleTolerance);

    public void CreateConstraints(SoftBodySharedSettingsVertexAttributes inVertexAttributes, int inVertexAttributesLength, int inBendType) {
        internal_native_CreateConstraints((long) getNativeData().getCPointer(), (long) (inVertexAttributes != null ? inVertexAttributes.getNativeData().getCPointer() : 0), inVertexAttributesLength, inBendType);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CreateConstraints((SoftBodySharedSettingsVertexAttributes* )inVertexAttributes_addr, inVertexAttributesLength, (::SoftBodySharedSettings_EBendType)inBendType);
*/
    private static native void internal_native_CreateConstraints(long this_addr, long inVertexAttributes_addr, int inVertexAttributesLength, int inBendType);

    public void CreateConstraints(SoftBodySharedSettingsVertexAttributes inVertexAttributes, int inVertexAttributesLength) {
        internal_native_CreateConstraints((long) getNativeData().getCPointer(), (long) (inVertexAttributes != null ? inVertexAttributes.getNativeData().getCPointer() : 0), inVertexAttributesLength);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CreateConstraints((SoftBodySharedSettingsVertexAttributes* )inVertexAttributes_addr, inVertexAttributesLength);
*/
    private static native void internal_native_CreateConstraints(long this_addr, long inVertexAttributes_addr, int inVertexAttributesLength);

    public void AddFace(SoftBodySharedSettingsFace inFace) {
        internal_native_AddFace((long) getNativeData().getCPointer(), (long) (inFace != null ? inFace.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->AddFace(*((SoftBodySharedSettingsFace* )inFace_addr));
*/
    private static native void internal_native_AddFace(long this_addr, long inFace_addr);

    public void CalculateEdgeLengths() {
        internal_native_CalculateEdgeLengths((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CalculateEdgeLengths();
*/
    private static native void internal_native_CalculateEdgeLengths(long this_addr);

    public void CalculateLRALengths() {
        internal_native_CalculateLRALengths((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CalculateLRALengths();
*/
    private static native void internal_native_CalculateLRALengths(long this_addr);

    public void CalculateBendConstraintConstants() {
        internal_native_CalculateBendConstraintConstants((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CalculateBendConstraintConstants();
*/
    private static native void internal_native_CalculateBendConstraintConstants(long this_addr);

    public void CalculateVolumeConstraintVolumes() {
        internal_native_CalculateVolumeConstraintVolumes((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CalculateVolumeConstraintVolumes();
*/
    private static native void internal_native_CalculateVolumeConstraintVolumes(long this_addr);

    public void CalculateSkinnedConstraintNormals() {
        internal_native_CalculateSkinnedConstraintNormals((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->CalculateSkinnedConstraintNormals();
*/
    private static native void internal_native_CalculateSkinnedConstraintNormals(long this_addr);

    public void Optimize() {
        internal_native_Optimize((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->Optimize();
*/
    private static native void internal_native_Optimize(long this_addr);

    public SoftBodySharedSettings Clone() {
        long pointer = internal_native_Clone((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        SoftBodySharedSettings SoftBodySharedSettings_NEW = new SoftBodySharedSettings((byte) 1, (char) 1);
        SoftBodySharedSettings_NEW.getNativeData().reset(pointer, false);
        return SoftBodySharedSettings_NEW;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
SoftBodySharedSettings* obj = nativeObject->Clone();
return (jlong)obj;
*/
    private static native long internal_native_Clone(long this_addr);

    public ArraySoftBodySharedSettingsVertex get_mVertices() {
        long pointer = internal_native_get_mVertices((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsVertex_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsVertex_TEMP_GEN_0 = new ArraySoftBodySharedSettingsVertex((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsVertex_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsVertex_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mVertices;
*/
    private static native long internal_native_get_mVertices(long this_addr);

    public void set_mVertices(ArraySoftBodySharedSettingsVertex mVertices) {
        internal_native_set_mVertices((long) getNativeData().getCPointer(), (long) (mVertices != null ? mVertices.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mVertices = *((ArraySoftBodySharedSettingsVertex*)mVertices_addr);
*/
    private static native void internal_native_set_mVertices(long this_addr, long mVertices_addr);

    public ArraySoftBodySharedSettingsFace get_mFaces() {
        long pointer = internal_native_get_mFaces((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsFace_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsFace_TEMP_GEN_0 = new ArraySoftBodySharedSettingsFace((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsFace_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsFace_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mFaces;
*/
    private static native long internal_native_get_mFaces(long this_addr);

    public void set_mFaces(ArraySoftBodySharedSettingsFace mFaces) {
        internal_native_set_mFaces((long) getNativeData().getCPointer(), (long) (mFaces != null ? mFaces.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mFaces = *((ArraySoftBodySharedSettingsFace*)mFaces_addr);
*/
    private static native void internal_native_set_mFaces(long this_addr, long mFaces_addr);

    public ArraySoftBodySharedSettingsEdge get_mEdgeConstraints() {
        long pointer = internal_native_get_mEdgeConstraints((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsEdge_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsEdge_TEMP_GEN_0 = new ArraySoftBodySharedSettingsEdge((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsEdge_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsEdge_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mEdgeConstraints;
*/
    private static native long internal_native_get_mEdgeConstraints(long this_addr);

    public void set_mEdgeConstraints(ArraySoftBodySharedSettingsEdge mEdgeConstraints) {
        internal_native_set_mEdgeConstraints((long) getNativeData().getCPointer(), (long) (mEdgeConstraints != null ? mEdgeConstraints.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mEdgeConstraints = *((ArraySoftBodySharedSettingsEdge*)mEdgeConstraints_addr);
*/
    private static native void internal_native_set_mEdgeConstraints(long this_addr, long mEdgeConstraints_addr);

    public ArraySoftBodySharedSettingsDihedralBend get_mDihedralBendConstraints() {
        long pointer = internal_native_get_mDihedralBendConstraints((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsDihedralBend_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsDihedralBend_TEMP_GEN_0 = new ArraySoftBodySharedSettingsDihedralBend((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsDihedralBend_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsDihedralBend_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mDihedralBendConstraints;
*/
    private static native long internal_native_get_mDihedralBendConstraints(long this_addr);

    public void set_mDihedralBendConstraints(ArraySoftBodySharedSettingsDihedralBend mDihedralBendConstraints) {
        internal_native_set_mDihedralBendConstraints((long) getNativeData().getCPointer(), (long) (mDihedralBendConstraints != null ? mDihedralBendConstraints.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mDihedralBendConstraints = *((ArraySoftBodySharedSettingsDihedralBend*)mDihedralBendConstraints_addr);
*/
    private static native void internal_native_set_mDihedralBendConstraints(long this_addr, long mDihedralBendConstraints_addr);

    public ArraySoftBodySharedSettingsVolume get_mVolumeConstraints() {
        long pointer = internal_native_get_mVolumeConstraints((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsVolume_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsVolume_TEMP_GEN_0 = new ArraySoftBodySharedSettingsVolume((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsVolume_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsVolume_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mVolumeConstraints;
*/
    private static native long internal_native_get_mVolumeConstraints(long this_addr);

    public void set_mVolumeConstraints(ArraySoftBodySharedSettingsVolume mVolumeConstraints) {
        internal_native_set_mVolumeConstraints((long) getNativeData().getCPointer(), (long) (mVolumeConstraints != null ? mVolumeConstraints.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mVolumeConstraints = *((ArraySoftBodySharedSettingsVolume*)mVolumeConstraints_addr);
*/
    private static native void internal_native_set_mVolumeConstraints(long this_addr, long mVolumeConstraints_addr);

    public ArraySoftBodySharedSettingsSkinned get_mSkinnedConstraints() {
        long pointer = internal_native_get_mSkinnedConstraints((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsSkinned_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsSkinned_TEMP_GEN_0 = new ArraySoftBodySharedSettingsSkinned((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsSkinned_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsSkinned_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mSkinnedConstraints;
*/
    private static native long internal_native_get_mSkinnedConstraints(long this_addr);

    public void set_mSkinnedConstraints(ArraySoftBodySharedSettingsSkinned mSkinnedConstraints) {
        internal_native_set_mSkinnedConstraints((long) getNativeData().getCPointer(), (long) (mSkinnedConstraints != null ? mSkinnedConstraints.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mSkinnedConstraints = *((ArraySoftBodySharedSettingsSkinned*)mSkinnedConstraints_addr);
*/
    private static native void internal_native_set_mSkinnedConstraints(long this_addr, long mSkinnedConstraints_addr);

    public ArraySoftBodySharedSettingsInvBind get_mInvBindMatrices() {
        long pointer = internal_native_get_mInvBindMatrices((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsInvBind_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsInvBind_TEMP_GEN_0 = new ArraySoftBodySharedSettingsInvBind((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsInvBind_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsInvBind_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mInvBindMatrices;
*/
    private static native long internal_native_get_mInvBindMatrices(long this_addr);

    public void set_mInvBindMatrices(ArraySoftBodySharedSettingsInvBind mInvBindMatrices) {
        internal_native_set_mInvBindMatrices((long) getNativeData().getCPointer(), (long) (mInvBindMatrices != null ? mInvBindMatrices.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mInvBindMatrices = *((ArraySoftBodySharedSettingsInvBind*)mInvBindMatrices_addr);
*/
    private static native void internal_native_set_mInvBindMatrices(long this_addr, long mInvBindMatrices_addr);

    public ArraySoftBodySharedSettingsLRA get_mLRAConstraints() {
        long pointer = internal_native_get_mLRAConstraints((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArraySoftBodySharedSettingsLRA_TEMP_GEN_0 == null)
            ArraySoftBodySharedSettingsLRA_TEMP_GEN_0 = new ArraySoftBodySharedSettingsLRA((byte) 1, (char) 1);
        ArraySoftBodySharedSettingsLRA_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArraySoftBodySharedSettingsLRA_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mLRAConstraints;
*/
    private static native long internal_native_get_mLRAConstraints(long this_addr);

    public void set_mLRAConstraints(ArraySoftBodySharedSettingsLRA mLRAConstraints) {
        internal_native_set_mLRAConstraints((long) getNativeData().getCPointer(), (long) (mLRAConstraints != null ? mLRAConstraints.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mLRAConstraints = *((ArraySoftBodySharedSettingsLRA*)mLRAConstraints_addr);
*/
    private static native void internal_native_set_mLRAConstraints(long this_addr, long mLRAConstraints_addr);

    public PhysicsMaterialList get_mMaterials() {
        long pointer = internal_native_get_mMaterials((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (PhysicsMaterialList_TEMP_GEN_0 == null)
            PhysicsMaterialList_TEMP_GEN_0 = new PhysicsMaterialList((byte) 1, (char) 1);
        PhysicsMaterialList_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return PhysicsMaterialList_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return (jlong)&nativeObject->mMaterials;
*/
    private static native long internal_native_get_mMaterials(long this_addr);

    public void set_mMaterials(PhysicsMaterialList mMaterials) {
        internal_native_set_mMaterials((long) getNativeData().getCPointer(), (long) (mMaterials != null ? mMaterials.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mMaterials = *((PhysicsMaterialList*)mMaterials_addr);
*/
    private static native void internal_native_set_mMaterials(long this_addr, long mMaterials_addr);

    public float get_mVertexRadius() {
        return internal_native_get_mVertexRadius((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
return nativeObject->mVertexRadius;
*/
    private static native float internal_native_get_mVertexRadius(long this_addr);

    public void set_mVertexRadius(float mVertexRadius) {
        internal_native_set_mVertexRadius((long) getNativeData().getCPointer(), mVertexRadius);
    }

    /*[-JNI;-NATIVE]
SoftBodySharedSettings* nativeObject = (SoftBodySharedSettings*)this_addr;
nativeObject->mVertexRadius = mVertexRadius;
*/
    private static native void internal_native_set_mVertexRadius(long this_addr, float mVertexRadius);

    public static long native_create() {
        return internal_native_create();
    }

    public static int native_GetRefCount(long this_addr) {
        return internal_native_GetRefCount(this_addr);
    }

    public static void native_AddRef(long this_addr) {
        internal_native_AddRef(this_addr);
    }

    public static void native_Release(long this_addr) {
        internal_native_Release(this_addr);
    }

    public static void native_CreateConstraints(long this_addr, long inVertexAttributes_addr, int inVertexAttributesLength, int inBendType, float inAngleTolerance) {
        internal_native_CreateConstraints(this_addr, inVertexAttributes_addr, inVertexAttributesLength, inBendType, inAngleTolerance);
    }

    public static void native_CreateConstraints(long this_addr, long inVertexAttributes_addr, int inVertexAttributesLength, int inBendType) {
        internal_native_CreateConstraints(this_addr, inVertexAttributes_addr, inVertexAttributesLength, inBendType);
    }

    public static void native_CreateConstraints(long this_addr, long inVertexAttributes_addr, int inVertexAttributesLength) {
        internal_native_CreateConstraints(this_addr, inVertexAttributes_addr, inVertexAttributesLength);
    }

    public static void native_AddFace(long this_addr, long inFace_addr) {
        internal_native_AddFace(this_addr, inFace_addr);
    }

    public static void native_CalculateEdgeLengths(long this_addr) {
        internal_native_CalculateEdgeLengths(this_addr);
    }

    public static void native_CalculateLRALengths(long this_addr) {
        internal_native_CalculateLRALengths(this_addr);
    }

    public static void native_CalculateBendConstraintConstants(long this_addr) {
        internal_native_CalculateBendConstraintConstants(this_addr);
    }

    public static void native_CalculateVolumeConstraintVolumes(long this_addr) {
        internal_native_CalculateVolumeConstraintVolumes(this_addr);
    }

    public static void native_CalculateSkinnedConstraintNormals(long this_addr) {
        internal_native_CalculateSkinnedConstraintNormals(this_addr);
    }

    public static void native_Optimize(long this_addr) {
        internal_native_Optimize(this_addr);
    }

    public static long native_Clone(long this_addr) {
        return internal_native_Clone(this_addr);
    }

    public static long native_get_mVertices(long this_addr) {
        return internal_native_get_mVertices(this_addr);
    }

    public static void native_set_mVertices(long this_addr, long mVertices_addr) {
        internal_native_set_mVertices(this_addr, mVertices_addr);
    }

    public static long native_get_mFaces(long this_addr) {
        return internal_native_get_mFaces(this_addr);
    }

    public static void native_set_mFaces(long this_addr, long mFaces_addr) {
        internal_native_set_mFaces(this_addr, mFaces_addr);
    }

    public static long native_get_mEdgeConstraints(long this_addr) {
        return internal_native_get_mEdgeConstraints(this_addr);
    }

    public static void native_set_mEdgeConstraints(long this_addr, long mEdgeConstraints_addr) {
        internal_native_set_mEdgeConstraints(this_addr, mEdgeConstraints_addr);
    }

    public static long native_get_mDihedralBendConstraints(long this_addr) {
        return internal_native_get_mDihedralBendConstraints(this_addr);
    }

    public static void native_set_mDihedralBendConstraints(long this_addr, long mDihedralBendConstraints_addr) {
        internal_native_set_mDihedralBendConstraints(this_addr, mDihedralBendConstraints_addr);
    }

    public static long native_get_mVolumeConstraints(long this_addr) {
        return internal_native_get_mVolumeConstraints(this_addr);
    }

    public static void native_set_mVolumeConstraints(long this_addr, long mVolumeConstraints_addr) {
        internal_native_set_mVolumeConstraints(this_addr, mVolumeConstraints_addr);
    }

    public static long native_get_mSkinnedConstraints(long this_addr) {
        return internal_native_get_mSkinnedConstraints(this_addr);
    }

    public static void native_set_mSkinnedConstraints(long this_addr, long mSkinnedConstraints_addr) {
        internal_native_set_mSkinnedConstraints(this_addr, mSkinnedConstraints_addr);
    }

    public static long native_get_mInvBindMatrices(long this_addr) {
        return internal_native_get_mInvBindMatrices(this_addr);
    }

    public static void native_set_mInvBindMatrices(long this_addr, long mInvBindMatrices_addr) {
        internal_native_set_mInvBindMatrices(this_addr, mInvBindMatrices_addr);
    }

    public static long native_get_mLRAConstraints(long this_addr) {
        return internal_native_get_mLRAConstraints(this_addr);
    }

    public static void native_set_mLRAConstraints(long this_addr, long mLRAConstraints_addr) {
        internal_native_set_mLRAConstraints(this_addr, mLRAConstraints_addr);
    }

    public static long native_get_mMaterials(long this_addr) {
        return internal_native_get_mMaterials(this_addr);
    }

    public static void native_set_mMaterials(long this_addr, long mMaterials_addr) {
        internal_native_set_mMaterials(this_addr, mMaterials_addr);
    }

    public static float native_get_mVertexRadius(long this_addr) {
        return internal_native_get_mVertexRadius(this_addr);
    }

    public static void native_set_mVertexRadius(long this_addr, float mVertexRadius) {
        internal_native_set_mVertexRadius(this_addr, mVertexRadius);
    }
}
