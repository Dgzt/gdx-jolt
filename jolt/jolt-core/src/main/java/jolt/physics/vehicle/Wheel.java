/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.vehicle;

import jolt.idl.IDLBase;
import jolt.physics.body.BodyID;
import jolt.math.Vec3;

public class Wheel extends IDLBase {

    private WheelSettings WheelSettings_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    static public final Wheel T_01 = new Wheel((byte) 1, (char) 1);

    static public final Wheel T_02 = new Wheel((byte) 1, (char) 1);

    static public final Wheel T_03 = new Wheel((byte) 1, (char) 1);

    public Wheel(WheelSettings inSettings) {
        long addr = internal_native_create_WheelSettings((long) (inSettings != null ? inSettings.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Wheel(*((WheelSettings* )inSettings_addr));
*/
    private static native long internal_native_create_WheelSettings(long inSettings_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Wheel(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public WheelSettings GetSettings() {
        long pointer = internal_native_GetSettings((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (WheelSettings_TEMP_GEN_0 == null)
            WheelSettings_TEMP_GEN_0 = new WheelSettings((byte) 1, (char) 1);
        WheelSettings_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return WheelSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
const WheelSettings* obj = nativeObject->GetSettings();
return (jlong)obj;
*/
    private static native long internal_native_GetSettings(long this_addr);

    public float GetAngularVelocity() {
        return internal_native_GetAngularVelocity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetAngularVelocity();
*/
    private static native float internal_native_GetAngularVelocity(long this_addr);

    public void SetAngularVelocity(float inVel) {
        internal_native_SetAngularVelocity((long) getNativeData().getCPointer(), inVel);
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
nativeObject->SetAngularVelocity((float)inVel);
*/
    private static native void internal_native_SetAngularVelocity(long this_addr, float inVel);

    public float GetRotationAngle() {
        return internal_native_GetRotationAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetRotationAngle();
*/
    private static native float internal_native_GetRotationAngle(long this_addr);

    public void SetRotationAngle(float inAngle) {
        internal_native_SetRotationAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
nativeObject->SetRotationAngle((float)inAngle);
*/
    private static native void internal_native_SetRotationAngle(long this_addr, float inAngle);

    public float GetSteerAngle() {
        return internal_native_GetSteerAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetSteerAngle();
*/
    private static native float internal_native_GetSteerAngle(long this_addr);

    public void SetSteerAngle(float inAngle) {
        internal_native_SetSteerAngle((long) getNativeData().getCPointer(), inAngle);
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
nativeObject->SetSteerAngle((float)inAngle);
*/
    private static native void internal_native_SetSteerAngle(long this_addr, float inAngle);

    public boolean HasContact() {
        return internal_native_HasContact((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->HasContact();
*/
    private static native boolean internal_native_HasContact(long this_addr);

    public BodyID GetContactBodyID() {
        long pointer = internal_native_GetContactBodyID((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
static BodyID copy_addr;
copy_addr = nativeObject->GetContactBodyID();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactBodyID(long this_addr);

    public Vec3 GetContactPosition() {
        long pointer = internal_native_GetContactPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetContactPosition();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactPosition(long this_addr);

    public Vec3 GetContactPointVelocity() {
        long pointer = internal_native_GetContactPointVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetContactPointVelocity();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactPointVelocity(long this_addr);

    public Vec3 GetContactNormal() {
        long pointer = internal_native_GetContactNormal((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetContactNormal();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactNormal(long this_addr);

    public Vec3 GetContactLongitudinal() {
        long pointer = internal_native_GetContactLongitudinal((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetContactLongitudinal();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactLongitudinal(long this_addr);

    public Vec3 GetContactLateral() {
        long pointer = internal_native_GetContactLateral((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetContactLateral();
return (jlong)&copy_addr;*/
    private static native long internal_native_GetContactLateral(long this_addr);

    public float GetSuspensionLength() {
        return internal_native_GetSuspensionLength((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetSuspensionLength();
*/
    private static native float internal_native_GetSuspensionLength(long this_addr);

    public boolean HasHitHardPoint() {
        return internal_native_HasHitHardPoint((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->HasHitHardPoint();
*/
    private static native boolean internal_native_HasHitHardPoint(long this_addr);

    public float GetSuspensionLambda() {
        return internal_native_GetSuspensionLambda((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetSuspensionLambda();
*/
    private static native float internal_native_GetSuspensionLambda(long this_addr);

    public float GetLongitudinalLambda() {
        return internal_native_GetLongitudinalLambda((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetLongitudinalLambda();
*/
    private static native float internal_native_GetLongitudinalLambda(long this_addr);

    public float GetLateralLambda() {
        return internal_native_GetLateralLambda((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Wheel* nativeObject = (Wheel*)this_addr;
return nativeObject->GetLateralLambda();
*/
    private static native float internal_native_GetLateralLambda(long this_addr);

    public static long native_create_WheelSettings(long inSettings_addr) {
        return internal_native_create_WheelSettings(inSettings_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_GetSettings(long this_addr) {
        return internal_native_GetSettings(this_addr);
    }

    public static float native_GetAngularVelocity(long this_addr) {
        return internal_native_GetAngularVelocity(this_addr);
    }

    public static void native_SetAngularVelocity(long this_addr, float inVel) {
        internal_native_SetAngularVelocity(this_addr, inVel);
    }

    public static float native_GetRotationAngle(long this_addr) {
        return internal_native_GetRotationAngle(this_addr);
    }

    public static void native_SetRotationAngle(long this_addr, float inAngle) {
        internal_native_SetRotationAngle(this_addr, inAngle);
    }

    public static float native_GetSteerAngle(long this_addr) {
        return internal_native_GetSteerAngle(this_addr);
    }

    public static void native_SetSteerAngle(long this_addr, float inAngle) {
        internal_native_SetSteerAngle(this_addr, inAngle);
    }

    public static boolean native_HasContact(long this_addr) {
        return internal_native_HasContact(this_addr);
    }

    public static long native_GetContactBodyID(long this_addr) {
        return internal_native_GetContactBodyID(this_addr);
    }

    public static long native_GetContactPosition(long this_addr) {
        return internal_native_GetContactPosition(this_addr);
    }

    public static long native_GetContactPointVelocity(long this_addr) {
        return internal_native_GetContactPointVelocity(this_addr);
    }

    public static long native_GetContactNormal(long this_addr) {
        return internal_native_GetContactNormal(this_addr);
    }

    public static long native_GetContactLongitudinal(long this_addr) {
        return internal_native_GetContactLongitudinal(this_addr);
    }

    public static long native_GetContactLateral(long this_addr) {
        return internal_native_GetContactLateral(this_addr);
    }

    public static float native_GetSuspensionLength(long this_addr) {
        return internal_native_GetSuspensionLength(this_addr);
    }

    public static boolean native_HasHitHardPoint(long this_addr) {
        return internal_native_HasHitHardPoint(this_addr);
    }

    public static float native_GetSuspensionLambda(long this_addr) {
        return internal_native_GetSuspensionLambda(this_addr);
    }

    public static float native_GetLongitudinalLambda(long this_addr) {
        return internal_native_GetLongitudinalLambda(this_addr);
    }

    public static float native_GetLateralLambda(long this_addr) {
        return internal_native_GetLateralLambda(this_addr);
    }
}
