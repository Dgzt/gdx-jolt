/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.vehicle;

import jolt.idl.IDLBase;
import jolt.core.LinearCurve;

public class VehicleEngineSettings extends IDLBase {

    private LinearCurve LinearCurve_TEMP_GEN_0;

    static public final VehicleEngineSettings T_01 = new VehicleEngineSettings((byte) 1, (char) 1);

    static public final VehicleEngineSettings T_02 = new VehicleEngineSettings((byte) 1, (char) 1);

    static public final VehicleEngineSettings T_03 = new VehicleEngineSettings((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public VehicleEngineSettings(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public float get_mMaxTorque() {
        return internal_native_get_mMaxTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
return nativeObject->mMaxTorque;
*/
    private static native float internal_native_get_mMaxTorque(long this_addr);

    public void set_mMaxTorque(float mMaxTorque) {
        internal_native_set_mMaxTorque((long) getNativeData().getCPointer(), mMaxTorque);
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
nativeObject->mMaxTorque = mMaxTorque;
*/
    private static native void internal_native_set_mMaxTorque(long this_addr, float mMaxTorque);

    public float get_mMinRPM() {
        return internal_native_get_mMinRPM((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
return nativeObject->mMinRPM;
*/
    private static native float internal_native_get_mMinRPM(long this_addr);

    public void set_mMinRPM(float mMinRPM) {
        internal_native_set_mMinRPM((long) getNativeData().getCPointer(), mMinRPM);
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
nativeObject->mMinRPM = mMinRPM;
*/
    private static native void internal_native_set_mMinRPM(long this_addr, float mMinRPM);

    public float get_mMaxRPM() {
        return internal_native_get_mMaxRPM((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
return nativeObject->mMaxRPM;
*/
    private static native float internal_native_get_mMaxRPM(long this_addr);

    public void set_mMaxRPM(float mMaxRPM) {
        internal_native_set_mMaxRPM((long) getNativeData().getCPointer(), mMaxRPM);
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
nativeObject->mMaxRPM = mMaxRPM;
*/
    private static native void internal_native_set_mMaxRPM(long this_addr, float mMaxRPM);

    public LinearCurve get_mNormalizedTorque() {
        long pointer = internal_native_get_mNormalizedTorque((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (LinearCurve_TEMP_GEN_0 == null)
            LinearCurve_TEMP_GEN_0 = new LinearCurve((byte) 1, (char) 1);
        LinearCurve_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return LinearCurve_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
return (jlong)&nativeObject->mNormalizedTorque;
*/
    private static native long internal_native_get_mNormalizedTorque(long this_addr);

    public void set_mNormalizedTorque(LinearCurve mNormalizedTorque) {
        internal_native_set_mNormalizedTorque((long) getNativeData().getCPointer(), (long) (mNormalizedTorque != null ? mNormalizedTorque.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
nativeObject->mNormalizedTorque = *((LinearCurve*)mNormalizedTorque_addr);
*/
    private static native void internal_native_set_mNormalizedTorque(long this_addr, long mNormalizedTorque_addr);

    public float get_mInertia() {
        return internal_native_get_mInertia((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
return nativeObject->mInertia;
*/
    private static native float internal_native_get_mInertia(long this_addr);

    public void set_mInertia(float mInertia) {
        internal_native_set_mInertia((long) getNativeData().getCPointer(), mInertia);
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
nativeObject->mInertia = mInertia;
*/
    private static native void internal_native_set_mInertia(long this_addr, float mInertia);

    public float get_mAngularDamping() {
        return internal_native_get_mAngularDamping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
return nativeObject->mAngularDamping;
*/
    private static native float internal_native_get_mAngularDamping(long this_addr);

    public void set_mAngularDamping(float mAngularDamping) {
        internal_native_set_mAngularDamping((long) getNativeData().getCPointer(), mAngularDamping);
    }

    /*[-JNI;-NATIVE]
VehicleEngineSettings* nativeObject = (VehicleEngineSettings*)this_addr;
nativeObject->mAngularDamping = mAngularDamping;
*/
    private static native void internal_native_set_mAngularDamping(long this_addr, float mAngularDamping);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static float native_get_mMaxTorque(long this_addr) {
        return internal_native_get_mMaxTorque(this_addr);
    }

    public static void native_set_mMaxTorque(long this_addr, float mMaxTorque) {
        internal_native_set_mMaxTorque(this_addr, mMaxTorque);
    }

    public static float native_get_mMinRPM(long this_addr) {
        return internal_native_get_mMinRPM(this_addr);
    }

    public static void native_set_mMinRPM(long this_addr, float mMinRPM) {
        internal_native_set_mMinRPM(this_addr, mMinRPM);
    }

    public static float native_get_mMaxRPM(long this_addr) {
        return internal_native_get_mMaxRPM(this_addr);
    }

    public static void native_set_mMaxRPM(long this_addr, float mMaxRPM) {
        internal_native_set_mMaxRPM(this_addr, mMaxRPM);
    }

    public static long native_get_mNormalizedTorque(long this_addr) {
        return internal_native_get_mNormalizedTorque(this_addr);
    }

    public static void native_set_mNormalizedTorque(long this_addr, long mNormalizedTorque_addr) {
        internal_native_set_mNormalizedTorque(this_addr, mNormalizedTorque_addr);
    }

    public static float native_get_mInertia(long this_addr) {
        return internal_native_get_mInertia(this_addr);
    }

    public static void native_set_mInertia(long this_addr, float mInertia) {
        internal_native_set_mInertia(this_addr, mInertia);
    }

    public static float native_get_mAngularDamping(long this_addr) {
        return internal_native_get_mAngularDamping(this_addr);
    }

    public static void native_set_mAngularDamping(long this_addr, float mAngularDamping) {
        internal_native_set_mAngularDamping(this_addr, mAngularDamping);
    }
}
