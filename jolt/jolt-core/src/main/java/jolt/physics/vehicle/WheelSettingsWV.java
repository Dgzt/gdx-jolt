/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.vehicle;

import jolt.core.LinearCurve;

public class WheelSettingsWV extends WheelSettings {

    private LinearCurve LinearCurve_TEMP_GEN_0;

    private LinearCurve LinearCurve_TEMP_GEN_1;

    static public final WheelSettingsWV T_01 = new WheelSettingsWV((byte) 1, (char) 1);

    static public final WheelSettingsWV T_02 = new WheelSettingsWV((byte) 1, (char) 1);

    static public final WheelSettingsWV T_03 = new WheelSettingsWV((byte) 1, (char) 1);

    public WheelSettingsWV() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new WheelSettingsWV();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public WheelSettingsWV(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public float get_mInertia() {
        return internal_native_get_mInertia((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return nativeObject->mInertia;
*/
    private static native float internal_native_get_mInertia(long this_addr);

    public void set_mInertia(float mInertia) {
        internal_native_set_mInertia((long) getNativeData().getCPointer(), mInertia);
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mInertia = mInertia;
*/
    private static native void internal_native_set_mInertia(long this_addr, float mInertia);

    public float get_mAngularDamping() {
        return internal_native_get_mAngularDamping((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return nativeObject->mAngularDamping;
*/
    private static native float internal_native_get_mAngularDamping(long this_addr);

    public void set_mAngularDamping(float mAngularDamping) {
        internal_native_set_mAngularDamping((long) getNativeData().getCPointer(), mAngularDamping);
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mAngularDamping = mAngularDamping;
*/
    private static native void internal_native_set_mAngularDamping(long this_addr, float mAngularDamping);

    public float get_mMaxSteerAngle() {
        return internal_native_get_mMaxSteerAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return nativeObject->mMaxSteerAngle;
*/
    private static native float internal_native_get_mMaxSteerAngle(long this_addr);

    public void set_mMaxSteerAngle(float mMaxSteerAngle) {
        internal_native_set_mMaxSteerAngle((long) getNativeData().getCPointer(), mMaxSteerAngle);
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mMaxSteerAngle = mMaxSteerAngle;
*/
    private static native void internal_native_set_mMaxSteerAngle(long this_addr, float mMaxSteerAngle);

    public LinearCurve get_mLongitudinalFriction() {
        long pointer = internal_native_get_mLongitudinalFriction((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (LinearCurve_TEMP_GEN_0 == null)
            LinearCurve_TEMP_GEN_0 = new LinearCurve((byte) 1, (char) 1);
        LinearCurve_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return LinearCurve_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return (jlong)&nativeObject->mLongitudinalFriction;
*/
    private static native long internal_native_get_mLongitudinalFriction(long this_addr);

    public void set_mLongitudinalFriction(LinearCurve mLongitudinalFriction) {
        internal_native_set_mLongitudinalFriction((long) getNativeData().getCPointer(), (long) (mLongitudinalFriction != null ? mLongitudinalFriction.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mLongitudinalFriction = *((LinearCurve*)mLongitudinalFriction_addr);
*/
    private static native void internal_native_set_mLongitudinalFriction(long this_addr, long mLongitudinalFriction_addr);

    public LinearCurve get_mLateralFriction() {
        long pointer = internal_native_get_mLateralFriction((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (LinearCurve_TEMP_GEN_1 == null)
            LinearCurve_TEMP_GEN_1 = new LinearCurve((byte) 1, (char) 1);
        LinearCurve_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return LinearCurve_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return (jlong)&nativeObject->mLateralFriction;
*/
    private static native long internal_native_get_mLateralFriction(long this_addr);

    public void set_mLateralFriction(LinearCurve mLateralFriction) {
        internal_native_set_mLateralFriction((long) getNativeData().getCPointer(), (long) (mLateralFriction != null ? mLateralFriction.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mLateralFriction = *((LinearCurve*)mLateralFriction_addr);
*/
    private static native void internal_native_set_mLateralFriction(long this_addr, long mLateralFriction_addr);

    public float get_mMaxBrakeTorque() {
        return internal_native_get_mMaxBrakeTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return nativeObject->mMaxBrakeTorque;
*/
    private static native float internal_native_get_mMaxBrakeTorque(long this_addr);

    public void set_mMaxBrakeTorque(float mMaxBrakeTorque) {
        internal_native_set_mMaxBrakeTorque((long) getNativeData().getCPointer(), mMaxBrakeTorque);
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mMaxBrakeTorque = mMaxBrakeTorque;
*/
    private static native void internal_native_set_mMaxBrakeTorque(long this_addr, float mMaxBrakeTorque);

    public float get_mMaxHandBrakeTorque() {
        return internal_native_get_mMaxHandBrakeTorque((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
return nativeObject->mMaxHandBrakeTorque;
*/
    private static native float internal_native_get_mMaxHandBrakeTorque(long this_addr);

    public void set_mMaxHandBrakeTorque(float mMaxHandBrakeTorque) {
        internal_native_set_mMaxHandBrakeTorque((long) getNativeData().getCPointer(), mMaxHandBrakeTorque);
    }

    /*[-JNI;-NATIVE]
WheelSettingsWV* nativeObject = (WheelSettingsWV*)this_addr;
nativeObject->mMaxHandBrakeTorque = mMaxHandBrakeTorque;
*/
    private static native void internal_native_set_mMaxHandBrakeTorque(long this_addr, float mMaxHandBrakeTorque);

    public static long native_create() {
        return internal_native_create();
    }

    public static float native_get_mInertia(long this_addr) {
        return internal_native_get_mInertia(this_addr);
    }

    public static void native_set_mInertia(long this_addr, float mInertia) {
        internal_native_set_mInertia(this_addr, mInertia);
    }

    public static float native_get_mAngularDamping(long this_addr) {
        return internal_native_get_mAngularDamping(this_addr);
    }

    public static void native_set_mAngularDamping(long this_addr, float mAngularDamping) {
        internal_native_set_mAngularDamping(this_addr, mAngularDamping);
    }

    public static float native_get_mMaxSteerAngle(long this_addr) {
        return internal_native_get_mMaxSteerAngle(this_addr);
    }

    public static void native_set_mMaxSteerAngle(long this_addr, float mMaxSteerAngle) {
        internal_native_set_mMaxSteerAngle(this_addr, mMaxSteerAngle);
    }

    public static long native_get_mLongitudinalFriction(long this_addr) {
        return internal_native_get_mLongitudinalFriction(this_addr);
    }

    public static void native_set_mLongitudinalFriction(long this_addr, long mLongitudinalFriction_addr) {
        internal_native_set_mLongitudinalFriction(this_addr, mLongitudinalFriction_addr);
    }

    public static long native_get_mLateralFriction(long this_addr) {
        return internal_native_get_mLateralFriction(this_addr);
    }

    public static void native_set_mLateralFriction(long this_addr, long mLateralFriction_addr) {
        internal_native_set_mLateralFriction(this_addr, mLateralFriction_addr);
    }

    public static float native_get_mMaxBrakeTorque(long this_addr) {
        return internal_native_get_mMaxBrakeTorque(this_addr);
    }

    public static void native_set_mMaxBrakeTorque(long this_addr, float mMaxBrakeTorque) {
        internal_native_set_mMaxBrakeTorque(this_addr, mMaxBrakeTorque);
    }

    public static float native_get_mMaxHandBrakeTorque(long this_addr) {
        return internal_native_get_mMaxHandBrakeTorque(this_addr);
    }

    public static void native_set_mMaxHandBrakeTorque(long this_addr, float mMaxHandBrakeTorque) {
        internal_native_set_mMaxHandBrakeTorque(this_addr, mMaxHandBrakeTorque);
    }
}
