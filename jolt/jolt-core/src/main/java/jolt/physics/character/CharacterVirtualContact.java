/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.character;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.physics.body.BodyID;
import jolt.physics.collision.shape.SubShapeID;
import jolt.physics.collision.PhysicsMaterial;

public class CharacterVirtualContact extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private BodyID BodyID_TEMP_GEN_0;

    private CharacterID CharacterID_TEMP_GEN_0;

    private SubShapeID SubShapeID_TEMP_GEN_0;

    private CharacterVirtual CharacterVirtual_TEMP_GEN_0;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    static public final CharacterVirtualContact T_01 = new CharacterVirtualContact((byte) 1, (char) 1);

    static public final CharacterVirtualContact T_02 = new CharacterVirtualContact((byte) 1, (char) 1);

    static public final CharacterVirtualContact T_03 = new CharacterVirtualContact((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CharacterVirtualContact(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public boolean IsSameBody(CharacterVirtualContact inOther) {
        return internal_native_IsSameBody((long) getNativeData().getCPointer(), (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->IsSameBody(*((CharacterVirtualContact* )inOther_addr));
*/
    private static native boolean internal_native_IsSameBody(long this_addr, long inOther_addr);

    public Vec3 get_mPosition() {
        long pointer = internal_native_get_mPosition((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mPosition;
*/
    private static native long internal_native_get_mPosition(long this_addr);

    public void set_mPosition(Vec3 mPosition) {
        internal_native_set_mPosition((long) getNativeData().getCPointer(), (long) (mPosition != null ? mPosition.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mPosition = *((Vec3*)mPosition_addr);
*/
    private static native void internal_native_set_mPosition(long this_addr, long mPosition_addr);

    public Vec3 get_mLinearVelocity() {
        long pointer = internal_native_get_mLinearVelocity((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mLinearVelocity;
*/
    private static native long internal_native_get_mLinearVelocity(long this_addr);

    public void set_mLinearVelocity(Vec3 mLinearVelocity) {
        internal_native_set_mLinearVelocity((long) getNativeData().getCPointer(), (long) (mLinearVelocity != null ? mLinearVelocity.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mLinearVelocity = *((Vec3*)mLinearVelocity_addr);
*/
    private static native void internal_native_set_mLinearVelocity(long this_addr, long mLinearVelocity_addr);

    public Vec3 get_mContactNormal() {
        long pointer = internal_native_get_mContactNormal((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mContactNormal;
*/
    private static native long internal_native_get_mContactNormal(long this_addr);

    public void set_mContactNormal(Vec3 mContactNormal) {
        internal_native_set_mContactNormal((long) getNativeData().getCPointer(), (long) (mContactNormal != null ? mContactNormal.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mContactNormal = *((Vec3*)mContactNormal_addr);
*/
    private static native void internal_native_set_mContactNormal(long this_addr, long mContactNormal_addr);

    public Vec3 get_mSurfaceNormal() {
        long pointer = internal_native_get_mSurfaceNormal((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mSurfaceNormal;
*/
    private static native long internal_native_get_mSurfaceNormal(long this_addr);

    public void set_mSurfaceNormal(Vec3 mSurfaceNormal) {
        internal_native_set_mSurfaceNormal((long) getNativeData().getCPointer(), (long) (mSurfaceNormal != null ? mSurfaceNormal.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mSurfaceNormal = *((Vec3*)mSurfaceNormal_addr);
*/
    private static native void internal_native_set_mSurfaceNormal(long this_addr, long mSurfaceNormal_addr);

    public float get_mDistance() {
        return internal_native_get_mDistance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mDistance;
*/
    private static native float internal_native_get_mDistance(long this_addr);

    public void set_mDistance(float mDistance) {
        internal_native_set_mDistance((long) getNativeData().getCPointer(), mDistance);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mDistance = mDistance;
*/
    private static native void internal_native_set_mDistance(long this_addr, float mDistance);

    public float get_mFraction() {
        return internal_native_get_mFraction((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mFraction;
*/
    private static native float internal_native_get_mFraction(long this_addr);

    public void set_mFraction(float mFraction) {
        internal_native_set_mFraction((long) getNativeData().getCPointer(), mFraction);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mFraction = mFraction;
*/
    private static native void internal_native_set_mFraction(long this_addr, float mFraction);

    public BodyID get_mBodyB() {
        long pointer = internal_native_get_mBodyB((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mBodyB;
*/
    private static native long internal_native_get_mBodyB(long this_addr);

    public void set_mBodyB(BodyID mBodyB) {
        internal_native_set_mBodyB((long) getNativeData().getCPointer(), (long) (mBodyB != null ? mBodyB.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mBodyB = *((BodyID*)mBodyB_addr);
*/
    private static native void internal_native_set_mBodyB(long this_addr, long mBodyB_addr);

    public CharacterID get_mCharacterIDB() {
        long pointer = internal_native_get_mCharacterIDB((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (CharacterID_TEMP_GEN_0 == null)
            CharacterID_TEMP_GEN_0 = new CharacterID((byte) 1, (char) 1);
        CharacterID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return CharacterID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mCharacterIDB;
*/
    private static native long internal_native_get_mCharacterIDB(long this_addr);

    public void set_mCharacterIDB(CharacterID mCharacterIDB) {
        internal_native_set_mCharacterIDB((long) getNativeData().getCPointer(), (long) (mCharacterIDB != null ? mCharacterIDB.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mCharacterIDB = *((CharacterID*)mCharacterIDB_addr);
*/
    private static native void internal_native_set_mCharacterIDB(long this_addr, long mCharacterIDB_addr);

    public SubShapeID get_mSubShapeIDB() {
        long pointer = internal_native_get_mSubShapeIDB((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (SubShapeID_TEMP_GEN_0 == null)
            SubShapeID_TEMP_GEN_0 = new SubShapeID((byte) 1, (char) 1);
        SubShapeID_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SubShapeID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jlong)&nativeObject->mSubShapeIDB;
*/
    private static native long internal_native_get_mSubShapeIDB(long this_addr);

    public void set_mSubShapeIDB(SubShapeID mSubShapeIDB) {
        internal_native_set_mSubShapeIDB((long) getNativeData().getCPointer(), (long) (mSubShapeIDB != null ? mSubShapeIDB.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mSubShapeIDB = *((SubShapeID*)mSubShapeIDB_addr);
*/
    private static native void internal_native_set_mSubShapeIDB(long this_addr, long mSubShapeIDB_addr);

    public int get_mMotionTypeB() {
        return internal_native_get_mMotionTypeB((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return (jint)nativeObject->mMotionTypeB;
*/
    private static native int internal_native_get_mMotionTypeB(long this_addr);

    public void set_mMotionTypeB(int mMotionTypeB) {
        internal_native_set_mMotionTypeB((long) getNativeData().getCPointer(), mMotionTypeB);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mMotionTypeB = (::EMotionType)mMotionTypeB;
*/
    private static native void internal_native_set_mMotionTypeB(long this_addr, int mMotionTypeB);

    public boolean get_mIsSensorB() {
        return internal_native_get_mIsSensorB((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mIsSensorB;
*/
    private static native boolean internal_native_get_mIsSensorB(long this_addr);

    public void set_mIsSensorB(boolean mIsSensorB) {
        internal_native_set_mIsSensorB((long) getNativeData().getCPointer(), mIsSensorB);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mIsSensorB = mIsSensorB;
*/
    private static native void internal_native_set_mIsSensorB(long this_addr, boolean mIsSensorB);

    public CharacterVirtual get_mCharacterB() {
        long pointer = internal_native_get_mCharacterB((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (CharacterVirtual_TEMP_GEN_0 == null)
            CharacterVirtual_TEMP_GEN_0 = new CharacterVirtual((byte) 1, (char) 1);
        CharacterVirtual_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return CharacterVirtual_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
const CharacterVirtual* attr = nativeObject->mCharacterB;
return (jlong)attr;
*/
    private static native long internal_native_get_mCharacterB(long this_addr);

    public void set_mCharacterB(CharacterVirtual mCharacterB) {
        internal_native_set_mCharacterB((long) getNativeData().getCPointer(), (long) (mCharacterB != null ? mCharacterB.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mCharacterB = (CharacterVirtual*)mCharacterB_addr;
*/
    private static native void internal_native_set_mCharacterB(long this_addr, long mCharacterB_addr);

    public long get_mUserData() {
        return internal_native_get_mUserData((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mUserData;
*/
    private static native long internal_native_get_mUserData(long this_addr);

    public void set_mUserData(long mUserData) {
        internal_native_set_mUserData((long) getNativeData().getCPointer(), mUserData);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mUserData = mUserData;
*/
    private static native void internal_native_set_mUserData(long this_addr, long mUserData);

    public PhysicsMaterial get_mMaterial() {
        long pointer = internal_native_get_mMaterial((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
const PhysicsMaterial* attr = nativeObject->mMaterial;
return (jlong)attr;
*/
    private static native long internal_native_get_mMaterial(long this_addr);

    public void set_mMaterial(PhysicsMaterial mMaterial) {
        internal_native_set_mMaterial((long) getNativeData().getCPointer(), (long) (mMaterial != null ? mMaterial.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mMaterial = (PhysicsMaterial*)mMaterial_addr;
*/
    private static native void internal_native_set_mMaterial(long this_addr, long mMaterial_addr);

    public boolean get_mHadCollision() {
        return internal_native_get_mHadCollision((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mHadCollision;
*/
    private static native boolean internal_native_get_mHadCollision(long this_addr);

    public void set_mHadCollision(boolean mHadCollision) {
        internal_native_set_mHadCollision((long) getNativeData().getCPointer(), mHadCollision);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mHadCollision = mHadCollision;
*/
    private static native void internal_native_set_mHadCollision(long this_addr, boolean mHadCollision);

    public boolean get_mWasDiscarded() {
        return internal_native_get_mWasDiscarded((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mWasDiscarded;
*/
    private static native boolean internal_native_get_mWasDiscarded(long this_addr);

    public void set_mWasDiscarded(boolean mWasDiscarded) {
        internal_native_set_mWasDiscarded((long) getNativeData().getCPointer(), mWasDiscarded);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mWasDiscarded = mWasDiscarded;
*/
    private static native void internal_native_set_mWasDiscarded(long this_addr, boolean mWasDiscarded);

    public boolean get_mCanPushCharacter() {
        return internal_native_get_mCanPushCharacter((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
return nativeObject->mCanPushCharacter;
*/
    private static native boolean internal_native_get_mCanPushCharacter(long this_addr);

    public void set_mCanPushCharacter(boolean mCanPushCharacter) {
        internal_native_set_mCanPushCharacter((long) getNativeData().getCPointer(), mCanPushCharacter);
    }

    /*[-JNI;-NATIVE]
CharacterVirtualContact* nativeObject = (CharacterVirtualContact*)this_addr;
nativeObject->mCanPushCharacter = mCanPushCharacter;
*/
    private static native void internal_native_set_mCanPushCharacter(long this_addr, boolean mCanPushCharacter);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static boolean native_IsSameBody(long this_addr, long inOther_addr) {
        return internal_native_IsSameBody(this_addr, inOther_addr);
    }

    public static long native_get_mPosition(long this_addr) {
        return internal_native_get_mPosition(this_addr);
    }

    public static void native_set_mPosition(long this_addr, long mPosition_addr) {
        internal_native_set_mPosition(this_addr, mPosition_addr);
    }

    public static long native_get_mLinearVelocity(long this_addr) {
        return internal_native_get_mLinearVelocity(this_addr);
    }

    public static void native_set_mLinearVelocity(long this_addr, long mLinearVelocity_addr) {
        internal_native_set_mLinearVelocity(this_addr, mLinearVelocity_addr);
    }

    public static long native_get_mContactNormal(long this_addr) {
        return internal_native_get_mContactNormal(this_addr);
    }

    public static void native_set_mContactNormal(long this_addr, long mContactNormal_addr) {
        internal_native_set_mContactNormal(this_addr, mContactNormal_addr);
    }

    public static long native_get_mSurfaceNormal(long this_addr) {
        return internal_native_get_mSurfaceNormal(this_addr);
    }

    public static void native_set_mSurfaceNormal(long this_addr, long mSurfaceNormal_addr) {
        internal_native_set_mSurfaceNormal(this_addr, mSurfaceNormal_addr);
    }

    public static float native_get_mDistance(long this_addr) {
        return internal_native_get_mDistance(this_addr);
    }

    public static void native_set_mDistance(long this_addr, float mDistance) {
        internal_native_set_mDistance(this_addr, mDistance);
    }

    public static float native_get_mFraction(long this_addr) {
        return internal_native_get_mFraction(this_addr);
    }

    public static void native_set_mFraction(long this_addr, float mFraction) {
        internal_native_set_mFraction(this_addr, mFraction);
    }

    public static long native_get_mBodyB(long this_addr) {
        return internal_native_get_mBodyB(this_addr);
    }

    public static void native_set_mBodyB(long this_addr, long mBodyB_addr) {
        internal_native_set_mBodyB(this_addr, mBodyB_addr);
    }

    public static long native_get_mCharacterIDB(long this_addr) {
        return internal_native_get_mCharacterIDB(this_addr);
    }

    public static void native_set_mCharacterIDB(long this_addr, long mCharacterIDB_addr) {
        internal_native_set_mCharacterIDB(this_addr, mCharacterIDB_addr);
    }

    public static long native_get_mSubShapeIDB(long this_addr) {
        return internal_native_get_mSubShapeIDB(this_addr);
    }

    public static void native_set_mSubShapeIDB(long this_addr, long mSubShapeIDB_addr) {
        internal_native_set_mSubShapeIDB(this_addr, mSubShapeIDB_addr);
    }

    public static int native_get_mMotionTypeB(long this_addr) {
        return internal_native_get_mMotionTypeB(this_addr);
    }

    public static void native_set_mMotionTypeB(long this_addr, int mMotionTypeB) {
        internal_native_set_mMotionTypeB(this_addr, mMotionTypeB);
    }

    public static boolean native_get_mIsSensorB(long this_addr) {
        return internal_native_get_mIsSensorB(this_addr);
    }

    public static void native_set_mIsSensorB(long this_addr, boolean mIsSensorB) {
        internal_native_set_mIsSensorB(this_addr, mIsSensorB);
    }

    public static long native_get_mCharacterB(long this_addr) {
        return internal_native_get_mCharacterB(this_addr);
    }

    public static void native_set_mCharacterB(long this_addr, long mCharacterB_addr) {
        internal_native_set_mCharacterB(this_addr, mCharacterB_addr);
    }

    public static long native_get_mUserData(long this_addr) {
        return internal_native_get_mUserData(this_addr);
    }

    public static void native_set_mUserData(long this_addr, long mUserData) {
        internal_native_set_mUserData(this_addr, mUserData);
    }

    public static long native_get_mMaterial(long this_addr) {
        return internal_native_get_mMaterial(this_addr);
    }

    public static void native_set_mMaterial(long this_addr, long mMaterial_addr) {
        internal_native_set_mMaterial(this_addr, mMaterial_addr);
    }

    public static boolean native_get_mHadCollision(long this_addr) {
        return internal_native_get_mHadCollision(this_addr);
    }

    public static void native_set_mHadCollision(long this_addr, boolean mHadCollision) {
        internal_native_set_mHadCollision(this_addr, mHadCollision);
    }

    public static boolean native_get_mWasDiscarded(long this_addr) {
        return internal_native_get_mWasDiscarded(this_addr);
    }

    public static void native_set_mWasDiscarded(long this_addr, boolean mWasDiscarded) {
        internal_native_set_mWasDiscarded(this_addr, mWasDiscarded);
    }

    public static boolean native_get_mCanPushCharacter(long this_addr) {
        return internal_native_get_mCanPushCharacter(this_addr);
    }

    public static void native_set_mCanPushCharacter(long this_addr, boolean mCanPushCharacter) {
        internal_native_set_mCanPushCharacter(this_addr, mCanPushCharacter);
    }
}
