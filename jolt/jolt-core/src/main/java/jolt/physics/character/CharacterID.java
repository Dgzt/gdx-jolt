/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.character;

import jolt.idl.IDLBase;

public class CharacterID extends IDLBase {

    static private CharacterID CharacterID_TEMP_STATIC_GEN_0;

    static public final CharacterID T_01 = new CharacterID((byte) 1, (char) 1);

    static public final CharacterID T_02 = new CharacterID((byte) 1, (char) 1);

    static public final CharacterID T_03 = new CharacterID((byte) 1, (char) 1);

    public CharacterID() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new CharacterID();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CharacterID(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterID* nativeObject = (CharacterID*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public int GetValue() {
        return internal_native_GetValue((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterID* nativeObject = (CharacterID*)this_addr;
return nativeObject->GetValue();
*/
    private static native int internal_native_GetValue(long this_addr);

    public boolean IsInvalid() {
        return internal_native_IsInvalid((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CharacterID* nativeObject = (CharacterID*)this_addr;
return nativeObject->IsInvalid();
*/
    private static native boolean internal_native_IsInvalid(long this_addr);

    public static CharacterID sNextCharacterID() {
        long pointer = internal_native_sNextCharacterID();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (CharacterID_TEMP_STATIC_GEN_0 == null)
            CharacterID_TEMP_STATIC_GEN_0 = new CharacterID((byte) 1, (char) 1);
        CharacterID_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return CharacterID_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static CharacterID copy_addr;
copy_addr = CharacterID::sNextCharacterID();
return (jlong)&copy_addr;*/
    private static native long internal_native_sNextCharacterID();

    public static void sSetNextCharacterID(int inNextValue) {
        internal_native_sSetNextCharacterID(inNextValue);
    }

    /*[-JNI;-NATIVE]
CharacterID::sSetNextCharacterID(inNextValue);
*/
    private static native void internal_native_sSetNextCharacterID(int inNextValue);

    public static long native_create() {
        return internal_native_create();
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static int native_GetValue(long this_addr) {
        return internal_native_GetValue(this_addr);
    }

    public static boolean native_IsInvalid(long this_addr) {
        return internal_native_IsInvalid(this_addr);
    }

    public static long native_sNextCharacterID() {
        return internal_native_sNextCharacterID();
    }

    public static void native_sSetNextCharacterID(int inNextValue) {
        internal_native_sSetNextCharacterID(inNextValue);
    }
}
