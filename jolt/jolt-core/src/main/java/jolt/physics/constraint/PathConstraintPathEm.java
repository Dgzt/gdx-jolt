/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraint;

import jolt.physics.constraints.PathConstraintPath;
import jolt.math.Vec3;

public class PathConstraintPathEm extends PathConstraintPath {

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    /*[-JNI;-NATIVE]
class PathConstraintPathJS : public PathConstraintPathEm {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID GetPathMaxFraction_ID = 0;
	inline static jmethodID GetClosestPointJF_ID = 0;
	inline static jmethodID GetPointOnPathFJJJJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(PathConstraintPathJS::jClassID == 0) {
		PathConstraintPathJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		PathConstraintPathJS::GetPathMaxFraction_ID = env->GetMethodID(jClassID, "internal_GetPathMaxFraction", "()F");
		PathConstraintPathJS::GetClosestPointJF_ID = env->GetMethodID(jClassID, "internal_GetClosestPoint", "(JF)F");
		PathConstraintPathJS::GetPointOnPathFJJJJ_ID = env->GetMethodID(jClassID, "internal_GetPointOnPath", "(FJJJJ)V");
	}
}
virtual float GetPathMaxFraction() const {
   return env->CallFloatMethod(obj, PathConstraintPathJS::GetPathMaxFraction_ID);
}
virtual float GetClosestPoint(const Vec3* inPosition, float inFractionHint) const {
   return env->CallFloatMethod(obj, PathConstraintPathJS::GetClosestPointJF_ID, (jlong)inPosition, inFractionHint);
}
virtual void GetPointOnPath(float inFraction, Vec3* outPathPosition, Vec3* outPathTangent, Vec3* outPathNormal, Vec3* outPathBinormal) const {
   env->CallVoidMethod(obj, PathConstraintPathJS::GetPointOnPathFJJJJ_ID, inFraction, (jlong)outPathPosition, (jlong)outPathTangent, (jlong)outPathNormal, (jlong)outPathBinormal);
}
};
*/
    @Deprecated()
    public PathConstraintPathEm(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PathConstraintPathJS* nativeObject = (PathConstraintPathJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public PathConstraintPathEm() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(getNativeData().getCPointer());
    }

    protected float GetPathMaxFraction() {
        return 0;
    }

    private float internal_GetPathMaxFraction() {
        return GetPathMaxFraction();
    }

    protected float GetClosestPoint(Vec3 inPosition, float inFractionHint) {
        return 0;
    }

    private float internal_GetClosestPoint(long inPosition, float inFractionHint) {
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.getNativeData().reset(inPosition, false);
        return GetClosestPoint(Vec3_TEMP_STATIC_GEN_0, inFractionHint);
    }

    protected void GetPointOnPath(float inFraction, Vec3 outPathPosition, Vec3 outPathTangent, Vec3 outPathNormal, Vec3 outPathBinormal) {
    }

    private void internal_GetPointOnPath(float inFraction, long outPathPosition, long outPathTangent, long outPathNormal, long outPathBinormal) {
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.getNativeData().reset(outPathPosition, false);
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.getNativeData().reset(outPathTangent, false);
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.getNativeData().reset(outPathNormal, false);
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.getNativeData().reset(outPathBinormal, false);
        GetPointOnPath(inFraction, Vec3_TEMP_STATIC_GEN_1, Vec3_TEMP_STATIC_GEN_2, Vec3_TEMP_STATIC_GEN_3, Vec3_TEMP_STATIC_GEN_4);
    }

    /*[-JNI;-NATIVE]
return (jlong)new PathConstraintPathJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
PathConstraintPathJS* nativeObject = (PathConstraintPathJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
