/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import jolt.math.Vec3;
import jolt.math.ArrayFloat;
import jolt.math.ArrayUint8;
import jolt.physics.collision.PhysicsMaterialList;

public class HeightFieldShapeSettings extends ShapeSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private ArrayFloat ArrayFloat_TEMP_GEN_0;

    private ArrayUint8 ArrayUint8_TEMP_GEN_0;

    private PhysicsMaterialList PhysicsMaterialList_TEMP_GEN_0;

    static public final HeightFieldShapeSettings T_01 = new HeightFieldShapeSettings((byte) 1, (char) 1);

    static public final HeightFieldShapeSettings T_02 = new HeightFieldShapeSettings((byte) 1, (char) 1);

    static public final HeightFieldShapeSettings T_03 = new HeightFieldShapeSettings((byte) 1, (char) 1);

    public HeightFieldShapeSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new HeightFieldShapeSettings();
*/
    private static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public HeightFieldShapeSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public Vec3 get_mOffset() {
        long pointer = internal_native_get_mOffset((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return (jlong)&nativeObject->mOffset;
*/
    private static native long internal_native_get_mOffset(long this_addr);

    public void set_mOffset(Vec3 mOffset) {
        internal_native_set_mOffset((long) getNativeData().getCPointer(), (long) (mOffset != null ? mOffset.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mOffset = *((Vec3*)mOffset_addr);
*/
    private static native void internal_native_set_mOffset(long this_addr, long mOffset_addr);

    public Vec3 get_mScale() {
        long pointer = internal_native_get_mScale((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return (jlong)&nativeObject->mScale;
*/
    private static native long internal_native_get_mScale(long this_addr);

    public void set_mScale(Vec3 mScale) {
        internal_native_set_mScale((long) getNativeData().getCPointer(), (long) (mScale != null ? mScale.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mScale = *((Vec3*)mScale_addr);
*/
    private static native void internal_native_set_mScale(long this_addr, long mScale_addr);

    public int get_mSampleCount() {
        return internal_native_get_mSampleCount((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mSampleCount;
*/
    private static native int internal_native_get_mSampleCount(long this_addr);

    public void set_mSampleCount(int mSampleCount) {
        internal_native_set_mSampleCount((long) getNativeData().getCPointer(), mSampleCount);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mSampleCount = mSampleCount;
*/
    private static native void internal_native_set_mSampleCount(long this_addr, int mSampleCount);

    public float get_mMinHeightValue() {
        return internal_native_get_mMinHeightValue((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mMinHeightValue;
*/
    private static native float internal_native_get_mMinHeightValue(long this_addr);

    public void set_mMinHeightValue(float mMinHeightValue) {
        internal_native_set_mMinHeightValue((long) getNativeData().getCPointer(), mMinHeightValue);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mMinHeightValue = mMinHeightValue;
*/
    private static native void internal_native_set_mMinHeightValue(long this_addr, float mMinHeightValue);

    public float get_mMaxHeightValue() {
        return internal_native_get_mMaxHeightValue((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mMaxHeightValue;
*/
    private static native float internal_native_get_mMaxHeightValue(long this_addr);

    public void set_mMaxHeightValue(float mMaxHeightValue) {
        internal_native_set_mMaxHeightValue((long) getNativeData().getCPointer(), mMaxHeightValue);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mMaxHeightValue = mMaxHeightValue;
*/
    private static native void internal_native_set_mMaxHeightValue(long this_addr, float mMaxHeightValue);

    public int get_mMaterialsCapacity() {
        return internal_native_get_mMaterialsCapacity((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mMaterialsCapacity;
*/
    private static native int internal_native_get_mMaterialsCapacity(long this_addr);

    public void set_mMaterialsCapacity(int mMaterialsCapacity) {
        internal_native_set_mMaterialsCapacity((long) getNativeData().getCPointer(), mMaterialsCapacity);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mMaterialsCapacity = mMaterialsCapacity;
*/
    private static native void internal_native_set_mMaterialsCapacity(long this_addr, int mMaterialsCapacity);

    public int get_mBlockSize() {
        return internal_native_get_mBlockSize((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mBlockSize;
*/
    private static native int internal_native_get_mBlockSize(long this_addr);

    public void set_mBlockSize(int mBlockSize) {
        internal_native_set_mBlockSize((long) getNativeData().getCPointer(), mBlockSize);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mBlockSize = mBlockSize;
*/
    private static native void internal_native_set_mBlockSize(long this_addr, int mBlockSize);

    public int get_mBitsPerSample() {
        return internal_native_get_mBitsPerSample((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mBitsPerSample;
*/
    private static native int internal_native_get_mBitsPerSample(long this_addr);

    public void set_mBitsPerSample(int mBitsPerSample) {
        internal_native_set_mBitsPerSample((long) getNativeData().getCPointer(), mBitsPerSample);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mBitsPerSample = mBitsPerSample;
*/
    private static native void internal_native_set_mBitsPerSample(long this_addr, int mBitsPerSample);

    public ArrayFloat get_mHeightSamples() {
        long pointer = internal_native_get_mHeightSamples((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArrayFloat_TEMP_GEN_0 == null)
            ArrayFloat_TEMP_GEN_0 = new ArrayFloat((byte) 1, (char) 1);
        ArrayFloat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArrayFloat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return (jlong)&nativeObject->mHeightSamples;
*/
    private static native long internal_native_get_mHeightSamples(long this_addr);

    public void set_mHeightSamples(ArrayFloat mHeightSamples) {
        internal_native_set_mHeightSamples((long) getNativeData().getCPointer(), (long) (mHeightSamples != null ? mHeightSamples.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mHeightSamples = *((ArrayFloat*)mHeightSamples_addr);
*/
    private static native void internal_native_set_mHeightSamples(long this_addr, long mHeightSamples_addr);

    public ArrayUint8 get_mMaterialIndices() {
        long pointer = internal_native_get_mMaterialIndices((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (ArrayUint8_TEMP_GEN_0 == null)
            ArrayUint8_TEMP_GEN_0 = new ArrayUint8((byte) 1, (char) 1);
        ArrayUint8_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ArrayUint8_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return (jlong)&nativeObject->mMaterialIndices;
*/
    private static native long internal_native_get_mMaterialIndices(long this_addr);

    public void set_mMaterialIndices(ArrayUint8 mMaterialIndices) {
        internal_native_set_mMaterialIndices((long) getNativeData().getCPointer(), (long) (mMaterialIndices != null ? mMaterialIndices.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mMaterialIndices = *((ArrayUint8*)mMaterialIndices_addr);
*/
    private static native void internal_native_set_mMaterialIndices(long this_addr, long mMaterialIndices_addr);

    public PhysicsMaterialList get_mMaterials() {
        long pointer = internal_native_get_mMaterials((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (PhysicsMaterialList_TEMP_GEN_0 == null)
            PhysicsMaterialList_TEMP_GEN_0 = new PhysicsMaterialList((byte) 1, (char) 1);
        PhysicsMaterialList_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return PhysicsMaterialList_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return (jlong)&nativeObject->mMaterials;
*/
    private static native long internal_native_get_mMaterials(long this_addr);

    public void set_mMaterials(PhysicsMaterialList mMaterials) {
        internal_native_set_mMaterials((long) getNativeData().getCPointer(), (long) (mMaterials != null ? mMaterials.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mMaterials = *((PhysicsMaterialList*)mMaterials_addr);
*/
    private static native void internal_native_set_mMaterials(long this_addr, long mMaterials_addr);

    public float get_mActiveEdgeCosThresholdAngle() {
        return internal_native_get_mActiveEdgeCosThresholdAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
return nativeObject->mActiveEdgeCosThresholdAngle;
*/
    private static native float internal_native_get_mActiveEdgeCosThresholdAngle(long this_addr);

    public void set_mActiveEdgeCosThresholdAngle(float mActiveEdgeCosThresholdAngle) {
        internal_native_set_mActiveEdgeCosThresholdAngle((long) getNativeData().getCPointer(), mActiveEdgeCosThresholdAngle);
    }

    /*[-JNI;-NATIVE]
HeightFieldShapeSettings* nativeObject = (HeightFieldShapeSettings*)this_addr;
nativeObject->mActiveEdgeCosThresholdAngle = mActiveEdgeCosThresholdAngle;
*/
    private static native void internal_native_set_mActiveEdgeCosThresholdAngle(long this_addr, float mActiveEdgeCosThresholdAngle);

    public static long native_create() {
        return internal_native_create();
    }

    public static long native_get_mOffset(long this_addr) {
        return internal_native_get_mOffset(this_addr);
    }

    public static void native_set_mOffset(long this_addr, long mOffset_addr) {
        internal_native_set_mOffset(this_addr, mOffset_addr);
    }

    public static long native_get_mScale(long this_addr) {
        return internal_native_get_mScale(this_addr);
    }

    public static void native_set_mScale(long this_addr, long mScale_addr) {
        internal_native_set_mScale(this_addr, mScale_addr);
    }

    public static int native_get_mSampleCount(long this_addr) {
        return internal_native_get_mSampleCount(this_addr);
    }

    public static void native_set_mSampleCount(long this_addr, int mSampleCount) {
        internal_native_set_mSampleCount(this_addr, mSampleCount);
    }

    public static float native_get_mMinHeightValue(long this_addr) {
        return internal_native_get_mMinHeightValue(this_addr);
    }

    public static void native_set_mMinHeightValue(long this_addr, float mMinHeightValue) {
        internal_native_set_mMinHeightValue(this_addr, mMinHeightValue);
    }

    public static float native_get_mMaxHeightValue(long this_addr) {
        return internal_native_get_mMaxHeightValue(this_addr);
    }

    public static void native_set_mMaxHeightValue(long this_addr, float mMaxHeightValue) {
        internal_native_set_mMaxHeightValue(this_addr, mMaxHeightValue);
    }

    public static int native_get_mMaterialsCapacity(long this_addr) {
        return internal_native_get_mMaterialsCapacity(this_addr);
    }

    public static void native_set_mMaterialsCapacity(long this_addr, int mMaterialsCapacity) {
        internal_native_set_mMaterialsCapacity(this_addr, mMaterialsCapacity);
    }

    public static int native_get_mBlockSize(long this_addr) {
        return internal_native_get_mBlockSize(this_addr);
    }

    public static void native_set_mBlockSize(long this_addr, int mBlockSize) {
        internal_native_set_mBlockSize(this_addr, mBlockSize);
    }

    public static int native_get_mBitsPerSample(long this_addr) {
        return internal_native_get_mBitsPerSample(this_addr);
    }

    public static void native_set_mBitsPerSample(long this_addr, int mBitsPerSample) {
        internal_native_set_mBitsPerSample(this_addr, mBitsPerSample);
    }

    public static long native_get_mHeightSamples(long this_addr) {
        return internal_native_get_mHeightSamples(this_addr);
    }

    public static void native_set_mHeightSamples(long this_addr, long mHeightSamples_addr) {
        internal_native_set_mHeightSamples(this_addr, mHeightSamples_addr);
    }

    public static long native_get_mMaterialIndices(long this_addr) {
        return internal_native_get_mMaterialIndices(this_addr);
    }

    public static void native_set_mMaterialIndices(long this_addr, long mMaterialIndices_addr) {
        internal_native_set_mMaterialIndices(this_addr, mMaterialIndices_addr);
    }

    public static long native_get_mMaterials(long this_addr) {
        return internal_native_get_mMaterials(this_addr);
    }

    public static void native_set_mMaterials(long this_addr, long mMaterials_addr) {
        internal_native_set_mMaterials(this_addr, mMaterials_addr);
    }

    public static float native_get_mActiveEdgeCosThresholdAngle(long this_addr) {
        return internal_native_get_mActiveEdgeCosThresholdAngle(this_addr);
    }

    public static void native_set_mActiveEdgeCosThresholdAngle(long this_addr, float mActiveEdgeCosThresholdAngle) {
        internal_native_set_mActiveEdgeCosThresholdAngle(this_addr, mActiveEdgeCosThresholdAngle);
    }
}
