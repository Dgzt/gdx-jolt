/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import jolt.geometry.Plane;
import jolt.physics.collision.PhysicsMaterial;

public class PlaneShapeSettings extends ShapeSettings {

    private Plane Plane_TEMP_GEN_0;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    static public final PlaneShapeSettings T_01 = new PlaneShapeSettings((byte) 1, (char) 1);

    static public final PlaneShapeSettings T_02 = new PlaneShapeSettings((byte) 1, (char) 1);

    static public final PlaneShapeSettings T_03 = new PlaneShapeSettings((byte) 1, (char) 1);

    public PlaneShapeSettings(Plane inPlane, PhysicsMaterial inMaterial, float inHalfExtent) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_Plane_PhysicsMaterial_float((long) (inPlane != null ? inPlane.getNativeData().getCPointer() : 0), (long) (inMaterial != null ? inMaterial.getNativeData().getCPointer() : 0), inHalfExtent);
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new PlaneShapeSettings(*((Plane* )inPlane_addr), (PhysicsMaterial* )inMaterial_addr, (float)inHalfExtent);
*/
    private static native long internal_native_create_Plane_PhysicsMaterial_float(long inPlane_addr, long inMaterial_addr, float inHalfExtent);

    public PlaneShapeSettings(Plane inPlane, PhysicsMaterial inMaterial) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_Plane_PhysicsMaterial((long) (inPlane != null ? inPlane.getNativeData().getCPointer() : 0), (long) (inMaterial != null ? inMaterial.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new PlaneShapeSettings(*((Plane* )inPlane_addr), (PhysicsMaterial* )inMaterial_addr);
*/
    private static native long internal_native_create_Plane_PhysicsMaterial(long inPlane_addr, long inMaterial_addr);

    public PlaneShapeSettings(Plane inPlane) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_Plane((long) (inPlane != null ? inPlane.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new PlaneShapeSettings(*((Plane* )inPlane_addr));
*/
    private static native long internal_native_create_Plane(long inPlane_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public PlaneShapeSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public Plane get_mPlane() {
        long pointer = internal_native_get_mPlane((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Plane_TEMP_GEN_0 == null)
            Plane_TEMP_GEN_0 = new Plane((byte) 1, (char) 1);
        Plane_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Plane_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
return (jlong)&nativeObject->mPlane;
*/
    private static native long internal_native_get_mPlane(long this_addr);

    public void set_mPlane(Plane mPlane) {
        internal_native_set_mPlane((long) getNativeData().getCPointer(), (long) (mPlane != null ? mPlane.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
nativeObject->mPlane = *((Plane*)mPlane_addr);
*/
    private static native void internal_native_set_mPlane(long this_addr, long mPlane_addr);

    public PhysicsMaterial get_mMaterial() {
        long pointer = internal_native_get_mMaterial((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
const PhysicsMaterial* attr = nativeObject->mMaterial;
return (jlong)attr;
*/
    private static native long internal_native_get_mMaterial(long this_addr);

    public void set_mMaterial(PhysicsMaterial mMaterial) {
        internal_native_set_mMaterial((long) getNativeData().getCPointer(), (long) (mMaterial != null ? mMaterial.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
nativeObject->mMaterial = (PhysicsMaterial*)mMaterial_addr;
*/
    private static native void internal_native_set_mMaterial(long this_addr, long mMaterial_addr);

    public float get_mHalfExtent() {
        return internal_native_get_mHalfExtent((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
return nativeObject->mHalfExtent;
*/
    private static native float internal_native_get_mHalfExtent(long this_addr);

    public void set_mHalfExtent(float mHalfExtent) {
        internal_native_set_mHalfExtent((long) getNativeData().getCPointer(), mHalfExtent);
    }

    /*[-JNI;-NATIVE]
PlaneShapeSettings* nativeObject = (PlaneShapeSettings*)this_addr;
nativeObject->mHalfExtent = mHalfExtent;
*/
    private static native void internal_native_set_mHalfExtent(long this_addr, float mHalfExtent);

    public static long native_create_Plane_PhysicsMaterial_float(long inPlane_addr, long inMaterial_addr, float inHalfExtent) {
        return internal_native_create_Plane_PhysicsMaterial_float(inPlane_addr, inMaterial_addr, inHalfExtent);
    }

    public static long native_create_Plane_PhysicsMaterial(long inPlane_addr, long inMaterial_addr) {
        return internal_native_create_Plane_PhysicsMaterial(inPlane_addr, inMaterial_addr);
    }

    public static long native_create_Plane(long inPlane_addr) {
        return internal_native_create_Plane(inPlane_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_get_mPlane(long this_addr) {
        return internal_native_get_mPlane(this_addr);
    }

    public static void native_set_mPlane(long this_addr, long mPlane_addr) {
        internal_native_set_mPlane(this_addr, mPlane_addr);
    }

    public static long native_get_mMaterial(long this_addr) {
        return internal_native_get_mMaterial(this_addr);
    }

    public static void native_set_mMaterial(long this_addr, long mMaterial_addr) {
        internal_native_set_mMaterial(this_addr, mMaterial_addr);
    }

    public static float native_get_mHalfExtent(long this_addr) {
        return internal_native_get_mHalfExtent(this_addr);
    }

    public static void native_set_mHalfExtent(long this_addr, float mHalfExtent) {
        internal_native_set_mHalfExtent(this_addr, mHalfExtent);
    }
}
