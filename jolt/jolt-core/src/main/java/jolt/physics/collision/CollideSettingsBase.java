/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.enums.EActiveEdgeMode;
import jolt.enums.ECollectFacesMode;
import jolt.math.Vec3;

public class CollideSettingsBase extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    static public final CollideSettingsBase T_01 = new CollideSettingsBase((byte) 1, (char) 1);

    static public final CollideSettingsBase T_02 = new CollideSettingsBase((byte) 1, (char) 1);

    static public final CollideSettingsBase T_03 = new CollideSettingsBase((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CollideSettingsBase(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public EActiveEdgeMode get_mActiveEdgeMode() {
        int value = internal_native_get_mActiveEdgeMode((long) getNativeData().getCPointer());
        return EActiveEdgeMode.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
return (jint)nativeObject->mActiveEdgeMode;
*/
    public static native int internal_native_get_mActiveEdgeMode(long this_addr);

    public void set_mActiveEdgeMode(EActiveEdgeMode mActiveEdgeMode) {
        internal_native_set_mActiveEdgeMode((long) getNativeData().getCPointer(), (long) (mActiveEdgeMode != null ? mActiveEdgeMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
nativeObject->mActiveEdgeMode = (::EActiveEdgeMode)mActiveEdgeMode;
*/
    public static native void internal_native_set_mActiveEdgeMode(long this_addr, long mActiveEdgeMode);

    public ECollectFacesMode get_mCollectFacesMode() {
        int value = internal_native_get_mCollectFacesMode((long) getNativeData().getCPointer());
        return ECollectFacesMode.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
return (jint)nativeObject->mCollectFacesMode;
*/
    public static native int internal_native_get_mCollectFacesMode(long this_addr);

    public void set_mCollectFacesMode(ECollectFacesMode mCollectFacesMode) {
        internal_native_set_mCollectFacesMode((long) getNativeData().getCPointer(), (long) (mCollectFacesMode != null ? mCollectFacesMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
nativeObject->mCollectFacesMode = (::ECollectFacesMode)mCollectFacesMode;
*/
    public static native void internal_native_set_mCollectFacesMode(long this_addr, long mCollectFacesMode);

    public float get_mCollisionTolerance() {
        return internal_native_get_mCollisionTolerance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
return nativeObject->mCollisionTolerance;
*/
    public static native float internal_native_get_mCollisionTolerance(long this_addr);

    public void set_mCollisionTolerance(float mCollisionTolerance) {
        internal_native_set_mCollisionTolerance((long) getNativeData().getCPointer(), mCollisionTolerance);
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
nativeObject->mCollisionTolerance = mCollisionTolerance;
*/
    public static native void internal_native_set_mCollisionTolerance(long this_addr, float mCollisionTolerance);

    public float get_mPenetrationTolerance() {
        return internal_native_get_mPenetrationTolerance((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
return nativeObject->mPenetrationTolerance;
*/
    public static native float internal_native_get_mPenetrationTolerance(long this_addr);

    public void set_mPenetrationTolerance(float mPenetrationTolerance) {
        internal_native_set_mPenetrationTolerance((long) getNativeData().getCPointer(), mPenetrationTolerance);
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
nativeObject->mPenetrationTolerance = mPenetrationTolerance;
*/
    public static native void internal_native_set_mPenetrationTolerance(long this_addr, float mPenetrationTolerance);

    public Vec3 get_mActiveEdgeMovementDirection() {
        long pointer = internal_native_get_mActiveEdgeMovementDirection((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
return (jlong)&nativeObject->mActiveEdgeMovementDirection;
*/
    public static native long internal_native_get_mActiveEdgeMovementDirection(long this_addr);

    public void set_mActiveEdgeMovementDirection(Vec3 mActiveEdgeMovementDirection) {
        internal_native_set_mActiveEdgeMovementDirection((long) getNativeData().getCPointer(), (long) (mActiveEdgeMovementDirection != null ? mActiveEdgeMovementDirection.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CollideSettingsBase* nativeObject = (CollideSettingsBase*)this_addr;
nativeObject->mActiveEdgeMovementDirection = *((Vec3*)mActiveEdgeMovementDirection_addr);
*/
    public static native void internal_native_set_mActiveEdgeMovementDirection(long this_addr, long mActiveEdgeMovementDirection_addr);
}
