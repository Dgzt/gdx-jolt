/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import jolt.idl.IDLBase;
import jolt.idl.helper.IDLString;
import jolt.Shape;

public class ShapeResult extends IDLBase {

    private IDLString IDLString_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    static public final ShapeResult T_01 = new ShapeResult((byte) 1, (char) 1);

    static public final ShapeResult T_02 = new ShapeResult((byte) 1, (char) 1);

    static public final ShapeResult T_03 = new ShapeResult((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public ShapeResult(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public boolean IsValid() {
        return internal_native_IsValid((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
return nativeObject->IsValid();
*/
    private static native boolean internal_native_IsValid(long this_addr);

    public boolean HasError() {
        return internal_native_HasError((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
return nativeObject->HasError();
*/
    private static native boolean internal_native_HasError(long this_addr);

    public IDLString GetError() {
        long pointer = internal_native_GetError((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (IDLString_TEMP_GEN_0 == null)
            IDLString_TEMP_GEN_0 = new IDLString((byte) 1, (char) 1);
        IDLString_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return IDLString_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
return (jlong)&nativeObject->GetError();
*/
    private static native long internal_native_GetError(long this_addr);

    public Shape Get() {
        long pointer = internal_native_Get((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
Shape* obj = nativeObject->Get();
return (jlong)obj;
*/
    private static native long internal_native_Get(long this_addr);

    public void Clear() {
        internal_native_Clear((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
Shape::ShapeResult* nativeObject = (Shape::ShapeResult*)this_addr;
nativeObject->Clear();
*/
    private static native void internal_native_Clear(long this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static boolean native_IsValid(long this_addr) {
        return internal_native_IsValid(this_addr);
    }

    public static boolean native_HasError(long this_addr) {
        return internal_native_HasError(this_addr);
    }

    public static long native_GetError(long this_addr) {
        return internal_native_GetError(this_addr);
    }

    public static long native_Get(long this_addr) {
        return internal_native_Get(this_addr);
    }

    public static void native_Clear(long this_addr) {
        internal_native_Clear(this_addr);
    }
}
