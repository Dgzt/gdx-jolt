/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Mat44;

public class RayCast extends IDLBase {

    private RayCast RayCast_TEMP_GEN_0;

    private RayCast RayCast_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    static public final RayCast T_01 = new RayCast((byte) 1, (char) 1);

    static public final RayCast T_02 = new RayCast((byte) 1, (char) 1);

    static public final RayCast T_03 = new RayCast((byte) 1, (char) 1);

    public RayCast() {
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RayCast();
*/
    private static native long internal_native_create();

    public RayCast(Vec3 inOrigin, Vec3 inDirection) {
        long addr = internal_native_create_Vec3_Vec3((long) (inOrigin != null ? inOrigin.getNativeData().getCPointer() : 0), (long) (inDirection != null ? inDirection.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RayCast(*((Vec3* )inOrigin_addr), *((Vec3* )inDirection_addr));
*/
    private static native long internal_native_create_Vec3_Vec3(long inOrigin_addr, long inDirection_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RayCast(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
delete nativeObject;
*/
    private static native void internal_native_deleteNative(long this_addr);

    public RayCast Transformed(Mat44 inTransform) {
        long pointer = internal_native_Transformed((long) getNativeData().getCPointer(), (long) (inTransform != null ? inTransform.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (RayCast_TEMP_GEN_0 == null)
            RayCast_TEMP_GEN_0 = new RayCast((byte) 1, (char) 1);
        RayCast_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return RayCast_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
static RayCast copy_addr;
copy_addr = nativeObject->Transformed(*((Mat44* )inTransform_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_Transformed(long this_addr, long inTransform_addr);

    public RayCast Translated(Vec3 inTranslation) {
        long pointer = internal_native_Translated((long) getNativeData().getCPointer(), (long) (inTranslation != null ? inTranslation.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (RayCast_TEMP_GEN_1 == null)
            RayCast_TEMP_GEN_1 = new RayCast((byte) 1, (char) 1);
        RayCast_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return RayCast_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
static RayCast copy_addr;
copy_addr = nativeObject->Translated(*((Vec3* )inTranslation_addr));
return (jlong)&copy_addr;*/
    private static native long internal_native_Translated(long this_addr, long inTranslation_addr);

    public Vec3 GetPointOnRay(float inFraction) {
        long pointer = internal_native_GetPointOnRay((long) getNativeData().getCPointer(), inFraction);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPointOnRay((float)inFraction);
return (jlong)&copy_addr;*/
    private static native long internal_native_GetPointOnRay(long this_addr, float inFraction);

    public Vec3 get_mOrigin() {
        long pointer = internal_native_get_mOrigin((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
return (jlong)&nativeObject->mOrigin;
*/
    private static native long internal_native_get_mOrigin(long this_addr);

    public void set_mOrigin(Vec3 mOrigin) {
        internal_native_set_mOrigin((long) getNativeData().getCPointer(), (long) (mOrigin != null ? mOrigin.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
nativeObject->mOrigin = *((Vec3*)mOrigin_addr);
*/
    private static native void internal_native_set_mOrigin(long this_addr, long mOrigin_addr);

    public Vec3 get_mDirection() {
        long pointer = internal_native_get_mDirection((long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
return (jlong)&nativeObject->mDirection;
*/
    private static native long internal_native_get_mDirection(long this_addr);

    public void set_mDirection(Vec3 mDirection) {
        internal_native_set_mDirection((long) getNativeData().getCPointer(), (long) (mDirection != null ? mDirection.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
RayCast* nativeObject = (RayCast*)this_addr;
nativeObject->mDirection = *((Vec3*)mDirection_addr);
*/
    private static native void internal_native_set_mDirection(long this_addr, long mDirection_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static long native_create_Vec3_Vec3(long inOrigin_addr, long inDirection_addr) {
        return internal_native_create_Vec3_Vec3(inOrigin_addr, inDirection_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative(this_addr);
    }

    public static long native_Transformed(long this_addr, long inTransform_addr) {
        return internal_native_Transformed(this_addr, inTransform_addr);
    }

    public static long native_Translated(long this_addr, long inTranslation_addr) {
        return internal_native_Translated(this_addr, inTranslation_addr);
    }

    public static long native_GetPointOnRay(long this_addr, float inFraction) {
        return internal_native_GetPointOnRay(this_addr, inFraction);
    }

    public static long native_get_mOrigin(long this_addr) {
        return internal_native_get_mOrigin(this_addr);
    }

    public static void native_set_mOrigin(long this_addr, long mOrigin_addr) {
        internal_native_set_mOrigin(this_addr, mOrigin_addr);
    }

    public static long native_get_mDirection(long this_addr) {
        return internal_native_get_mDirection(this_addr);
    }

    public static void native_set_mDirection(long this_addr, long mDirection_addr) {
        internal_native_set_mDirection(this_addr, mDirection_addr);
    }
}
