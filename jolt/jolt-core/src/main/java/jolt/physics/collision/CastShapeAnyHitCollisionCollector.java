/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.physics.softbody.CastShapeCollector;
import jolt.physics.collision.shape.ShapeCastResult;

public class CastShapeAnyHitCollisionCollector extends CastShapeCollector {

    private ShapeCastResult ShapeCastResult_TEMP_GEN_0;

    static public final CastShapeAnyHitCollisionCollector T_01 = new CastShapeAnyHitCollisionCollector((byte) 1, (char) 1);

    static public final CastShapeAnyHitCollisionCollector T_02 = new CastShapeAnyHitCollisionCollector((byte) 1, (char) 1);

    static public final CastShapeAnyHitCollisionCollector T_03 = new CastShapeAnyHitCollisionCollector((byte) 1, (char) 1);

    public CastShapeAnyHitCollisionCollector() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new CastShapeAnyHitCollisionCollector();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CastShapeAnyHitCollisionCollector(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeAnyHitCollisionCollector* nativeObject = (CastShapeAnyHitCollisionCollector*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean HadHit() {
        return internal_native_HadHit((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
CastShapeAnyHitCollisionCollector* nativeObject = (CastShapeAnyHitCollisionCollector*)this_addr;
return nativeObject->HadHit();
*/
    public static native boolean internal_native_HadHit(long this_addr);

    public ShapeCastResult get_mHit() {
        long pointer = internal_native_get_mHit((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (ShapeCastResult_TEMP_GEN_0 == null)
            ShapeCastResult_TEMP_GEN_0 = new ShapeCastResult((byte) 1, (char) 1);
        ShapeCastResult_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return ShapeCastResult_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CastShapeAnyHitCollisionCollector* nativeObject = (CastShapeAnyHitCollisionCollector*)this_addr;
return (jlong)&nativeObject->mHit;
*/
    public static native long internal_native_get_mHit(long this_addr);

    public void set_mHit(ShapeCastResult mHit) {
        internal_native_set_mHit((long) getNativeData().getCPointer(), (long) (mHit != null ? mHit.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
CastShapeAnyHitCollisionCollector* nativeObject = (CastShapeAnyHitCollisionCollector*)this_addr;
nativeObject->mHit = *((ShapeCastResult*)mHit_addr);
*/
    public static native void internal_native_set_mHit(long this_addr, long mHit_addr);
}
