/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import jolt.geometry.TriangleList;
import jolt.physics.collision.PhysicsMaterialList;
import jolt.math.VertexList;
import jolt.geometry.IndexedTriangleList;
import jolt.enums.MeshShapeSettings_EBuildQuality;

public class MeshShapeSettings extends ShapeSettings {

    private VertexList VertexList_TEMP_GEN_0;

    private IndexedTriangleList IndexedTriangleList_TEMP_GEN_0;

    private PhysicsMaterialList PhysicsMaterialList_TEMP_GEN_0;

    static public final MeshShapeSettings T_01 = new MeshShapeSettings((byte) 1, (char) 1);

    static public final MeshShapeSettings T_02 = new MeshShapeSettings((byte) 1, (char) 1);

    static public final MeshShapeSettings T_03 = new MeshShapeSettings((byte) 1, (char) 1);

    public MeshShapeSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MeshShapeSettings();
*/
    public static native long internal_native_create();

    public MeshShapeSettings(TriangleList inTriangleList, PhysicsMaterialList inMaterialList) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_TriangleList_PhysicsMaterialList((long) (inTriangleList != null ? inTriangleList.getNativeData().getCPointer() : 0), (long) (inMaterialList != null ? inMaterialList.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MeshShapeSettings(*((TriangleList* )inTriangleList_addr), *((PhysicsMaterialList* )inMaterialList_addr));
*/
    public static native long internal_native_create_TriangleList_PhysicsMaterialList(long inTriangleList_addr, long inMaterialList_addr);

    public MeshShapeSettings(TriangleList inTriangleList) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_TriangleList((long) (inTriangleList != null ? inTriangleList.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MeshShapeSettings(*((TriangleList* )inTriangleList_addr));
*/
    public static native long internal_native_create_TriangleList(long inTriangleList_addr);

    public MeshShapeSettings(VertexList inVertices, IndexedTriangleList inTriangles, PhysicsMaterialList inMaterialList) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_VertexList_IndexedTriangleList_PhysicsMaterialList((long) (inVertices != null ? inVertices.getNativeData().getCPointer() : 0), (long) (inTriangles != null ? inTriangles.getNativeData().getCPointer() : 0), (long) (inMaterialList != null ? inMaterialList.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MeshShapeSettings(*((VertexList* )inVertices_addr), *((IndexedTriangleList* )inTriangles_addr), *((PhysicsMaterialList* )inMaterialList_addr));
*/
    public static native long internal_native_create_VertexList_IndexedTriangleList_PhysicsMaterialList(long inVertices_addr, long inTriangles_addr, long inMaterialList_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MeshShapeSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void Sanitize() {
        internal_native_Sanitize((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->Sanitize();
*/
    public static native void internal_native_Sanitize(long this_addr);

    public VertexList get_mTriangleVertices() {
        long pointer = internal_native_get_mTriangleVertices((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (VertexList_TEMP_GEN_0 == null)
            VertexList_TEMP_GEN_0 = new VertexList((byte) 1, (char) 1);
        VertexList_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return VertexList_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return (jlong)&nativeObject->mTriangleVertices;
*/
    public static native long internal_native_get_mTriangleVertices(long this_addr);

    public void set_mTriangleVertices(VertexList mTriangleVertices) {
        internal_native_set_mTriangleVertices((long) getNativeData().getCPointer(), (long) (mTriangleVertices != null ? mTriangleVertices.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mTriangleVertices = *((VertexList*)mTriangleVertices_addr);
*/
    public static native void internal_native_set_mTriangleVertices(long this_addr, long mTriangleVertices_addr);

    public IndexedTriangleList get_mIndexedTriangles() {
        long pointer = internal_native_get_mIndexedTriangles((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (IndexedTriangleList_TEMP_GEN_0 == null)
            IndexedTriangleList_TEMP_GEN_0 = new IndexedTriangleList((byte) 1, (char) 1);
        IndexedTriangleList_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return IndexedTriangleList_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return (jlong)&nativeObject->mIndexedTriangles;
*/
    public static native long internal_native_get_mIndexedTriangles(long this_addr);

    public void set_mIndexedTriangles(IndexedTriangleList mIndexedTriangles) {
        internal_native_set_mIndexedTriangles((long) getNativeData().getCPointer(), (long) (mIndexedTriangles != null ? mIndexedTriangles.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mIndexedTriangles = *((IndexedTriangleList*)mIndexedTriangles_addr);
*/
    public static native void internal_native_set_mIndexedTriangles(long this_addr, long mIndexedTriangles_addr);

    public PhysicsMaterialList get_mMaterials() {
        long pointer = internal_native_get_mMaterials((long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (PhysicsMaterialList_TEMP_GEN_0 == null)
            PhysicsMaterialList_TEMP_GEN_0 = new PhysicsMaterialList((byte) 1, (char) 1);
        PhysicsMaterialList_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return PhysicsMaterialList_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return (jlong)&nativeObject->mMaterials;
*/
    public static native long internal_native_get_mMaterials(long this_addr);

    public void set_mMaterials(PhysicsMaterialList mMaterials) {
        internal_native_set_mMaterials((long) getNativeData().getCPointer(), (long) (mMaterials != null ? mMaterials.getNativeData().getCPointer() : 0));
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mMaterials = *((PhysicsMaterialList*)mMaterials_addr);
*/
    public static native void internal_native_set_mMaterials(long this_addr, long mMaterials_addr);

    public int get_mMaxTrianglesPerLeaf() {
        return internal_native_get_mMaxTrianglesPerLeaf((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return nativeObject->mMaxTrianglesPerLeaf;
*/
    public static native int internal_native_get_mMaxTrianglesPerLeaf(long this_addr);

    public void set_mMaxTrianglesPerLeaf(int mMaxTrianglesPerLeaf) {
        internal_native_set_mMaxTrianglesPerLeaf((long) getNativeData().getCPointer(), mMaxTrianglesPerLeaf);
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mMaxTrianglesPerLeaf = mMaxTrianglesPerLeaf;
*/
    public static native void internal_native_set_mMaxTrianglesPerLeaf(long this_addr, int mMaxTrianglesPerLeaf);

    public float get_mActiveEdgeCosThresholdAngle() {
        return internal_native_get_mActiveEdgeCosThresholdAngle((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return nativeObject->mActiveEdgeCosThresholdAngle;
*/
    public static native float internal_native_get_mActiveEdgeCosThresholdAngle(long this_addr);

    public void set_mActiveEdgeCosThresholdAngle(float mActiveEdgeCosThresholdAngle) {
        internal_native_set_mActiveEdgeCosThresholdAngle((long) getNativeData().getCPointer(), mActiveEdgeCosThresholdAngle);
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mActiveEdgeCosThresholdAngle = mActiveEdgeCosThresholdAngle;
*/
    public static native void internal_native_set_mActiveEdgeCosThresholdAngle(long this_addr, float mActiveEdgeCosThresholdAngle);

    public boolean get_mPerTriangleUserData() {
        return internal_native_get_mPerTriangleUserData((long) getNativeData().getCPointer());
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return nativeObject->mPerTriangleUserData;
*/
    public static native boolean internal_native_get_mPerTriangleUserData(long this_addr);

    public void set_mPerTriangleUserData(boolean mPerTriangleUserData) {
        internal_native_set_mPerTriangleUserData((long) getNativeData().getCPointer(), mPerTriangleUserData);
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mPerTriangleUserData = mPerTriangleUserData;
*/
    public static native void internal_native_set_mPerTriangleUserData(long this_addr, boolean mPerTriangleUserData);

    public MeshShapeSettings_EBuildQuality get_mBuildQuality() {
        int value = internal_native_get_mBuildQuality((long) getNativeData().getCPointer());
        return MeshShapeSettings_EBuildQuality.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
return (jint)nativeObject->mBuildQuality;
*/
    public static native int internal_native_get_mBuildQuality(long this_addr);

    public void set_mBuildQuality(MeshShapeSettings_EBuildQuality mBuildQuality) {
        internal_native_set_mBuildQuality((long) getNativeData().getCPointer(), (long) (mBuildQuality != null ? mBuildQuality.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
MeshShapeSettings* nativeObject = (MeshShapeSettings*)this_addr;
nativeObject->mBuildQuality = (::MeshShapeSettings_EBuildQuality)mBuildQuality;
*/
    public static native void internal_native_set_mBuildQuality(long this_addr, long mBuildQuality);
}
