/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.softbody;

import gen.jolt.physics.body.Body;

public class SoftBodyContactListenerEm extends SoftBodyContactListener {

    static private Body Body_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_1;

    static private SoftBodyContactSettings SoftBodyContactSettings_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_2;

    static private SoftBodyManifold SoftBodyManifold_TEMP_STATIC_GEN_0;

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodyContactListenerEm(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodyContactListenerJS);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodyContactListenerJS);jolt.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public SoftBodyContactListenerEm() {
        super((byte) 1, (char) 1);
        int addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        OnSoftBodyContactValidate OnSoftBodyContactValidate = new OnSoftBodyContactValidate() {

            public int OnSoftBodyContactValidate(int inSoftBody, int inOtherBody, int ioSettings) {
                return internal_OnSoftBodyContactValidate(inSoftBody, inOtherBody, ioSettings);
            }
        };
        OnSoftBodyContactAdded OnSoftBodyContactAdded = new OnSoftBodyContactAdded() {

            public void OnSoftBodyContactAdded(int inSoftBody, int inManifold) {
                internal_OnSoftBodyContactAdded(inSoftBody, inManifold);
            }
        };
        internal_native_setupCallback((int) getNativeData().getCPointer(), OnSoftBodyContactValidate, OnSoftBodyContactAdded);
    }

    protected int OnSoftBodyContactValidate(Body inSoftBody, Body inOtherBody, SoftBodyContactSettings ioSettings) {
        return 0;
    }

    private int internal_OnSoftBodyContactValidate(long inSoftBody, long inOtherBody, long ioSettings) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.getNativeData().reset(inSoftBody, false);
        if (Body_TEMP_STATIC_GEN_1 == null)
            Body_TEMP_STATIC_GEN_1 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_1.getNativeData().reset(inOtherBody, false);
        if (SoftBodyContactSettings_TEMP_STATIC_GEN_0 == null)
            SoftBodyContactSettings_TEMP_STATIC_GEN_0 = new SoftBodyContactSettings((byte) 1, (char) 1);
        SoftBodyContactSettings_TEMP_STATIC_GEN_0.getNativeData().reset(ioSettings, false);
        return OnSoftBodyContactValidate(Body_TEMP_STATIC_GEN_0, Body_TEMP_STATIC_GEN_1, SoftBodyContactSettings_TEMP_STATIC_GEN_0);
    }

    protected void OnSoftBodyContactAdded(Body inSoftBody, SoftBodyManifold inManifold) {
    }

    private void internal_OnSoftBodyContactAdded(long inSoftBody, long inManifold) {
        if (Body_TEMP_STATIC_GEN_2 == null)
            Body_TEMP_STATIC_GEN_2 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_2.getNativeData().reset(inSoftBody, false);
        if (SoftBodyManifold_TEMP_STATIC_GEN_0 == null)
            SoftBodyManifold_TEMP_STATIC_GEN_0 = new SoftBodyManifold((byte) 1, (char) 1);
        SoftBodyManifold_TEMP_STATIC_GEN_0.getNativeData().reset(inManifold, false);
        OnSoftBodyContactAdded(Body_TEMP_STATIC_GEN_2, SoftBodyManifold_TEMP_STATIC_GEN_0);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.SoftBodyContactListenerJS();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.SoftBodyContactListenerJS();return jolt.getPointer(jsObj);")
    public static native int internal_native_create();

    @org.teavm.jso.JSBody(params = { "this_addr", "OnSoftBodyContactValidate", "OnSoftBodyContactAdded" }, script = "var SoftBodyContactListenerJS = jolt.wrapPointer(this_addr, jolt.SoftBodyContactListenerJS); SoftBodyContactListenerJS.OnSoftBodyContactValidate = OnSoftBodyContactValidate; SoftBodyContactListenerJS.OnSoftBodyContactAdded = OnSoftBodyContactAdded;")
    public static native void internal_native_setupCallback(int this_addr, OnSoftBodyContactValidate OnSoftBodyContactValidate, OnSoftBodyContactAdded OnSoftBodyContactAdded);

    @org.teavm.jso.JSFunctor()
    public interface OnSoftBodyContactValidate extends org.teavm.jso.JSObject {

        int OnSoftBodyContactValidate(int inSoftBody, int inOtherBody, int ioSettings);
    }

    @org.teavm.jso.JSFunctor()
    public interface OnSoftBodyContactAdded extends org.teavm.jso.JSObject {

        void OnSoftBodyContactAdded(int inSoftBody, int inManifold);
    }
}
