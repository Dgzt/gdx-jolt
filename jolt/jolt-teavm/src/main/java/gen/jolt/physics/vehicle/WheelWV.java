/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.vehicle;

public class WheelWV extends Wheel {

    private WheelSettingsWV WheelSettingsWV_TEMP_GEN_0;

    static public final WheelWV T_01 = new WheelWV((byte) 1, (char) 1);

    static public final WheelWV T_02 = new WheelWV((byte) 1, (char) 1);

    static public final WheelWV T_03 = new WheelWV((byte) 1, (char) 1);

    public WheelWV(WheelSettingsWV inWheel) {
        super((byte) 1, (char) 1);
        int addr = internal_native_create_WheelSettingsWV((int) (long) (inWheel != null ? inWheel.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.WheelWV(inWheel_addr);
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"inWheel_addr"}, script = "var jsObj = new jolt.WheelWV(inWheel_addr);return jolt.getPointer(jsObj);")
    private static native int internal_native_create_WheelSettingsWV(int inWheel_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public WheelWV(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public WheelSettingsWV GetSettings() {
        int pointer = internal_native_GetSettings((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (WheelSettingsWV_TEMP_GEN_0 == null)
            WheelSettingsWV_TEMP_GEN_0 = new WheelSettingsWV((byte) 1, (char) 1);
        WheelSettingsWV_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return WheelSettingsWV_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
var returnedJSObj = jsObj.GetSettings();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);var returnedJSObj = jsObj.GetSettings();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetSettings(int this_addr);

    public float get_mLongitudinalSlip() {
        return internal_native_get_mLongitudinalSlip((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
return jsObj.get_mLongitudinalSlip();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);return jsObj.get_mLongitudinalSlip();")
    private static native float internal_native_get_mLongitudinalSlip(int this_addr);

    public void set_mLongitudinalSlip(float mLongitudinalSlip) {
        internal_native_set_mLongitudinalSlip((int) (long) getNativeData().getCPointer(), mLongitudinalSlip);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
jsObj.set_mLongitudinalSlip(mLongitudinalSlip);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mLongitudinalSlip"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);jsObj.set_mLongitudinalSlip(mLongitudinalSlip);")
    private static native void internal_native_set_mLongitudinalSlip(int this_addr, float mLongitudinalSlip);

    public float get_mLateralSlip() {
        return internal_native_get_mLateralSlip((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
return jsObj.get_mLateralSlip();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);return jsObj.get_mLateralSlip();")
    private static native float internal_native_get_mLateralSlip(int this_addr);

    public void set_mLateralSlip(float mLateralSlip) {
        internal_native_set_mLateralSlip((int) (long) getNativeData().getCPointer(), mLateralSlip);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
jsObj.set_mLateralSlip(mLateralSlip);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mLateralSlip"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);jsObj.set_mLateralSlip(mLateralSlip);")
    private static native void internal_native_set_mLateralSlip(int this_addr, float mLateralSlip);

    public float get_mCombinedLongitudinalFriction() {
        return internal_native_get_mCombinedLongitudinalFriction((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
return jsObj.get_mCombinedLongitudinalFriction();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);return jsObj.get_mCombinedLongitudinalFriction();")
    private static native float internal_native_get_mCombinedLongitudinalFriction(int this_addr);

    public void set_mCombinedLongitudinalFriction(float mCombinedLongitudinalFriction) {
        internal_native_set_mCombinedLongitudinalFriction((int) (long) getNativeData().getCPointer(), mCombinedLongitudinalFriction);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
jsObj.set_mCombinedLongitudinalFriction(mCombinedLongitudinalFriction);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mCombinedLongitudinalFriction"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);jsObj.set_mCombinedLongitudinalFriction(mCombinedLongitudinalFriction);")
    private static native void internal_native_set_mCombinedLongitudinalFriction(int this_addr, float mCombinedLongitudinalFriction);

    public float get_mCombinedLateralFriction() {
        return internal_native_get_mCombinedLateralFriction((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
return jsObj.get_mCombinedLateralFriction();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);return jsObj.get_mCombinedLateralFriction();")
    private static native float internal_native_get_mCombinedLateralFriction(int this_addr);

    public void set_mCombinedLateralFriction(float mCombinedLateralFriction) {
        internal_native_set_mCombinedLateralFriction((int) (long) getNativeData().getCPointer(), mCombinedLateralFriction);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
jsObj.set_mCombinedLateralFriction(mCombinedLateralFriction);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mCombinedLateralFriction"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);jsObj.set_mCombinedLateralFriction(mCombinedLateralFriction);")
    private static native void internal_native_set_mCombinedLateralFriction(int this_addr, float mCombinedLateralFriction);

    public float get_mBrakeImpulse() {
        return internal_native_get_mBrakeImpulse((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
return jsObj.get_mBrakeImpulse();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);return jsObj.get_mBrakeImpulse();")
    private static native float internal_native_get_mBrakeImpulse(int this_addr);

    public void set_mBrakeImpulse(float mBrakeImpulse) {
        internal_native_set_mBrakeImpulse((int) (long) getNativeData().getCPointer(), mBrakeImpulse);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);
jsObj.set_mBrakeImpulse(mBrakeImpulse);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mBrakeImpulse"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelWV);jsObj.set_mBrakeImpulse(mBrakeImpulse);")
    private static native void internal_native_set_mBrakeImpulse(int this_addr, float mBrakeImpulse);

    public static long native_create_WheelSettingsWV(long inWheel_addr) {
        return internal_native_create_WheelSettingsWV((int) inWheel_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static long native_GetSettings(long this_addr) {
        return internal_native_GetSettings((int) this_addr);
    }

    public static float native_get_mLongitudinalSlip(long this_addr) {
        return internal_native_get_mLongitudinalSlip((int) this_addr);
    }

    public static void native_set_mLongitudinalSlip(long this_addr, float mLongitudinalSlip) {
        internal_native_set_mLongitudinalSlip((int) this_addr, mLongitudinalSlip);
    }

    public static float native_get_mLateralSlip(long this_addr) {
        return internal_native_get_mLateralSlip((int) this_addr);
    }

    public static void native_set_mLateralSlip(long this_addr, float mLateralSlip) {
        internal_native_set_mLateralSlip((int) this_addr, mLateralSlip);
    }

    public static float native_get_mCombinedLongitudinalFriction(long this_addr) {
        return internal_native_get_mCombinedLongitudinalFriction((int) this_addr);
    }

    public static void native_set_mCombinedLongitudinalFriction(long this_addr, float mCombinedLongitudinalFriction) {
        internal_native_set_mCombinedLongitudinalFriction((int) this_addr, mCombinedLongitudinalFriction);
    }

    public static float native_get_mCombinedLateralFriction(long this_addr) {
        return internal_native_get_mCombinedLateralFriction((int) this_addr);
    }

    public static void native_set_mCombinedLateralFriction(long this_addr, float mCombinedLateralFriction) {
        internal_native_set_mCombinedLateralFriction((int) this_addr, mCombinedLateralFriction);
    }

    public static float native_get_mBrakeImpulse(long this_addr) {
        return internal_native_get_mBrakeImpulse((int) this_addr);
    }

    public static void native_set_mBrakeImpulse(long this_addr, float mBrakeImpulse) {
        internal_native_set_mBrakeImpulse((int) this_addr, mBrakeImpulse);
    }
}
