/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.softbody;

import gen.jolt.idl.IDLBase;

public class SoftBodySharedSettingsDihedralBend extends IDLBase {

    static public final SoftBodySharedSettingsDihedralBend T_01 = new SoftBodySharedSettingsDihedralBend((byte) 1, (char) 1);

    static public final SoftBodySharedSettingsDihedralBend T_02 = new SoftBodySharedSettingsDihedralBend((byte) 1, (char) 1);

    static public final SoftBodySharedSettingsDihedralBend T_03 = new SoftBodySharedSettingsDihedralBend((byte) 1, (char) 1);

    public SoftBodySharedSettingsDihedralBend(int inVertex1, int inVertex2, int inVertex3, int inVertex4, float inCompliance) {
        int addr = internal_native_create_int_int_int_int_float(inVertex1, inVertex2, inVertex3, inVertex4, inCompliance);
        getNativeData().reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.SoftBodySharedSettingsDihedralBend(inVertex1, inVertex2, inVertex3, inVertex4, inCompliance);
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"inVertex1", "inVertex2", "inVertex3", "inVertex4", "inCompliance"}, script = "var jsObj = new jolt.SoftBodySharedSettingsDihedralBend(inVertex1, inVertex2, inVertex3, inVertex4, inCompliance);return jolt.getPointer(jsObj);")
    private static native int internal_native_create_int_int_int_int_float(int inVertex1, int inVertex2, int inVertex3, int inVertex4, float inCompliance);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SoftBodySharedSettingsDihedralBend(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public int get_mVertex(int index) {
        return internal_native_get_mVertex((int) (long) getNativeData().getCPointer(), index);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
return jsObj.get_mVertex(index);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "index"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);return jsObj.get_mVertex(index);")
    private static native int internal_native_get_mVertex(int this_addr, int index);

    public void set_mVertex(int index, int mVertex) {
        internal_native_set_mVertex((int) (long) getNativeData().getCPointer(), index, mVertex);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
jsObj.set_mVertex(index, mVertex);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "index", "mVertex"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);jsObj.set_mVertex(index, mVertex);")
    private static native void internal_native_set_mVertex(int this_addr, int index, int mVertex);

    public float get_mCompliance() {
        return internal_native_get_mCompliance((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
return jsObj.get_mCompliance();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);return jsObj.get_mCompliance();")
    private static native float internal_native_get_mCompliance(int this_addr);

    public void set_mCompliance(float mCompliance) {
        internal_native_set_mCompliance((int) (long) getNativeData().getCPointer(), mCompliance);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
jsObj.set_mCompliance(mCompliance);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mCompliance"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);jsObj.set_mCompliance(mCompliance);")
    private static native void internal_native_set_mCompliance(int this_addr, float mCompliance);

    public float get_mInitialAngle() {
        return internal_native_get_mInitialAngle((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
return jsObj.get_mInitialAngle();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);return jsObj.get_mInitialAngle();")
    private static native float internal_native_get_mInitialAngle(int this_addr);

    public void set_mInitialAngle(float mInitialAngle) {
        internal_native_set_mInitialAngle((int) (long) getNativeData().getCPointer(), mInitialAngle);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);
jsObj.set_mInitialAngle(mInitialAngle);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mInitialAngle"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.SoftBodySharedSettingsDihedralBend);jsObj.set_mInitialAngle(mInitialAngle);")
    private static native void internal_native_set_mInitialAngle(int this_addr, float mInitialAngle);

    public static long native_create_int_int_int_int_float(int inVertex1, int inVertex2, int inVertex3, int inVertex4, float inCompliance) {
        return internal_native_create_int_int_int_int_float(inVertex1, inVertex2, inVertex3, inVertex4, inCompliance);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static int native_get_mVertex(long this_addr, int index) {
        return internal_native_get_mVertex((int) this_addr, index);
    }

    public static void native_set_mVertex(long this_addr, int index, int mVertex) {
        internal_native_set_mVertex((int) this_addr, index, mVertex);
    }

    public static float native_get_mCompliance(long this_addr) {
        return internal_native_get_mCompliance((int) this_addr);
    }

    public static void native_set_mCompliance(long this_addr, float mCompliance) {
        internal_native_set_mCompliance((int) this_addr, mCompliance);
    }

    public static float native_get_mInitialAngle(long this_addr) {
        return internal_native_get_mInitialAngle((int) this_addr);
    }

    public static void native_set_mInitialAngle(long this_addr, float mInitialAngle) {
        internal_native_set_mInitialAngle((int) this_addr, mInitialAngle);
    }
}
