/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.softbody;

import gen.jolt.idl.IDLBase;
import gen.jolt.physics.collision.TransformedShape;
import gen.jolt.physics.body.Body;
import gen.jolt.physics.collision.CollidePointResult;

public class CollidePointCollector extends IDLBase {

    private TransformedShape TransformedShape_TEMP_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_0;

    static private CollidePointResult CollidePointResult_TEMP_STATIC_GEN_0;

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CollidePointCollector(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollectorJS);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollectorJS);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public void SetContext(TransformedShape inContext) {
        internal_native_SetContext((int) (long) getNativeData().getCPointer(), (int) (long) (inContext != null ? inContext.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
jsObj.SetContext(inContext_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inContext_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);jsObj.SetContext(inContext_addr);")
    private static native void internal_native_SetContext(int this_addr, int inContext_addr);

    public TransformedShape GetContext() {
        int pointer = internal_native_GetContext((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            return null;
        if (TransformedShape_TEMP_GEN_0 == null)
            TransformedShape_TEMP_GEN_0 = new TransformedShape((byte) 1, (char) 1);
        TransformedShape_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return TransformedShape_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
var returnedJSObj = jsObj.GetContext();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);var returnedJSObj = jsObj.GetContext();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetContext(int this_addr);

    public void UpdateEarlyOutFraction(float inFraction) {
        internal_native_UpdateEarlyOutFraction((int) (long) getNativeData().getCPointer(), inFraction);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
jsObj.UpdateEarlyOutFraction(inFraction);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inFraction"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);jsObj.UpdateEarlyOutFraction(inFraction);")
    private static native void internal_native_UpdateEarlyOutFraction(int this_addr, float inFraction);

    public void ResetEarlyOutFraction(float inFraction) {
        internal_native_ResetEarlyOutFraction((int) (long) getNativeData().getCPointer(), inFraction);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
jsObj.ResetEarlyOutFraction(inFraction);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inFraction"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);jsObj.ResetEarlyOutFraction(inFraction);")
    private static native void internal_native_ResetEarlyOutFraction(int this_addr, float inFraction);

    public void ResetEarlyOutFraction() {
        internal_native_ResetEarlyOutFraction((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
jsObj.ResetEarlyOutFraction();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);jsObj.ResetEarlyOutFraction();")
    private static native void internal_native_ResetEarlyOutFraction(int this_addr);

    public void ForceEarlyOut() {
        internal_native_ForceEarlyOut((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
jsObj.ForceEarlyOut();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);jsObj.ForceEarlyOut();")
    private static native void internal_native_ForceEarlyOut(int this_addr);

    public boolean ShouldEarlyOut() {
        return internal_native_ShouldEarlyOut((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
var returnedJSObj = jsObj.ShouldEarlyOut();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);var returnedJSObj = jsObj.ShouldEarlyOut();return returnedJSObj;")
    private static native boolean internal_native_ShouldEarlyOut(int this_addr);

    public float GetEarlyOutFraction() {
        return internal_native_GetEarlyOutFraction((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
var returnedJSObj = jsObj.GetEarlyOutFraction();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);var returnedJSObj = jsObj.GetEarlyOutFraction();return returnedJSObj;")
    private static native float internal_native_GetEarlyOutFraction(int this_addr);

    public float GetPositiveEarlyOutFraction() {
        return internal_native_GetPositiveEarlyOutFraction((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);
var returnedJSObj = jsObj.GetPositiveEarlyOutFraction();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.CollidePointCollector);var returnedJSObj = jsObj.GetPositiveEarlyOutFraction();return returnedJSObj;")
    private static native float internal_native_GetPositiveEarlyOutFraction(int this_addr);

    public CollidePointCollector() {
        int addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        Reset Reset = new Reset() {

            public void Reset() {
                internal_Reset();
            }
        };
        OnBody OnBody = new OnBody() {

            public void OnBody(int inBody) {
                internal_OnBody(inBody);
            }
        };
        AddHit AddHit = new AddHit() {

            public void AddHit(int inResult) {
                internal_AddHit(inResult);
            }
        };
        internal_native_setupCallback((int) getNativeData().getCPointer(), Reset, OnBody, AddHit);
    }

    protected void Reset() {
    }

    private void internal_Reset() {
        Reset();
    }

    protected void OnBody(Body inBody) {
    }

    private void internal_OnBody(long inBody) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.getNativeData().reset(inBody, false);
        OnBody(Body_TEMP_STATIC_GEN_0);
    }

    protected void AddHit(CollidePointResult inResult) {
    }

    private void internal_AddHit(long inResult) {
        if (CollidePointResult_TEMP_STATIC_GEN_0 == null)
            CollidePointResult_TEMP_STATIC_GEN_0 = new CollidePointResult((byte) 1, (char) 1);
        CollidePointResult_TEMP_STATIC_GEN_0.getNativeData().reset(inResult, false);
        AddHit(CollidePointResult_TEMP_STATIC_GEN_0);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.CollidePointCollectorJS();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.CollidePointCollectorJS();return jolt.getPointer(jsObj);")
    private static native int internal_native_create();

    @org.teavm.jso.JSBody(params = { "this_addr", "Reset", "OnBody", "AddHit" }, script = "var CollidePointCollectorJS = jolt.wrapPointer(this_addr, jolt.CollidePointCollectorJS); CollidePointCollectorJS.Reset = Reset; CollidePointCollectorJS.OnBody = OnBody; CollidePointCollectorJS.AddHit = AddHit;")
    private static native void internal_native_setupCallback(int this_addr, Reset Reset, OnBody OnBody, AddHit AddHit);

    @org.teavm.jso.JSFunctor()
    public interface Reset extends org.teavm.jso.JSObject {

        void Reset();
    }

    @org.teavm.jso.JSFunctor()
    public interface OnBody extends org.teavm.jso.JSObject {

        void OnBody(int inBody);
    }

    @org.teavm.jso.JSFunctor()
    public interface AddHit extends org.teavm.jso.JSObject {

        void AddHit(int inResult);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static void native_SetContext(long this_addr, long inContext_addr) {
        internal_native_SetContext((int) this_addr, (int) inContext_addr);
    }

    public static long native_GetContext(long this_addr) {
        return internal_native_GetContext((int) this_addr);
    }

    public static void native_UpdateEarlyOutFraction(long this_addr, float inFraction) {
        internal_native_UpdateEarlyOutFraction((int) this_addr, inFraction);
    }

    public static void native_ResetEarlyOutFraction(long this_addr, float inFraction) {
        internal_native_ResetEarlyOutFraction((int) this_addr, inFraction);
    }

    public static void native_ResetEarlyOutFraction(long this_addr) {
        internal_native_ResetEarlyOutFraction((int) this_addr);
    }

    public static void native_ForceEarlyOut(long this_addr) {
        internal_native_ForceEarlyOut((int) this_addr);
    }

    public static boolean native_ShouldEarlyOut(long this_addr) {
        return internal_native_ShouldEarlyOut((int) this_addr);
    }

    public static float native_GetEarlyOutFraction(long this_addr) {
        return internal_native_GetEarlyOutFraction((int) this_addr);
    }

    public static float native_GetPositiveEarlyOutFraction(long this_addr) {
        return internal_native_GetPositiveEarlyOutFraction((int) this_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
