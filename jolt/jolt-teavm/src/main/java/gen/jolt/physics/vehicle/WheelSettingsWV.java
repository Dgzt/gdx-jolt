/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.vehicle;

import gen.jolt.core.LinearCurve;

public class WheelSettingsWV extends WheelSettings {

    private LinearCurve LinearCurve_TEMP_GEN_0;

    private LinearCurve LinearCurve_TEMP_GEN_1;

    static public final WheelSettingsWV T_01 = new WheelSettingsWV((byte) 1, (char) 1);

    static public final WheelSettingsWV T_02 = new WheelSettingsWV((byte) 1, (char) 1);

    static public final WheelSettingsWV T_03 = new WheelSettingsWV((byte) 1, (char) 1);

    public WheelSettingsWV() {
        super((byte) 1, (char) 1);
        int addr = internal_native_create();
        getNativeData().reset(addr, false);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.WheelSettingsWV();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.WheelSettingsWV();return jolt.getPointer(jsObj);")
    private static native int internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public WheelSettingsWV(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public float get_mInertia() {
        return internal_native_get_mInertia((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
return jsObj.get_mInertia();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);return jsObj.get_mInertia();")
    private static native float internal_native_get_mInertia(int this_addr);

    public void set_mInertia(float mInertia) {
        internal_native_set_mInertia((int) (long) getNativeData().getCPointer(), mInertia);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mInertia(mInertia);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mInertia"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mInertia(mInertia);")
    private static native void internal_native_set_mInertia(int this_addr, float mInertia);

    public float get_mAngularDamping() {
        return internal_native_get_mAngularDamping((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
return jsObj.get_mAngularDamping();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);return jsObj.get_mAngularDamping();")
    private static native float internal_native_get_mAngularDamping(int this_addr);

    public void set_mAngularDamping(float mAngularDamping) {
        internal_native_set_mAngularDamping((int) (long) getNativeData().getCPointer(), mAngularDamping);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mAngularDamping(mAngularDamping);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mAngularDamping"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mAngularDamping(mAngularDamping);")
    private static native void internal_native_set_mAngularDamping(int this_addr, float mAngularDamping);

    public float get_mMaxSteerAngle() {
        return internal_native_get_mMaxSteerAngle((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
return jsObj.get_mMaxSteerAngle();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);return jsObj.get_mMaxSteerAngle();")
    private static native float internal_native_get_mMaxSteerAngle(int this_addr);

    public void set_mMaxSteerAngle(float mMaxSteerAngle) {
        internal_native_set_mMaxSteerAngle((int) (long) getNativeData().getCPointer(), mMaxSteerAngle);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mMaxSteerAngle(mMaxSteerAngle);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mMaxSteerAngle"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mMaxSteerAngle(mMaxSteerAngle);")
    private static native void internal_native_set_mMaxSteerAngle(int this_addr, float mMaxSteerAngle);

    public LinearCurve get_mLongitudinalFriction() {
        int pointer = internal_native_get_mLongitudinalFriction((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (LinearCurve_TEMP_GEN_0 == null)
            LinearCurve_TEMP_GEN_0 = new LinearCurve((byte) 1, (char) 1);
        LinearCurve_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return LinearCurve_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
var returnedJSObj = jsObj.get_mLongitudinalFriction();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);var returnedJSObj = jsObj.get_mLongitudinalFriction();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_get_mLongitudinalFriction(int this_addr);

    public void set_mLongitudinalFriction(LinearCurve mLongitudinalFriction) {
        internal_native_set_mLongitudinalFriction((int) (long) getNativeData().getCPointer(), (int) (long) (mLongitudinalFriction != null ? mLongitudinalFriction.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mLongitudinalFriction(mLongitudinalFriction_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mLongitudinalFriction_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mLongitudinalFriction(mLongitudinalFriction_addr);")
    private static native void internal_native_set_mLongitudinalFriction(int this_addr, int mLongitudinalFriction_addr);

    public LinearCurve get_mLateralFriction() {
        int pointer = internal_native_get_mLateralFriction((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (LinearCurve_TEMP_GEN_1 == null)
            LinearCurve_TEMP_GEN_1 = new LinearCurve((byte) 1, (char) 1);
        LinearCurve_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return LinearCurve_TEMP_GEN_1;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
var returnedJSObj = jsObj.get_mLateralFriction();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);var returnedJSObj = jsObj.get_mLateralFriction();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_get_mLateralFriction(int this_addr);

    public void set_mLateralFriction(LinearCurve mLateralFriction) {
        internal_native_set_mLateralFriction((int) (long) getNativeData().getCPointer(), (int) (long) (mLateralFriction != null ? mLateralFriction.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mLateralFriction(mLateralFriction_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mLateralFriction_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mLateralFriction(mLateralFriction_addr);")
    private static native void internal_native_set_mLateralFriction(int this_addr, int mLateralFriction_addr);

    public float get_mMaxBrakeTorque() {
        return internal_native_get_mMaxBrakeTorque((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
return jsObj.get_mMaxBrakeTorque();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);return jsObj.get_mMaxBrakeTorque();")
    private static native float internal_native_get_mMaxBrakeTorque(int this_addr);

    public void set_mMaxBrakeTorque(float mMaxBrakeTorque) {
        internal_native_set_mMaxBrakeTorque((int) (long) getNativeData().getCPointer(), mMaxBrakeTorque);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mMaxBrakeTorque(mMaxBrakeTorque);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mMaxBrakeTorque"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mMaxBrakeTorque(mMaxBrakeTorque);")
    private static native void internal_native_set_mMaxBrakeTorque(int this_addr, float mMaxBrakeTorque);

    public float get_mMaxHandBrakeTorque() {
        return internal_native_get_mMaxHandBrakeTorque((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
return jsObj.get_mMaxHandBrakeTorque();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);return jsObj.get_mMaxHandBrakeTorque();")
    private static native float internal_native_get_mMaxHandBrakeTorque(int this_addr);

    public void set_mMaxHandBrakeTorque(float mMaxHandBrakeTorque) {
        internal_native_set_mMaxHandBrakeTorque((int) (long) getNativeData().getCPointer(), mMaxHandBrakeTorque);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);
jsObj.set_mMaxHandBrakeTorque(mMaxHandBrakeTorque);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mMaxHandBrakeTorque"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.WheelSettingsWV);jsObj.set_mMaxHandBrakeTorque(mMaxHandBrakeTorque);")
    private static native void internal_native_set_mMaxHandBrakeTorque(int this_addr, float mMaxHandBrakeTorque);

    public static long native_create() {
        return internal_native_create();
    }

    public static float native_get_mInertia(long this_addr) {
        return internal_native_get_mInertia((int) this_addr);
    }

    public static void native_set_mInertia(long this_addr, float mInertia) {
        internal_native_set_mInertia((int) this_addr, mInertia);
    }

    public static float native_get_mAngularDamping(long this_addr) {
        return internal_native_get_mAngularDamping((int) this_addr);
    }

    public static void native_set_mAngularDamping(long this_addr, float mAngularDamping) {
        internal_native_set_mAngularDamping((int) this_addr, mAngularDamping);
    }

    public static float native_get_mMaxSteerAngle(long this_addr) {
        return internal_native_get_mMaxSteerAngle((int) this_addr);
    }

    public static void native_set_mMaxSteerAngle(long this_addr, float mMaxSteerAngle) {
        internal_native_set_mMaxSteerAngle((int) this_addr, mMaxSteerAngle);
    }

    public static long native_get_mLongitudinalFriction(long this_addr) {
        return internal_native_get_mLongitudinalFriction((int) this_addr);
    }

    public static void native_set_mLongitudinalFriction(long this_addr, long mLongitudinalFriction_addr) {
        internal_native_set_mLongitudinalFriction((int) this_addr, (int) mLongitudinalFriction_addr);
    }

    public static long native_get_mLateralFriction(long this_addr) {
        return internal_native_get_mLateralFriction((int) this_addr);
    }

    public static void native_set_mLateralFriction(long this_addr, long mLateralFriction_addr) {
        internal_native_set_mLateralFriction((int) this_addr, (int) mLateralFriction_addr);
    }

    public static float native_get_mMaxBrakeTorque(long this_addr) {
        return internal_native_get_mMaxBrakeTorque((int) this_addr);
    }

    public static void native_set_mMaxBrakeTorque(long this_addr, float mMaxBrakeTorque) {
        internal_native_set_mMaxBrakeTorque((int) this_addr, mMaxBrakeTorque);
    }

    public static float native_get_mMaxHandBrakeTorque(long this_addr) {
        return internal_native_get_mMaxHandBrakeTorque((int) this_addr);
    }

    public static void native_set_mMaxHandBrakeTorque(long this_addr, float mMaxHandBrakeTorque) {
        internal_native_set_mMaxHandBrakeTorque((int) this_addr, mMaxHandBrakeTorque);
    }
}
