/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.collision.shape;

import gen.jolt.math.Vec3;
import gen.jolt.math.Quat;

public class RotatedTranslatedShapeSettings extends DecoratedShapeSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_0;

    static public final RotatedTranslatedShapeSettings T_01 = new RotatedTranslatedShapeSettings((byte) 1, (char) 1);

    static public final RotatedTranslatedShapeSettings T_02 = new RotatedTranslatedShapeSettings((byte) 1, (char) 1);

    static public final RotatedTranslatedShapeSettings T_03 = new RotatedTranslatedShapeSettings((byte) 1, (char) 1);

    public RotatedTranslatedShapeSettings(Vec3 inPosition, Quat inRotation, ShapeSettings inShape) {
        super((byte) 1, (char) 1);
        int addr = internal_native_create_Vec3_Quat_ShapeSettings((int) (long) (inPosition != null ? inPosition.getNativeData().getCPointer() : 0), (int) (long) (inRotation != null ? inRotation.getNativeData().getCPointer() : 0), (int) (long) (inShape != null ? inShape.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, false);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.RotatedTranslatedShapeSettings(inPosition_addr, inRotation_addr, inShape_addr);
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"inPosition_addr", "inRotation_addr", "inShape_addr"}, script = "var jsObj = new jolt.RotatedTranslatedShapeSettings(inPosition_addr, inRotation_addr, inShape_addr);return jolt.getPointer(jsObj);")
    private static native int internal_native_create_Vec3_Quat_ShapeSettings(int inPosition_addr, int inRotation_addr, int inShape_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RotatedTranslatedShapeSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public Vec3 get_mPosition() {
        int pointer = internal_native_get_mPosition((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);
var returnedJSObj = jsObj.get_mPosition();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);var returnedJSObj = jsObj.get_mPosition();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_get_mPosition(int this_addr);

    public void set_mPosition(Vec3 mPosition) {
        internal_native_set_mPosition((int) (long) getNativeData().getCPointer(), (int) (long) (mPosition != null ? mPosition.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);
jsObj.set_mPosition(mPosition_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mPosition_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);jsObj.set_mPosition(mPosition_addr);")
    private static native void internal_native_set_mPosition(int this_addr, int mPosition_addr);

    public Quat get_mRotation() {
        int pointer = internal_native_get_mRotation((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);
var returnedJSObj = jsObj.get_mRotation();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);var returnedJSObj = jsObj.get_mRotation();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_get_mRotation(int this_addr);

    public void set_mRotation(Quat mRotation) {
        internal_native_set_mRotation((int) (long) getNativeData().getCPointer(), (int) (long) (mRotation != null ? mRotation.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);
jsObj.set_mRotation(mRotation_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mRotation_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.RotatedTranslatedShapeSettings);jsObj.set_mRotation(mRotation_addr);")
    private static native void internal_native_set_mRotation(int this_addr, int mRotation_addr);

    public static long native_create_Vec3_Quat_ShapeSettings(long inPosition_addr, long inRotation_addr, long inShape_addr) {
        return internal_native_create_Vec3_Quat_ShapeSettings((int) inPosition_addr, (int) inRotation_addr, (int) inShape_addr);
    }

    public static long native_get_mPosition(long this_addr) {
        return internal_native_get_mPosition((int) this_addr);
    }

    public static void native_set_mPosition(long this_addr, long mPosition_addr) {
        internal_native_set_mPosition((int) this_addr, (int) mPosition_addr);
    }

    public static long native_get_mRotation(long this_addr) {
        return internal_native_get_mRotation((int) this_addr);
    }

    public static void native_set_mRotation(long this_addr, long mRotation_addr) {
        internal_native_set_mRotation((int) this_addr, (int) mRotation_addr);
    }
}
