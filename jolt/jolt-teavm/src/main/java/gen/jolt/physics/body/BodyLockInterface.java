/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.body;

import gen.jolt.idl.IDLBase;
import gen.jolt.core.SharedMutex;
import gen.jolt.core.MutexMask;

public class BodyLockInterface extends IDLBase {

    private Body Body_TEMP_GEN_0;

    private SharedMutex SharedMutex_TEMP_GEN_0;

    private SharedMutex SharedMutex_TEMP_GEN_1;

    private MutexMask MutexMask_TEMP_GEN_0;

    static public final BodyLockInterface T_01 = new BodyLockInterface((byte) 1, (char) 1);

    static public final BodyLockInterface T_02 = new BodyLockInterface((byte) 1, (char) 1);

    static public final BodyLockInterface T_03 = new BodyLockInterface((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public BodyLockInterface(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jolt.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public Body TryGetBody(BodyID inBodyID) {
        int pointer = internal_native_TryGetBody((int) (long) getNativeData().getCPointer(), (int) (long) (inBodyID != null ? inBodyID.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (Body_TEMP_GEN_0 == null)
            Body_TEMP_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Body_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
var returnedJSObj = jsObj.TryGetBody(inBodyID_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inBodyID_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);var returnedJSObj = jsObj.TryGetBody(inBodyID_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_TryGetBody(int this_addr, int inBodyID_addr);

    public SharedMutex LockRead(BodyID inBodyID) {
        int pointer = internal_native_LockRead((int) (long) getNativeData().getCPointer(), (int) (long) (inBodyID != null ? inBodyID.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (SharedMutex_TEMP_GEN_0 == null)
            SharedMutex_TEMP_GEN_0 = new SharedMutex((byte) 1, (char) 1);
        SharedMutex_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return SharedMutex_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
var returnedJSObj = jsObj.LockRead(inBodyID_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inBodyID_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);var returnedJSObj = jsObj.LockRead(inBodyID_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_LockRead(int this_addr, int inBodyID_addr);

    public void UnlockRead(SharedMutex inMutex) {
        internal_native_UnlockRead((int) (long) getNativeData().getCPointer(), (int) (long) (inMutex != null ? inMutex.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jsObj.UnlockRead(inMutex_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMutex_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jsObj.UnlockRead(inMutex_addr);")
    public static native void internal_native_UnlockRead(int this_addr, int inMutex_addr);

    public SharedMutex LockWrite(BodyID inBodyID) {
        int pointer = internal_native_LockWrite((int) (long) getNativeData().getCPointer(), (int) (long) (inBodyID != null ? inBodyID.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            return null;
        if (SharedMutex_TEMP_GEN_1 == null)
            SharedMutex_TEMP_GEN_1 = new SharedMutex((byte) 1, (char) 1);
        SharedMutex_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return SharedMutex_TEMP_GEN_1;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
var returnedJSObj = jsObj.LockWrite(inBodyID_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inBodyID_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);var returnedJSObj = jsObj.LockWrite(inBodyID_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_LockWrite(int this_addr, int inBodyID_addr);

    public void UnlockWrite(SharedMutex inMutex) {
        internal_native_UnlockWrite((int) (long) getNativeData().getCPointer(), (int) (long) (inMutex != null ? inMutex.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jsObj.UnlockWrite(inMutex_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMutex_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jsObj.UnlockWrite(inMutex_addr);")
    public static native void internal_native_UnlockWrite(int this_addr, int inMutex_addr);

    public MutexMask GetMutexMask(IDLArrayBodyID inBodies, int inNumber) {
        int pointer = internal_native_GetMutexMask((int) (long) getNativeData().getCPointer(), (int) (long) (inBodies != null ? inBodies.getPointer() : 0), inNumber);
        if (pointer == 0)
            return null;
        if (MutexMask_TEMP_GEN_0 == null)
            MutexMask_TEMP_GEN_0 = new MutexMask((byte) 1, (char) 1);
        MutexMask_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return MutexMask_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
var returnedJSObj = jsObj.GetMutexMask(inBodies_addr, inNumber);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inBodies_addr", "inNumber"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);var returnedJSObj = jsObj.GetMutexMask(inBodies_addr, inNumber);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_GetMutexMask(int this_addr, int inBodies_addr, int inNumber);

    public void LockRead(MutexMask inMutexMask) {
        internal_native_LockRead_0((int) (long) getNativeData().getCPointer(), (int) (long) (inMutexMask != null ? inMutexMask.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jsObj.LockRead_0(inMutexMask_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMutexMask_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jsObj.LockRead_0(inMutexMask_addr);")
    public static native void internal_native_LockRead_0(int this_addr, int inMutexMask_addr);

    public void UnlockRead(MutexMask inMutexMask) {
        internal_native_UnlockRead_0((int) (long) getNativeData().getCPointer(), (int) (long) (inMutexMask != null ? inMutexMask.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jsObj.UnlockRead_0(inMutexMask_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMutexMask_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jsObj.UnlockRead_0(inMutexMask_addr);")
    public static native void internal_native_UnlockRead_0(int this_addr, int inMutexMask_addr);

    public void LockWrite(MutexMask inMutexMask) {
        internal_native_LockWrite_0((int) (long) getNativeData().getCPointer(), (int) (long) (inMutexMask != null ? inMutexMask.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jsObj.LockWrite_0(inMutexMask_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMutexMask_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jsObj.LockWrite_0(inMutexMask_addr);")
    public static native void internal_native_LockWrite_0(int this_addr, int inMutexMask_addr);

    public void UnlockWrite(MutexMask inMutexMask) {
        internal_native_UnlockWrite_0((int) (long) getNativeData().getCPointer(), (int) (long) (inMutexMask != null ? inMutexMask.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);
jsObj.UnlockWrite_0(inMutexMask_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMutexMask_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.BodyLockInterface);jsObj.UnlockWrite_0(inMutexMask_addr);")
    public static native void internal_native_UnlockWrite_0(int this_addr, int inMutexMask_addr);
}
