/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.constraint;

import gen.jolt.PathConstraintPath;
import gen.jolt.math.Vec3;

public class PathConstraintPathEm extends PathConstraintPath {

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public PathConstraintPathEm(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPathJS);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPathJS);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public PathConstraintPathEm() {
        super((byte) 1, (char) 1);
        int addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        GetPathMaxFraction GetPathMaxFraction = new GetPathMaxFraction() {

            public float GetPathMaxFraction() {
                return internal_GetPathMaxFraction();
            }
        };
        GetClosestPoint GetClosestPoint = new GetClosestPoint() {

            public float GetClosestPoint(int inPosition, float inFractionHint) {
                return internal_GetClosestPoint(inPosition, inFractionHint);
            }
        };
        GetPointOnPath GetPointOnPath = new GetPointOnPath() {

            public void GetPointOnPath(float inFraction, int outPathPosition, int outPathTangent, int outPathNormal, int outPathBinormal) {
                internal_GetPointOnPath(inFraction, outPathPosition, outPathTangent, outPathNormal, outPathBinormal);
            }
        };
        internal_native_setupCallback((int) getNativeData().getCPointer(), GetPathMaxFraction, GetClosestPoint, GetPointOnPath);
    }

    protected float GetPathMaxFraction() {
        return 0;
    }

    private float internal_GetPathMaxFraction() {
        return GetPathMaxFraction();
    }

    protected float GetClosestPoint(Vec3 inPosition, float inFractionHint) {
        return 0;
    }

    private float internal_GetClosestPoint(long inPosition, float inFractionHint) {
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.getNativeData().reset(inPosition, false);
        return GetClosestPoint(Vec3_TEMP_STATIC_GEN_0, inFractionHint);
    }

    protected void GetPointOnPath(float inFraction, Vec3 outPathPosition, Vec3 outPathTangent, Vec3 outPathNormal, Vec3 outPathBinormal) {
    }

    private void internal_GetPointOnPath(float inFraction, long outPathPosition, long outPathTangent, long outPathNormal, long outPathBinormal) {
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.getNativeData().reset(outPathPosition, false);
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.getNativeData().reset(outPathTangent, false);
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.getNativeData().reset(outPathNormal, false);
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.getNativeData().reset(outPathBinormal, false);
        GetPointOnPath(inFraction, Vec3_TEMP_STATIC_GEN_1, Vec3_TEMP_STATIC_GEN_2, Vec3_TEMP_STATIC_GEN_3, Vec3_TEMP_STATIC_GEN_4);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.PathConstraintPathJS();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.PathConstraintPathJS();return jolt.getPointer(jsObj);")
    private static native int internal_native_create();

    @org.teavm.jso.JSBody(params = { "this_addr", "GetPathMaxFraction", "GetClosestPoint", "GetPointOnPath" }, script = "var PathConstraintPathJS = jolt.wrapPointer(this_addr, jolt.PathConstraintPathJS); PathConstraintPathJS.GetPathMaxFraction = GetPathMaxFraction; PathConstraintPathJS.GetClosestPoint = GetClosestPoint; PathConstraintPathJS.GetPointOnPath = GetPointOnPath;")
    private static native void internal_native_setupCallback(int this_addr, GetPathMaxFraction GetPathMaxFraction, GetClosestPoint GetClosestPoint, GetPointOnPath GetPointOnPath);

    @org.teavm.jso.JSFunctor()
    public interface GetPathMaxFraction extends org.teavm.jso.JSObject {

        float GetPathMaxFraction();
    }

    @org.teavm.jso.JSFunctor()
    public interface GetClosestPoint extends org.teavm.jso.JSObject {

        float GetClosestPoint(int inPosition, float inFractionHint);
    }

    @org.teavm.jso.JSFunctor()
    public interface GetPointOnPath extends org.teavm.jso.JSObject {

        void GetPointOnPath(float inFraction, int outPathPosition, int outPathTangent, int outPathNormal, int outPathBinormal);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
