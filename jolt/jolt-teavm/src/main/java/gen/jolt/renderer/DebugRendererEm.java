/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.renderer;

import gen.jolt.idl.IDLBase;
import gen.jolt.physics.PhysicsSystem;
import gen.jolt.physics.body.BodyManagerDrawSettings;
import gen.jolt.math.Mat44;
import gen.jolt.core.Color;
import gen.jolt.math.Vec3;

public class DebugRendererEm extends IDLBase {

    static private Mat44 Mat44_TEMP_STATIC_GEN_0;

    static private DebugArrayTriangle DebugArrayTriangle_TEMP_STATIC_GEN_0;

    static private Color Color_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Color Color_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    static private Color Color_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_5;

    static private Color Color_TEMP_STATIC_GEN_3;

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public DebugRendererEm(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererImplCustom);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererImplCustom);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public void DrawBodies(PhysicsSystem system, BodyManagerDrawSettings inDrawSettings) {
        internal_native_DrawBodies((int) (long) getNativeData().getCPointer(), (int) (long) (system != null ? system.getNativeData().getCPointer() : 0), (int) (long) (inDrawSettings != null ? inDrawSettings.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);
jsObj.DrawBodies(system_addr, inDrawSettings_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "system_addr", "inDrawSettings_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);jsObj.DrawBodies(system_addr, inDrawSettings_addr);")
    private static native void internal_native_DrawBodies(int this_addr, int system_addr, int inDrawSettings_addr);

    public void DrawBodies(PhysicsSystem system) {
        internal_native_DrawBodies((int) (long) getNativeData().getCPointer(), (int) (long) (system != null ? system.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);
jsObj.DrawBodies(system_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "system_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);jsObj.DrawBodies(system_addr);")
    private static native void internal_native_DrawBodies(int this_addr, int system_addr);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor, int inCastShadow, int inDrawMode) {
        internal_native_DrawCylinder((int) (long) getNativeData().getCPointer(), (int) (long) (inMatrix != null ? inMatrix.getNativeData().getCPointer() : 0), inHalfHeight, inRadius, (int) (long) (inColor != null ? inColor.getNativeData().getCPointer() : 0), inCastShadow, inDrawMode);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);
jsObj.DrawCylinder(inMatrix_addr, inHalfHeight, inRadius, inColor_addr, inCastShadow, inDrawMode);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMatrix_addr", "inHalfHeight", "inRadius", "inColor_addr", "inCastShadow", "inDrawMode"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);jsObj.DrawCylinder(inMatrix_addr, inHalfHeight, inRadius, inColor_addr, inCastShadow, inDrawMode);")
    private static native void internal_native_DrawCylinder(int this_addr, int inMatrix_addr, float inHalfHeight, float inRadius, int inColor_addr, int inCastShadow, int inDrawMode);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor, int inCastShadow) {
        internal_native_DrawCylinder((int) (long) getNativeData().getCPointer(), (int) (long) (inMatrix != null ? inMatrix.getNativeData().getCPointer() : 0), inHalfHeight, inRadius, (int) (long) (inColor != null ? inColor.getNativeData().getCPointer() : 0), inCastShadow);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);
jsObj.DrawCylinder(inMatrix_addr, inHalfHeight, inRadius, inColor_addr, inCastShadow);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMatrix_addr", "inHalfHeight", "inRadius", "inColor_addr", "inCastShadow"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);jsObj.DrawCylinder(inMatrix_addr, inHalfHeight, inRadius, inColor_addr, inCastShadow);")
    private static native void internal_native_DrawCylinder(int this_addr, int inMatrix_addr, float inHalfHeight, float inRadius, int inColor_addr, int inCastShadow);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor) {
        internal_native_DrawCylinder((int) (long) getNativeData().getCPointer(), (int) (long) (inMatrix != null ? inMatrix.getNativeData().getCPointer() : 0), inHalfHeight, inRadius, (int) (long) (inColor != null ? inColor.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);
jsObj.DrawCylinder(inMatrix_addr, inHalfHeight, inRadius, inColor_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMatrix_addr", "inHalfHeight", "inRadius", "inColor_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.DebugRendererEm);jsObj.DrawCylinder(inMatrix_addr, inHalfHeight, inRadius, inColor_addr);")
    private static native void internal_native_DrawCylinder(int this_addr, int inMatrix_addr, float inHalfHeight, float inRadius, int inColor_addr);

    public DebugRendererEm() {
        int addr = internal_native_create();
        getNativeData().reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        DrawMesh DrawMesh = new DrawMesh() {

            public void DrawMesh(int id, int inModelMatrix, int triangleArray, int inModelColor, int inCullMode, int inDrawMode) {
                internal_DrawMesh(id, inModelMatrix, triangleArray, inModelColor, inCullMode, inDrawMode);
            }
        };
        DrawLine DrawLine = new DrawLine() {

            public void DrawLine(int inFrom, int inTo, int inColor) {
                internal_DrawLine(inFrom, inTo, inColor);
            }
        };
        DrawTriangle DrawTriangle = new DrawTriangle() {

            public void DrawTriangle(int inV1, int inV2, int inV3, int inColor, int inCastShadow) {
                internal_DrawTriangle(inV1, inV2, inV3, inColor, inCastShadow);
            }
        };
        DrawText3D DrawText3D = new DrawText3D() {

            public void DrawText3D(int inPosition, int inString, int inStringLen, int inColor, float inHeight) {
                internal_DrawText3D(inPosition, inString, inStringLen, inColor, inHeight);
            }
        };
        internal_native_setupCallback((int) getNativeData().getCPointer(), DrawMesh, DrawLine, DrawTriangle, DrawText3D);
    }

    protected void DrawMesh(int id, Mat44 inModelMatrix, DebugArrayTriangle triangleArray, Color inModelColor, int inCullMode, int inDrawMode) {
    }

    private void internal_DrawMesh(int id, long inModelMatrix, long triangleArray, long inModelColor, int inCullMode, int inDrawMode) {
        if (Mat44_TEMP_STATIC_GEN_0 == null)
            Mat44_TEMP_STATIC_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_STATIC_GEN_0.getNativeData().reset(inModelMatrix, false);
        if (DebugArrayTriangle_TEMP_STATIC_GEN_0 == null)
            DebugArrayTriangle_TEMP_STATIC_GEN_0 = new DebugArrayTriangle((byte) 1, (char) 1);
        DebugArrayTriangle_TEMP_STATIC_GEN_0.getNativeData().reset(triangleArray, false);
        if (Color_TEMP_STATIC_GEN_0 == null)
            Color_TEMP_STATIC_GEN_0 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_0.getNativeData().reset(inModelColor, false);
        DrawMesh(id, Mat44_TEMP_STATIC_GEN_0, DebugArrayTriangle_TEMP_STATIC_GEN_0, Color_TEMP_STATIC_GEN_0, inCullMode, inDrawMode);
    }

    protected void DrawLine(Vec3 inFrom, Vec3 inTo, Color inColor) {
    }

    private void internal_DrawLine(long inFrom, long inTo, long inColor) {
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.getNativeData().reset(inFrom, false);
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.getNativeData().reset(inTo, false);
        if (Color_TEMP_STATIC_GEN_1 == null)
            Color_TEMP_STATIC_GEN_1 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_1.getNativeData().reset(inColor, false);
        DrawLine(Vec3_TEMP_STATIC_GEN_0, Vec3_TEMP_STATIC_GEN_1, Color_TEMP_STATIC_GEN_1);
    }

    protected void DrawTriangle(Vec3 inV1, Vec3 inV2, Vec3 inV3, Color inColor, int inCastShadow) {
    }

    private void internal_DrawTriangle(long inV1, long inV2, long inV3, long inColor, int inCastShadow) {
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.getNativeData().reset(inV1, false);
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.getNativeData().reset(inV2, false);
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.getNativeData().reset(inV3, false);
        if (Color_TEMP_STATIC_GEN_2 == null)
            Color_TEMP_STATIC_GEN_2 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_2.getNativeData().reset(inColor, false);
        DrawTriangle(Vec3_TEMP_STATIC_GEN_2, Vec3_TEMP_STATIC_GEN_3, Vec3_TEMP_STATIC_GEN_4, Color_TEMP_STATIC_GEN_2, inCastShadow);
    }

    protected void DrawText3D(Vec3 inPosition, long inString, int inStringLen, Color inColor, float inHeight) {
    }

    private void internal_DrawText3D(long inPosition, long inString, int inStringLen, long inColor, float inHeight) {
        if (Vec3_TEMP_STATIC_GEN_5 == null)
            Vec3_TEMP_STATIC_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_5.getNativeData().reset(inPosition, false);
        if (Color_TEMP_STATIC_GEN_3 == null)
            Color_TEMP_STATIC_GEN_3 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_3.getNativeData().reset(inColor, false);
        DrawText3D(Vec3_TEMP_STATIC_GEN_5, inString, inStringLen, Color_TEMP_STATIC_GEN_3, inHeight);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.DebugRendererImplCustom();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.DebugRendererImplCustom();return jolt.getPointer(jsObj);")
    private static native int internal_native_create();

    @org.teavm.jso.JSBody(params = { "this_addr", "DrawMesh", "DrawLine", "DrawTriangle", "DrawText3D" }, script = "var DebugRendererImplCustom = jolt.wrapPointer(this_addr, jolt.DebugRendererImplCustom); DebugRendererImplCustom.DrawMesh = DrawMesh; DebugRendererImplCustom.DrawLine = DrawLine; DebugRendererImplCustom.DrawTriangle = DrawTriangle; DebugRendererImplCustom.DrawText3D = DrawText3D;")
    private static native void internal_native_setupCallback(int this_addr, DrawMesh DrawMesh, DrawLine DrawLine, DrawTriangle DrawTriangle, DrawText3D DrawText3D);

    @org.teavm.jso.JSFunctor()
    public interface DrawMesh extends org.teavm.jso.JSObject {

        void DrawMesh(int id, int inModelMatrix, int triangleArray, int inModelColor, int inCullMode, int inDrawMode);
    }

    @org.teavm.jso.JSFunctor()
    public interface DrawLine extends org.teavm.jso.JSObject {

        void DrawLine(int inFrom, int inTo, int inColor);
    }

    @org.teavm.jso.JSFunctor()
    public interface DrawTriangle extends org.teavm.jso.JSObject {

        void DrawTriangle(int inV1, int inV2, int inV3, int inColor, int inCastShadow);
    }

    @org.teavm.jso.JSFunctor()
    public interface DrawText3D extends org.teavm.jso.JSObject {

        void DrawText3D(int inPosition, int inString, int inStringLen, int inColor, float inHeight);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static void native_DrawBodies(long this_addr, long system_addr, long inDrawSettings_addr) {
        internal_native_DrawBodies((int) this_addr, (int) system_addr, (int) inDrawSettings_addr);
    }

    public static void native_DrawBodies(long this_addr, long system_addr) {
        internal_native_DrawBodies((int) this_addr, (int) system_addr);
    }

    public static void native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, int inCastShadow, int inDrawMode) {
        internal_native_DrawCylinder((int) this_addr, (int) inMatrix_addr, inHalfHeight, inRadius, (int) inColor_addr, inCastShadow, inDrawMode);
    }

    public static void native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, int inCastShadow) {
        internal_native_DrawCylinder((int) this_addr, (int) inMatrix_addr, inHalfHeight, inRadius, (int) inColor_addr, inCastShadow);
    }

    public static void native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr) {
        internal_native_DrawCylinder((int) this_addr, (int) inMatrix_addr, inHalfHeight, inRadius, (int) inColor_addr);
    }

    public static long native_create() {
        return internal_native_create();
    }
}
