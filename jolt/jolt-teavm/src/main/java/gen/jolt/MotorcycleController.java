/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt;

import gen.jolt.physics.vehicle.MotorcycleControllerSettings;

public class MotorcycleController extends WheeledVehicleController {

    static public final MotorcycleController T_01 = new MotorcycleController((byte) 1, (char) 1);

    static public final MotorcycleController T_02 = new MotorcycleController((byte) 1, (char) 1);

    static public final MotorcycleController T_03 = new MotorcycleController((byte) 1, (char) 1);

    public MotorcycleController(MotorcycleControllerSettings inSettings, VehicleConstraint inConstraint) {
        super((byte) 1, (char) 1);
        int addr = internal_native_create_MotorcycleControllerSettings_VehicleConstraint((int) (long) (inSettings != null ? inSettings.getNativeData().getCPointer() : 0), (int) (long) (inConstraint != null ? inConstraint.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.MotorcycleController(inSettings_addr, inConstraint_addr);
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"inSettings_addr", "inConstraint_addr"}, script = "var jsObj = new jolt.MotorcycleController(inSettings_addr, inConstraint_addr);return jolt.getPointer(jsObj);")
    private static native int internal_native_create_MotorcycleControllerSettings_VehicleConstraint(int inSettings_addr, int inConstraint_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MotorcycleController(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public float GetWheelBase() {
        return internal_native_GetWheelBase((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);
var returnedJSObj = jsObj.GetWheelBase();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);var returnedJSObj = jsObj.GetWheelBase();return returnedJSObj;")
    private static native float internal_native_GetWheelBase(int this_addr);

    public void EnableLeanController(boolean inEnable) {
        internal_native_EnableLeanController((int) (long) getNativeData().getCPointer(), inEnable);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);
jsObj.EnableLeanController(inEnable);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inEnable"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);jsObj.EnableLeanController(inEnable);")
    private static native void internal_native_EnableLeanController(int this_addr, boolean inEnable);

    public boolean IsLeanControllerEnabled() {
        return internal_native_IsLeanControllerEnabled((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);
var returnedJSObj = jsObj.IsLeanControllerEnabled();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.MotorcycleController);var returnedJSObj = jsObj.IsLeanControllerEnabled();return returnedJSObj;")
    private static native boolean internal_native_IsLeanControllerEnabled(int this_addr);

    public static long native_create_MotorcycleControllerSettings_VehicleConstraint(long inSettings_addr, long inConstraint_addr) {
        return internal_native_create_MotorcycleControllerSettings_VehicleConstraint((int) inSettings_addr, (int) inConstraint_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static float native_GetWheelBase(long this_addr) {
        return internal_native_GetWheelBase((int) this_addr);
    }

    public static void native_EnableLeanController(long this_addr, boolean inEnable) {
        internal_native_EnableLeanController((int) this_addr, inEnable);
    }

    public static boolean native_IsLeanControllerEnabled(long this_addr) {
        return internal_native_IsLeanControllerEnabled((int) this_addr);
    }
}
