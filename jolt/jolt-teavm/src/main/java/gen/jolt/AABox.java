/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt;

import gen.jolt.idl.IDLBase;
import gen.jolt.math.Vec3;
import gen.jolt.math.VertexList;

public class AABox extends IDLBase {

    static private AABox AABox_TEMP_STATIC_GEN_0;

    static private AABox AABox_TEMP_STATIC_GEN_1;

    static private AABox AABox_TEMP_STATIC_GEN_2;

    private AABox AABox_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private AABox AABox_TEMP_GEN_1;

    private AABox AABox_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    static public final AABox T_01 = new AABox((byte) 1, (char) 1);

    static public final AABox T_02 = new AABox((byte) 1, (char) 1);

    static public final AABox T_03 = new AABox((byte) 1, (char) 1);

    public AABox() {
        int addr = internal_native_create();
        getNativeData().reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.AABox();
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jolt.AABox();return jolt.getPointer(jsObj);")
    private static native int internal_native_create();

    public AABox(Vec3 inMin, Vec3 inMax) {
        int addr = internal_native_create_Vec3_Vec3((int) (long) (inMin != null ? inMin.getNativeData().getCPointer() : 0), (int) (long) (inMax != null ? inMax.getNativeData().getCPointer() : 0));
        getNativeData().reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jolt.AABox(inMin_addr, inMax_addr);
return jolt.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"inMin_addr", "inMax_addr"}, script = "var jsObj = new jolt.AABox(inMin_addr, inMax_addr);return jolt.getPointer(jsObj);")
    private static native int internal_native_create_Vec3_Vec3(int inMin_addr, int inMax_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public AABox(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public static AABox sBiggest() {
        int pointer = internal_native_sBiggest();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_STATIC_GEN_0 == null)
            AABox_TEMP_STATIC_GEN_0 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return AABox_TEMP_STATIC_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var returnedJSObj = jolt.AABox.prototype.sBiggest();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(script = "var returnedJSObj = jolt.AABox.prototype.sBiggest();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sBiggest();

    public static AABox sFromTwoPoints(Vec3 inP1, Vec3 inP2) {
        int pointer = internal_native_sFromTwoPoints((int) (long) (inP1 != null ? inP1.getNativeData().getCPointer() : 0), (int) (long) (inP2 != null ? inP2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_STATIC_GEN_1 == null)
            AABox_TEMP_STATIC_GEN_1 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_STATIC_GEN_1.getNativeData().reset(pointer, false);
        return AABox_TEMP_STATIC_GEN_1;
    }

    /*[-TEAVM;-NATIVE]
var returnedJSObj = jolt.AABox.prototype.sFromTwoPoints(inP1_addr, inP2_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"inP1_addr", "inP2_addr"}, script = "var returnedJSObj = jolt.AABox.prototype.sFromTwoPoints(inP1_addr, inP2_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sFromTwoPoints(int inP1_addr, int inP2_addr);

    public static AABox sFromTriangle(VertexList inVertices, IndexedTriangle inTriangle) {
        int pointer = internal_native_sFromTriangle((int) (long) (inVertices != null ? inVertices.getNativeData().getCPointer() : 0), (int) (long) (inTriangle != null ? inTriangle.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_STATIC_GEN_2 == null)
            AABox_TEMP_STATIC_GEN_2 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_STATIC_GEN_2.getNativeData().reset(pointer, false);
        return AABox_TEMP_STATIC_GEN_2;
    }

    /*[-TEAVM;-NATIVE]
var returnedJSObj = jolt.AABox.prototype.sFromTriangle(inVertices_addr, inTriangle_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"inVertices_addr", "inTriangle_addr"}, script = "var returnedJSObj = jolt.AABox.prototype.sFromTriangle(inVertices_addr, inTriangle_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sFromTriangle(int inVertices_addr, int inTriangle_addr);

    public boolean Equals(AABox inB) {
        return internal_native_Equals((int) (long) getNativeData().getCPointer(), (int) (long) (inB != null ? inB.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.Equals(inB_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inB_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.Equals(inB_addr);return returnedJSObj;")
    private static native boolean internal_native_Equals(int this_addr, int inB_addr);

    public boolean NotEquals(AABox inB) {
        return internal_native_NotEquals((int) (long) getNativeData().getCPointer(), (int) (long) (inB != null ? inB.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.NotEquals(inB_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inB_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.NotEquals(inB_addr);return returnedJSObj;")
    private static native boolean internal_native_NotEquals(int this_addr, int inB_addr);

    public void SetEmpty() {
        internal_native_SetEmpty((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.SetEmpty();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.SetEmpty();")
    private static native void internal_native_SetEmpty(int this_addr);

    public boolean IsValid() {
        return internal_native_IsValid((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.IsValid();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.IsValid();return returnedJSObj;")
    private static native boolean internal_native_IsValid(int this_addr);

    public void EncapsulateVec3(Vec3 inV) {
        internal_native_EncapsulateVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.EncapsulateVec3(inV_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.EncapsulateVec3(inV_addr);")
    private static native void internal_native_EncapsulateVec3(int this_addr, int inV_addr);

    public void EncapsulateAABox(AABox inBox) {
        internal_native_EncapsulateAABox((int) (long) getNativeData().getCPointer(), (int) (long) (inBox != null ? inBox.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.EncapsulateAABox(inBox_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inBox_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.EncapsulateAABox(inBox_addr);")
    private static native void internal_native_EncapsulateAABox(int this_addr, int inBox_addr);

    public void EncapsulateTriangle(Triangle inTriangle) {
        internal_native_EncapsulateTriangle((int) (long) getNativeData().getCPointer(), (int) (long) (inTriangle != null ? inTriangle.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.EncapsulateTriangle(inTriangle_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inTriangle_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.EncapsulateTriangle(inTriangle_addr);")
    private static native void internal_native_EncapsulateTriangle(int this_addr, int inTriangle_addr);

    public void EncapsulateIndexedTriangle(VertexList inVertices, IndexedTriangle inTriangle) {
        internal_native_EncapsulateIndexedTriangle((int) (long) getNativeData().getCPointer(), (int) (long) (inVertices != null ? inVertices.getNativeData().getCPointer() : 0), (int) (long) (inTriangle != null ? inTriangle.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.EncapsulateIndexedTriangle(inVertices_addr, inTriangle_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inVertices_addr", "inTriangle_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.EncapsulateIndexedTriangle(inVertices_addr, inTriangle_addr);")
    private static native void internal_native_EncapsulateIndexedTriangle(int this_addr, int inVertices_addr, int inTriangle_addr);

    public AABox Intersect(AABox inOther) {
        int pointer = internal_native_Intersect((int) (long) getNativeData().getCPointer(), (int) (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_GEN_0 == null)
            AABox_TEMP_GEN_0 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return AABox_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.Intersect(inOther_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inOther_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.Intersect(inOther_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Intersect(int this_addr, int inOther_addr);

    public void EnsureMinimalEdgeLength(float inMinEdgeLength) {
        internal_native_EnsureMinimalEdgeLength((int) (long) getNativeData().getCPointer(), inMinEdgeLength);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.EnsureMinimalEdgeLength(inMinEdgeLength);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inMinEdgeLength"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.EnsureMinimalEdgeLength(inMinEdgeLength);")
    private static native void internal_native_EnsureMinimalEdgeLength(int this_addr, float inMinEdgeLength);

    public void ExpandBy(Vec3 inV) {
        internal_native_ExpandBy((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.ExpandBy(inV_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.ExpandBy(inV_addr);")
    private static native void internal_native_ExpandBy(int this_addr, int inV_addr);

    public Vec3 GetCenter() {
        int pointer = internal_native_GetCenter((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetCenter();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetCenter();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetCenter(int this_addr);

    public Vec3 GetExtent() {
        int pointer = internal_native_GetExtent((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetExtent();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetExtent();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetExtent(int this_addr);

    public Vec3 GetSize() {
        int pointer = internal_native_GetSize((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetSize();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetSize();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetSize(int this_addr);

    public float GetSurfaceArea() {
        return internal_native_GetSurfaceArea((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetSurfaceArea();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetSurfaceArea();return returnedJSObj;")
    private static native float internal_native_GetSurfaceArea(int this_addr);

    public float GetVolume() {
        return internal_native_GetVolume((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetVolume();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetVolume();return returnedJSObj;")
    private static native float internal_native_GetVolume(int this_addr);

    public boolean ContainsVec3(Vec3 inOther) {
        return internal_native_ContainsVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.ContainsVec3(inOther_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inOther_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.ContainsVec3(inOther_addr);return returnedJSObj;")
    private static native boolean internal_native_ContainsVec3(int this_addr, int inOther_addr);

    public boolean OverlapsAABox(AABox inOther) {
        return internal_native_OverlapsAABox((int) (long) getNativeData().getCPointer(), (int) (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.OverlapsAABox(inOther_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inOther_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.OverlapsAABox(inOther_addr);return returnedJSObj;")
    private static native boolean internal_native_OverlapsAABox(int this_addr, int inOther_addr);

    public boolean OverlapsPlane(AABox inOther) {
        return internal_native_OverlapsPlane((int) (long) getNativeData().getCPointer(), (int) (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.OverlapsPlane(inOther_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inOther_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.OverlapsPlane(inOther_addr);return returnedJSObj;")
    private static native boolean internal_native_OverlapsPlane(int this_addr, int inOther_addr);

    public void TranslateVec3(Vec3 inOther) {
        internal_native_TranslateVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.TranslateVec3(inOther_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inOther_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.TranslateVec3(inOther_addr);")
    private static native void internal_native_TranslateVec3(int this_addr, int inOther_addr);

    public AABox TransformedMat44(Mat44 inOther) {
        int pointer = internal_native_TransformedMat44((int) (long) getNativeData().getCPointer(), (int) (long) (inOther != null ? inOther.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_GEN_1 == null)
            AABox_TEMP_GEN_1 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return AABox_TEMP_GEN_1;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.TransformedMat44(inOther_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inOther_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.TransformedMat44(inOther_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_TransformedMat44(int this_addr, int inOther_addr);

    public AABox Scaled(Vec3 inScale) {
        int pointer = internal_native_Scaled((int) (long) getNativeData().getCPointer(), (int) (long) (inScale != null ? inScale.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (AABox_TEMP_GEN_2 == null)
            AABox_TEMP_GEN_2 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return AABox_TEMP_GEN_2;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.Scaled(inScale_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inScale_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.Scaled(inScale_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Scaled(int this_addr, int inScale_addr);

    public Vec3 GetClosestPoint(Vec3 inV) {
        int pointer = internal_native_GetClosestPoint((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetClosestPoint(inV_addr);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetClosestPoint(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetClosestPoint(int this_addr, int inV_addr);

    public float GetSqDistanceTo(Vec3 inV) {
        return internal_native_GetSqDistanceTo((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.GetSqDistanceTo(inV_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.GetSqDistanceTo(inV_addr);return returnedJSObj;")
    private static native float internal_native_GetSqDistanceTo(int this_addr, int inV_addr);

    public Vec3 get_mMin() {
        int pointer = internal_native_get_mMin((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.get_mMin();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.get_mMin();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_get_mMin(int this_addr);

    public void set_mMin(Vec3 mMin) {
        internal_native_set_mMin((int) (long) getNativeData().getCPointer(), (int) (long) (mMin != null ? mMin.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.set_mMin(mMin_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mMin_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.set_mMin(mMin_addr);")
    private static native void internal_native_set_mMin(int this_addr, int mMin_addr);

    public Vec3 get_mMax() {
        int pointer = internal_native_get_mMax((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
var returnedJSObj = jsObj.get_mMax();
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);var returnedJSObj = jsObj.get_mMax();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_get_mMax(int this_addr);

    public void set_mMax(Vec3 mMax) {
        internal_native_set_mMax((int) (long) getNativeData().getCPointer(), (int) (long) (mMax != null ? mMax.getNativeData().getCPointer() : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);
jsObj.set_mMax(mMax_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mMax_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.AABox);jsObj.set_mMax(mMax_addr);")
    private static native void internal_native_set_mMax(int this_addr, int mMax_addr);

    public static long native_create() {
        return internal_native_create();
    }

    public static long native_create_Vec3_Vec3(long inMin_addr, long inMax_addr) {
        return internal_native_create_Vec3_Vec3((int) inMin_addr, (int) inMax_addr);
    }

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static long native_sBiggest() {
        return internal_native_sBiggest();
    }

    public static long native_sFromTwoPoints(long inP1_addr, long inP2_addr) {
        return internal_native_sFromTwoPoints((int) inP1_addr, (int) inP2_addr);
    }

    public static long native_sFromTriangle(long inVertices_addr, long inTriangle_addr) {
        return internal_native_sFromTriangle((int) inVertices_addr, (int) inTriangle_addr);
    }

    public static boolean native_Equals(long this_addr, long inB_addr) {
        return internal_native_Equals((int) this_addr, (int) inB_addr);
    }

    public static boolean native_NotEquals(long this_addr, long inB_addr) {
        return internal_native_NotEquals((int) this_addr, (int) inB_addr);
    }

    public static void native_SetEmpty(long this_addr) {
        internal_native_SetEmpty((int) this_addr);
    }

    public static boolean native_IsValid(long this_addr) {
        return internal_native_IsValid((int) this_addr);
    }

    public static void native_EncapsulateVec3(long this_addr, long inV_addr) {
        internal_native_EncapsulateVec3((int) this_addr, (int) inV_addr);
    }

    public static void native_EncapsulateAABox(long this_addr, long inBox_addr) {
        internal_native_EncapsulateAABox((int) this_addr, (int) inBox_addr);
    }

    public static void native_EncapsulateTriangle(long this_addr, long inTriangle_addr) {
        internal_native_EncapsulateTriangle((int) this_addr, (int) inTriangle_addr);
    }

    public static void native_EncapsulateIndexedTriangle(long this_addr, long inVertices_addr, long inTriangle_addr) {
        internal_native_EncapsulateIndexedTriangle((int) this_addr, (int) inVertices_addr, (int) inTriangle_addr);
    }

    public static long native_Intersect(long this_addr, long inOther_addr) {
        return internal_native_Intersect((int) this_addr, (int) inOther_addr);
    }

    public static void native_EnsureMinimalEdgeLength(long this_addr, float inMinEdgeLength) {
        internal_native_EnsureMinimalEdgeLength((int) this_addr, inMinEdgeLength);
    }

    public static void native_ExpandBy(long this_addr, long inV_addr) {
        internal_native_ExpandBy((int) this_addr, (int) inV_addr);
    }

    public static long native_GetCenter(long this_addr) {
        return internal_native_GetCenter((int) this_addr);
    }

    public static long native_GetExtent(long this_addr) {
        return internal_native_GetExtent((int) this_addr);
    }

    public static long native_GetSize(long this_addr) {
        return internal_native_GetSize((int) this_addr);
    }

    public static float native_GetSurfaceArea(long this_addr) {
        return internal_native_GetSurfaceArea((int) this_addr);
    }

    public static float native_GetVolume(long this_addr) {
        return internal_native_GetVolume((int) this_addr);
    }

    public static boolean native_ContainsVec3(long this_addr, long inOther_addr) {
        return internal_native_ContainsVec3((int) this_addr, (int) inOther_addr);
    }

    public static boolean native_OverlapsAABox(long this_addr, long inOther_addr) {
        return internal_native_OverlapsAABox((int) this_addr, (int) inOther_addr);
    }

    public static boolean native_OverlapsPlane(long this_addr, long inOther_addr) {
        return internal_native_OverlapsPlane((int) this_addr, (int) inOther_addr);
    }

    public static void native_TranslateVec3(long this_addr, long inOther_addr) {
        internal_native_TranslateVec3((int) this_addr, (int) inOther_addr);
    }

    public static long native_TransformedMat44(long this_addr, long inOther_addr) {
        return internal_native_TransformedMat44((int) this_addr, (int) inOther_addr);
    }

    public static long native_Scaled(long this_addr, long inScale_addr) {
        return internal_native_Scaled((int) this_addr, (int) inScale_addr);
    }

    public static long native_GetClosestPoint(long this_addr, long inV_addr) {
        return internal_native_GetClosestPoint((int) this_addr, (int) inV_addr);
    }

    public static float native_GetSqDistanceTo(long this_addr, long inV_addr) {
        return internal_native_GetSqDistanceTo((int) this_addr, (int) inV_addr);
    }

    public static long native_get_mMin(long this_addr) {
        return internal_native_get_mMin((int) this_addr);
    }

    public static void native_set_mMin(long this_addr, long mMin_addr) {
        internal_native_set_mMin((int) this_addr, (int) mMin_addr);
    }

    public static long native_get_mMax(long this_addr) {
        return internal_native_get_mMax((int) this_addr);
    }

    public static void native_set_mMax(long this_addr, long mMax_addr) {
        internal_native_set_mMax((int) this_addr, (int) mMax_addr);
    }
}
