/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package gen.jolt.math;

import gen.jolt.idl.IDLBase;
import gen.jolt.Vec4;

public class Vec3 extends IDLBase {

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    static private Vec3 Vec3_TEMP_STATIC_GEN_5;

    static private Vec3 Vec3_TEMP_STATIC_GEN_6;

    static private Vec3 Vec3_TEMP_STATIC_GEN_7;

    static private Vec3 Vec3_TEMP_STATIC_GEN_8;

    static private Vec3 Vec3_TEMP_STATIC_GEN_9;

    static private Vec3 Vec3_TEMP_STATIC_GEN_10;

    static private Vec3 Vec3_TEMP_STATIC_GEN_11;

    static private Vec3 Vec3_TEMP_STATIC_GEN_12;

    static private Vec3 Vec3_TEMP_STATIC_GEN_13;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private Vec3 Vec3_TEMP_GEN_6;

    private Vec4 Vec4_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_7;

    private Vec3 Vec3_TEMP_GEN_8;

    private Vec3 Vec3_TEMP_GEN_9;

    private Vec3 Vec3_TEMP_GEN_10;

    private Vec3 Vec3_TEMP_GEN_11;

    private Vec3 Vec3_TEMP_GEN_12;

    private Vec4 Vec4_TEMP_GEN_1;

    private Vec4 Vec4_TEMP_GEN_2;

    private Vec4 Vec4_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_13;

    private Vec3 Vec3_TEMP_GEN_14;

    @Override
    public String toString() {
        return "X: " + GetX() + " Y: " + GetY() + " Z: " + GetZ();
    }

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Vec3(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      jolt.destroy(jsObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public static Vec3 sZero() {
        int pointer = internal_native_sZero();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_0;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sZero();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(script = "var returnedJSObj = jolt.Vec3.prototype.sZero();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sZero();

    public static Vec3 sOne() {
        int pointer = internal_native_sOne();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_1;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sOne();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(script = "var returnedJSObj = jolt.Vec3.prototype.sOne();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sOne();

    public static Vec3 sAxisX() {
        int pointer = internal_native_sAxisX();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_2;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sAxisX();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(script = "var returnedJSObj = jolt.Vec3.prototype.sAxisX();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sAxisX();

    public static Vec3 sAxisY() {
        int pointer = internal_native_sAxisY();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_3;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sAxisY();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(script = "var returnedJSObj = jolt.Vec3.prototype.sAxisY();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sAxisY();

    public static Vec3 sAxisZ() {
        int pointer = internal_native_sAxisZ();
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_4;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sAxisZ();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(script = "var returnedJSObj = jolt.Vec3.prototype.sAxisZ();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sAxisZ();

    public static Vec3 sReplicate(float inValue) {
        int pointer = internal_native_sReplicate(inValue);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_5 == null)
            Vec3_TEMP_STATIC_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_5;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sReplicate(inValue);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inValue"}, script = "var returnedJSObj = jolt.Vec3.prototype.sReplicate(inValue);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sReplicate(float inValue);

    public static Vec3 sMin(Vec3 inLHS, Vec3 inRHS) {
        int pointer = internal_native_sMin((int) (long) (inLHS != null ? inLHS.getNativeData().getCPointer() : 0), (int) (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_6 == null)
            Vec3_TEMP_STATIC_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_6.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_6;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sMin(inLHS_addr, inRHS_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inLHS_addr", "inRHS_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sMin(inLHS_addr, inRHS_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sMin(int inLHS_addr, int inRHS_addr);

    public static Vec3 sMax(Vec3 inLHS, Vec3 inRHS) {
        int pointer = internal_native_sMax((int) (long) (inLHS != null ? inLHS.getNativeData().getCPointer() : 0), (int) (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_7 == null)
            Vec3_TEMP_STATIC_GEN_7 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_7.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_7;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sMax(inLHS_addr, inRHS_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inLHS_addr", "inRHS_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sMax(inLHS_addr, inRHS_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sMax(int inLHS_addr, int inRHS_addr);

    public static Vec3 sClamp(Vec3 inValue, Vec3 inMin, Vec3 inMax) {
        int pointer = internal_native_sClamp((int) (long) (inValue != null ? inValue.getNativeData().getCPointer() : 0), (int) (long) (inMin != null ? inMin.getNativeData().getCPointer() : 0), (int) (long) (inMax != null ? inMax.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_8 == null)
            Vec3_TEMP_STATIC_GEN_8 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_8.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_8;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sClamp(inValue_addr, inMin_addr, inMax_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inValue_addr", "inMin_addr", "inMax_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sClamp(inValue_addr, inMin_addr, inMax_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sClamp(int inValue_addr, int inMin_addr, int inMax_addr);

    public static Vec3 sFusedMultiplyAdd(Vec3 inMul1, Vec3 inMul2, Vec3 inAdd) {
        int pointer = internal_native_sFusedMultiplyAdd((int) (long) (inMul1 != null ? inMul1.getNativeData().getCPointer() : 0), (int) (long) (inMul2 != null ? inMul2.getNativeData().getCPointer() : 0), (int) (long) (inAdd != null ? inAdd.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_9 == null)
            Vec3_TEMP_STATIC_GEN_9 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_9.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_9;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sFusedMultiplyAdd(inMul1_addr, inMul2_addr, inAdd_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inMul1_addr", "inMul2_addr", "inAdd_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sFusedMultiplyAdd(inMul1_addr, inMul2_addr, inAdd_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sFusedMultiplyAdd(int inMul1_addr, int inMul2_addr, int inAdd_addr);

    public static Vec3 sOr(Vec3 inV1, Vec3 inV2) {
        int pointer = internal_native_sOr((int) (long) (inV1 != null ? inV1.getNativeData().getCPointer() : 0), (int) (long) (inV2 != null ? inV2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_10 == null)
            Vec3_TEMP_STATIC_GEN_10 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_10.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_10;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sOr(inV1_addr, inV2_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inV1_addr", "inV2_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sOr(inV1_addr, inV2_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sOr(int inV1_addr, int inV2_addr);

    public static Vec3 sXor(Vec3 inV1, Vec3 inV2) {
        int pointer = internal_native_sXor((int) (long) (inV1 != null ? inV1.getNativeData().getCPointer() : 0), (int) (long) (inV2 != null ? inV2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_11 == null)
            Vec3_TEMP_STATIC_GEN_11 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_11.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_11;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sXor(inV1_addr, inV2_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inV1_addr", "inV2_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sXor(inV1_addr, inV2_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sXor(int inV1_addr, int inV2_addr);

    public static Vec3 sAnd(Vec3 inV1, Vec3 inV2) {
        int pointer = internal_native_sAnd((int) (long) (inV1 != null ? inV1.getNativeData().getCPointer() : 0), (int) (long) (inV2 != null ? inV2.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_12 == null)
            Vec3_TEMP_STATIC_GEN_12 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_12.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_12;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sAnd(inV1_addr, inV2_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inV1_addr", "inV2_addr"}, script = "var returnedJSObj = jolt.Vec3.prototype.sAnd(inV1_addr, inV2_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sAnd(int inV1_addr, int inV2_addr);

    public static Vec3 sUnitSpherical(float inTheta, float inPhi) {
        int pointer = internal_native_sUnitSpherical(inTheta, inPhi);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_STATIC_GEN_13 == null)
            Vec3_TEMP_STATIC_GEN_13 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_13.getNativeData().reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_13;
    }

    /*
      [-TEAVM;-NATIVE]
      var returnedJSObj = jolt.Vec3.prototype.sUnitSpherical(inTheta, inPhi);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"inTheta", "inPhi"}, script = "var returnedJSObj = jolt.Vec3.prototype.sUnitSpherical(inTheta, inPhi);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_sUnitSpherical(float inTheta, float inPhi);

    public float GetComponent(int inCoordinate) {
        return internal_native_GetComponent((int) (long) getNativeData().getCPointer(), inCoordinate);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetComponent(inCoordinate);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inCoordinate"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetComponent(inCoordinate);return returnedJSObj;")
    private static native float internal_native_GetComponent(int this_addr, int inCoordinate);

    public boolean Equals(Vec3 inV) {
        return internal_native_Equals((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Equals(inV_addr);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Equals(inV_addr);return returnedJSObj;")
    private static native boolean internal_native_Equals(int this_addr, int inV_addr);

    public boolean NotEquals(Vec3 inV) {
        return internal_native_NotEquals((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.NotEquals(inV_addr);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.NotEquals(inV_addr);return returnedJSObj;")
    private static native boolean internal_native_NotEquals(int this_addr, int inV_addr);

    public float LengthSq() {
        return internal_native_LengthSq((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.LengthSq();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.LengthSq();return returnedJSObj;")
    private static native float internal_native_LengthSq(int this_addr);

    public float Length() {
        return internal_native_Length((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Length();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Length();return returnedJSObj;")
    private static native float internal_native_Length(int this_addr);

    public Vec3 Normalized() {
        int pointer = internal_native_Normalized((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Normalized();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Normalized();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Normalized(int this_addr);

    public Vec3 NormalizedOr(Vec3 inZeroValue) {
        int pointer = internal_native_NormalizedOr((int) (long) getNativeData().getCPointer(), (int) (long) (inZeroValue != null ? inZeroValue.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.NormalizedOr(inZeroValue_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inZeroValue_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.NormalizedOr(inZeroValue_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_NormalizedOr(int this_addr, int inZeroValue_addr);

    public Vec3 GetNormalizedPerpendicular() {
        int pointer = internal_native_GetNormalizedPerpendicular((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetNormalizedPerpendicular();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetNormalizedPerpendicular();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetNormalizedPerpendicular(int this_addr);

    public float GetX() {
        return internal_native_GetX((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetX();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetX();return returnedJSObj;")
    private static native float internal_native_GetX(int this_addr);

    public float GetY() {
        return internal_native_GetY((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetY();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetY();return returnedJSObj;")
    private static native float internal_native_GetY(int this_addr);

    public float GetZ() {
        return internal_native_GetZ((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetZ();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetZ();return returnedJSObj;")
    private static native float internal_native_GetZ(int this_addr);

    public void SetX(float inX) {
        internal_native_SetX((int) (long) getNativeData().getCPointer(), inX);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      jsObj.SetX(inX);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inX"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);jsObj.SetX(inX);")
    private static native void internal_native_SetX(int this_addr, float inX);

    public void SetY(float inY) {
        internal_native_SetY((int) (long) getNativeData().getCPointer(), inY);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      jsObj.SetY(inY);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inY"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);jsObj.SetY(inY);")
    private static native void internal_native_SetY(int this_addr, float inY);

    public void SetZ(float inZ) {
        internal_native_SetZ((int) (long) getNativeData().getCPointer(), inZ);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      jsObj.SetZ(inZ);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inZ"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);jsObj.SetZ(inZ);")
    private static native void internal_native_SetZ(int this_addr, float inZ);

    public void Set(float inX, float inY, float inZ) {
        internal_native_Set((int) (long) getNativeData().getCPointer(), inX, inY, inZ);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      jsObj.Set(inX, inY, inZ);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY", "inZ"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);jsObj.Set(inX, inY, inZ);")
    private static native void internal_native_Set(int this_addr, float inX, float inY, float inZ);

    public void SetComponent(int inCoordinate, float inValue) {
        internal_native_SetComponent((int) (long) getNativeData().getCPointer(), inCoordinate, inValue);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      jsObj.SetComponent(inCoordinate, inValue);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inCoordinate", "inValue"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);jsObj.SetComponent(inCoordinate, inValue);")
    private static native void internal_native_SetComponent(int this_addr, int inCoordinate, float inValue);

    public boolean IsNearZero(float inMaxDistSq) {
        return internal_native_IsNearZero((int) (long) getNativeData().getCPointer(), inMaxDistSq);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.IsNearZero(inMaxDistSq);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inMaxDistSq"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.IsNearZero(inMaxDistSq);return returnedJSObj;")
    private static native boolean internal_native_IsNearZero(int this_addr, float inMaxDistSq);

    public boolean IsNearZero() {
        return internal_native_IsNearZero((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.IsNearZero();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.IsNearZero();return returnedJSObj;")
    private static native boolean internal_native_IsNearZero(int this_addr);

    public boolean IsClose(Vec3 inV, float inMaxDistSq) {
        return internal_native_IsClose((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0), inMaxDistSq);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.IsClose(inV_addr, inMaxDistSq);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr", "inMaxDistSq"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.IsClose(inV_addr, inMaxDistSq);return returnedJSObj;")
    private static native boolean internal_native_IsClose(int this_addr, int inV_addr, float inMaxDistSq);

    public boolean IsClose(Vec3 inV) {
        return internal_native_IsClose((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.IsClose(inV_addr);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.IsClose(inV_addr);return returnedJSObj;")
    private static native boolean internal_native_IsClose(int this_addr, int inV_addr);

    public boolean IsNormalized(float inTolerance) {
        return internal_native_IsNormalized((int) (long) getNativeData().getCPointer(), inTolerance);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.IsNormalized(inTolerance);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inTolerance"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.IsNormalized(inTolerance);return returnedJSObj;")
    private static native boolean internal_native_IsNormalized(int this_addr, float inTolerance);

    public boolean IsNormalized() {
        return internal_native_IsNormalized((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.IsNormalized();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.IsNormalized();return returnedJSObj;")
    private static native boolean internal_native_IsNormalized(int this_addr);

    public int GetLowestComponentIndex() {
        return internal_native_GetLowestComponentIndex((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetLowestComponentIndex();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetLowestComponentIndex();return returnedJSObj;")
    private static native int internal_native_GetLowestComponentIndex(int this_addr);

    public int GetHighestComponentIndex() {
        return internal_native_GetHighestComponentIndex((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetHighestComponentIndex();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetHighestComponentIndex();return returnedJSObj;")
    private static native int internal_native_GetHighestComponentIndex(int this_addr);

    public Vec3 Abs() {
        int pointer = internal_native_Abs((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Abs();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Abs();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Abs(int this_addr);

    public Vec3 Reciprocal() {
        int pointer = internal_native_Reciprocal((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Reciprocal();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Reciprocal();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Reciprocal(int this_addr);

    public Vec3 Cross(Vec3 inRHS) {
        int pointer = internal_native_Cross((int) (long) getNativeData().getCPointer(), (int) (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Cross(inRHS_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inRHS_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Cross(inRHS_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Cross(int this_addr, int inRHS_addr);

    public float Dot(Vec3 inRHS) {
        return internal_native_Dot((int) (long) getNativeData().getCPointer(), (int) (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Dot(inRHS_addr);
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inRHS_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Dot(inRHS_addr);return returnedJSObj;")
    private static native float internal_native_Dot(int this_addr, int inRHS_addr);

    public Vec3 DotV(Vec3 inRHS) {
        int pointer = internal_native_DotV((int) (long) getNativeData().getCPointer(), (int) (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.DotV(inRHS_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inRHS_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.DotV(inRHS_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_DotV(int this_addr, int inRHS_addr);

    public Vec4 DotV4(Vec3 inRHS) {
        int pointer = internal_native_DotV4((int) (long) getNativeData().getCPointer(), (int) (long) (inRHS != null ? inRHS.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec4_TEMP_GEN_0 == null)
            Vec4_TEMP_GEN_0 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_0.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_0;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.DotV4(inRHS_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inRHS_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.DotV4(inRHS_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_DotV4(int this_addr, int inRHS_addr);

    public Vec3 Add(Vec3 inV) {
        internal_native_Add((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        return this;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Add(inV_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Add(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Add(int this_addr, int inV_addr);

    public Vec3 Sub(Vec3 inV) {
        internal_native_Sub((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        return this;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Sub(inV_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Sub(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Sub(int this_addr, int inV_addr);

    public Vec3 Mul(float inV) {
        internal_native_Mul((int) (long) getNativeData().getCPointer(), inV);
        return this;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Mul(inV);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Mul(inV);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Mul(int this_addr, float inV);

    public Vec3 Div(float inV) {
        internal_native_Div((int) (long) getNativeData().getCPointer(), inV);
        return this;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Div(inV);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Div(inV);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Div(int this_addr, float inV);

    public Vec3 MulVec3(Vec3 inV) {
        int pointer = internal_native_MulVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_7 == null)
            Vec3_TEMP_GEN_7 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_7.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_7;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.MulVec3(inV_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.MulVec3(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_MulVec3(int this_addr, int inV_addr);

    public Vec3 MulFloat(float inV) {
        int pointer = internal_native_MulFloat((int) (long) getNativeData().getCPointer(), inV);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_8 == null)
            Vec3_TEMP_GEN_8 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_8.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_8;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.MulFloat(inV);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.MulFloat(inV);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_MulFloat(int this_addr, float inV);

    public Vec3 DivVec3(Vec3 inV) {
        int pointer = internal_native_DivVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_9 == null)
            Vec3_TEMP_GEN_9 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_9.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_9;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.DivVec3(inV_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.DivVec3(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_DivVec3(int this_addr, int inV_addr);

    public Vec3 DivFloat(float inV) {
        int pointer = internal_native_DivFloat((int) (long) getNativeData().getCPointer(), inV);
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_10 == null)
            Vec3_TEMP_GEN_10 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_10.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_10;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.DivFloat(inV);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.DivFloat(inV);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_DivFloat(int this_addr, float inV);

    public Vec3 AddVec3(Vec3 inV) {
        int pointer = internal_native_AddVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_11 == null)
            Vec3_TEMP_GEN_11 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_11.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_11;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.AddVec3(inV_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.AddVec3(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_AddVec3(int this_addr, int inV_addr);

    public Vec3 SubVec3(Vec3 inV) {
        int pointer = internal_native_SubVec3((int) (long) getNativeData().getCPointer(), (int) (long) (inV != null ? inV.getNativeData().getCPointer() : 0));
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_12 == null)
            Vec3_TEMP_GEN_12 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_12.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_12;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.SubVec3(inV_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "inV_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.SubVec3(inV_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_SubVec3(int this_addr, int inV_addr);

    public Vec4 SplatX() {
        int pointer = internal_native_SplatX((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec4_TEMP_GEN_1 == null)
            Vec4_TEMP_GEN_1 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_1.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_1;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.SplatX();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.SplatX();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_SplatX(int this_addr);

    public Vec4 SplatY() {
        int pointer = internal_native_SplatY((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec4_TEMP_GEN_2 == null)
            Vec4_TEMP_GEN_2 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_2.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_2;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.SplatY();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.SplatY();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_SplatY(int this_addr);

    public Vec4 SplatZ() {
        int pointer = internal_native_SplatZ((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec4_TEMP_GEN_3 == null)
            Vec4_TEMP_GEN_3 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_3.getNativeData().reset(pointer, false);
        return Vec4_TEMP_GEN_3;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.SplatZ();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.SplatZ();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_SplatZ(int this_addr);

    public float ReduceMin() {
        return internal_native_ReduceMin((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.ReduceMin();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.ReduceMin();return returnedJSObj;")
    private static native float internal_native_ReduceMin(int this_addr);

    public float ReduceMax() {
        return internal_native_ReduceMax((int) (long) getNativeData().getCPointer());
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.ReduceMax();
      return returnedJSObj;
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.ReduceMax();return returnedJSObj;")
    private static native float internal_native_ReduceMax(int this_addr);

    public Vec3 Sqrt() {
        int pointer = internal_native_Sqrt((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_13 == null)
            Vec3_TEMP_GEN_13 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_13.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_13;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.Sqrt();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.Sqrt();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_Sqrt(int this_addr);

    public Vec3 GetSign() {
        int pointer = internal_native_GetSign((int) (long) getNativeData().getCPointer());
        if (pointer == 0)
            throw new RuntimeException("Pointer is null");
        if (Vec3_TEMP_GEN_14 == null)
            Vec3_TEMP_GEN_14 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_14.getNativeData().reset(pointer, false);
        return Vec3_TEMP_GEN_14;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);
      var returnedJSObj = jsObj.GetSign();
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return jolt.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.Vec3);var returnedJSObj = jsObj.GetSign();if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    private static native int internal_native_GetSign(int this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static long native_sZero() {
        return internal_native_sZero();
    }

    public static long native_sOne() {
        return internal_native_sOne();
    }

    public static long native_sAxisX() {
        return internal_native_sAxisX();
    }

    public static long native_sAxisY() {
        return internal_native_sAxisY();
    }

    public static long native_sAxisZ() {
        return internal_native_sAxisZ();
    }

    public static long native_sReplicate(float inValue) {
        return internal_native_sReplicate(inValue);
    }

    public static long native_sMin(long inLHS_addr, long inRHS_addr) {
        return internal_native_sMin((int) inLHS_addr, (int) inRHS_addr);
    }

    public static long native_sMax(long inLHS_addr, long inRHS_addr) {
        return internal_native_sMax((int) inLHS_addr, (int) inRHS_addr);
    }

    public static long native_sClamp(long inValue_addr, long inMin_addr, long inMax_addr) {
        return internal_native_sClamp((int) inValue_addr, (int) inMin_addr, (int) inMax_addr);
    }

    public static long native_sFusedMultiplyAdd(long inMul1_addr, long inMul2_addr, long inAdd_addr) {
        return internal_native_sFusedMultiplyAdd((int) inMul1_addr, (int) inMul2_addr, (int) inAdd_addr);
    }

    public static long native_sOr(long inV1_addr, long inV2_addr) {
        return internal_native_sOr((int) inV1_addr, (int) inV2_addr);
    }

    public static long native_sXor(long inV1_addr, long inV2_addr) {
        return internal_native_sXor((int) inV1_addr, (int) inV2_addr);
    }

    public static long native_sAnd(long inV1_addr, long inV2_addr) {
        return internal_native_sAnd((int) inV1_addr, (int) inV2_addr);
    }

    public static long native_sUnitSpherical(float inTheta, float inPhi) {
        return internal_native_sUnitSpherical(inTheta, inPhi);
    }

    public static float native_GetComponent(long this_addr, int inCoordinate) {
        return internal_native_GetComponent((int) this_addr, inCoordinate);
    }

    public static boolean native_Equals(long this_addr, long inV_addr) {
        return internal_native_Equals((int) this_addr, (int) inV_addr);
    }

    public static boolean native_NotEquals(long this_addr, long inV_addr) {
        return internal_native_NotEquals((int) this_addr, (int) inV_addr);
    }

    public static float native_LengthSq(long this_addr) {
        return internal_native_LengthSq((int) this_addr);
    }

    public static float native_Length(long this_addr) {
        return internal_native_Length((int) this_addr);
    }

    public static long native_Normalized(long this_addr) {
        return internal_native_Normalized((int) this_addr);
    }

    public static long native_NormalizedOr(long this_addr, long inZeroValue_addr) {
        return internal_native_NormalizedOr((int) this_addr, (int) inZeroValue_addr);
    }

    public static long native_GetNormalizedPerpendicular(long this_addr) {
        return internal_native_GetNormalizedPerpendicular((int) this_addr);
    }

    public static float native_GetX(long this_addr) {
        return internal_native_GetX((int) this_addr);
    }

    public static float native_GetY(long this_addr) {
        return internal_native_GetY((int) this_addr);
    }

    public static float native_GetZ(long this_addr) {
        return internal_native_GetZ((int) this_addr);
    }

    public static void native_SetX(long this_addr, float inX) {
        internal_native_SetX((int) this_addr, inX);
    }

    public static void native_SetY(long this_addr, float inY) {
        internal_native_SetY((int) this_addr, inY);
    }

    public static void native_SetZ(long this_addr, float inZ) {
        internal_native_SetZ((int) this_addr, inZ);
    }

    public static void native_Set(long this_addr, float inX, float inY, float inZ) {
        internal_native_Set((int) this_addr, inX, inY, inZ);
    }

    public static void native_SetComponent(long this_addr, int inCoordinate, float inValue) {
        internal_native_SetComponent((int) this_addr, inCoordinate, inValue);
    }

    public static boolean native_IsNearZero(long this_addr, float inMaxDistSq) {
        return internal_native_IsNearZero((int) this_addr, inMaxDistSq);
    }

    public static boolean native_IsNearZero(long this_addr) {
        return internal_native_IsNearZero((int) this_addr);
    }

    public static boolean native_IsClose(long this_addr, long inV_addr, float inMaxDistSq) {
        return internal_native_IsClose((int) this_addr, (int) inV_addr, inMaxDistSq);
    }

    public static boolean native_IsClose(long this_addr, long inV_addr) {
        return internal_native_IsClose((int) this_addr, (int) inV_addr);
    }

    public static boolean native_IsNormalized(long this_addr, float inTolerance) {
        return internal_native_IsNormalized((int) this_addr, inTolerance);
    }

    public static boolean native_IsNormalized(long this_addr) {
        return internal_native_IsNormalized((int) this_addr);
    }

    public static int native_GetLowestComponentIndex(long this_addr) {
        return internal_native_GetLowestComponentIndex((int) this_addr);
    }

    public static int native_GetHighestComponentIndex(long this_addr) {
        return internal_native_GetHighestComponentIndex((int) this_addr);
    }

    public static long native_Abs(long this_addr) {
        return internal_native_Abs((int) this_addr);
    }

    public static long native_Reciprocal(long this_addr) {
        return internal_native_Reciprocal((int) this_addr);
    }

    public static long native_Cross(long this_addr, long inRHS_addr) {
        return internal_native_Cross((int) this_addr, (int) inRHS_addr);
    }

    public static float native_Dot(long this_addr, long inRHS_addr) {
        return internal_native_Dot((int) this_addr, (int) inRHS_addr);
    }

    public static long native_DotV(long this_addr, long inRHS_addr) {
        return internal_native_DotV((int) this_addr, (int) inRHS_addr);
    }

    public static long native_DotV4(long this_addr, long inRHS_addr) {
        return internal_native_DotV4((int) this_addr, (int) inRHS_addr);
    }

    public static long native_Add(long this_addr, long inV_addr) {
        return internal_native_Add((int) this_addr, (int) inV_addr);
    }

    public static long native_Sub(long this_addr, long inV_addr) {
        return internal_native_Sub((int) this_addr, (int) inV_addr);
    }

    public static long native_Mul(long this_addr, float inV) {
        return internal_native_Mul((int) this_addr, inV);
    }

    public static long native_Div(long this_addr, float inV) {
        return internal_native_Div((int) this_addr, inV);
    }

    public static long native_MulVec3(long this_addr, long inV_addr) {
        return internal_native_MulVec3((int) this_addr, (int) inV_addr);
    }

    public static long native_MulFloat(long this_addr, float inV) {
        return internal_native_MulFloat((int) this_addr, inV);
    }

    public static long native_DivVec3(long this_addr, long inV_addr) {
        return internal_native_DivVec3((int) this_addr, (int) inV_addr);
    }

    public static long native_DivFloat(long this_addr, float inV) {
        return internal_native_DivFloat((int) this_addr, inV);
    }

    public static long native_AddVec3(long this_addr, long inV_addr) {
        return internal_native_AddVec3((int) this_addr, (int) inV_addr);
    }

    public static long native_SubVec3(long this_addr, long inV_addr) {
        return internal_native_SubVec3((int) this_addr, (int) inV_addr);
    }

    public static long native_SplatX(long this_addr) {
        return internal_native_SplatX((int) this_addr);
    }

    public static long native_SplatY(long this_addr) {
        return internal_native_SplatY((int) this_addr);
    }

    public static long native_SplatZ(long this_addr) {
        return internal_native_SplatZ((int) this_addr);
    }

    public static float native_ReduceMin(long this_addr) {
        return internal_native_ReduceMin((int) this_addr);
    }

    public static float native_ReduceMax(long this_addr) {
        return internal_native_ReduceMax((int) this_addr);
    }

    public static long native_Sqrt(long this_addr) {
        return internal_native_Sqrt((int) this_addr);
    }

    public static long native_GetSign(long this_addr) {
        return internal_native_GetSign((int) this_addr);
    }
}
