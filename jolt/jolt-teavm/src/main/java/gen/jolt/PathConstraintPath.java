/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt;

import gen.jolt.idl.IDLBase;

public class PathConstraintPath extends IDLBase {

    static public final PathConstraintPath T_01 = new PathConstraintPath((byte) 1, (char) 1);

    static public final PathConstraintPath T_02 = new PathConstraintPath((byte) 1, (char) 1);

    static public final PathConstraintPath T_03 = new PathConstraintPath((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public PathConstraintPath(byte b, char c) {
    }

    public void dispose() {
        super.dispose();
    }

    public boolean isDisposed() {
        return super.isDisposed();
    }

    protected void deleteNative() {
        internal_native_deleteNative((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);
jolt.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);jolt.destroy(jsObj);")
    private static native void internal_native_deleteNative(int this_addr);

    public boolean IsLooping() {
        return internal_native_IsLooping((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);
var returnedJSObj = jsObj.IsLooping();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);var returnedJSObj = jsObj.IsLooping();return returnedJSObj;")
    private static native boolean internal_native_IsLooping(int this_addr);

    public void SetIsLooping(boolean inIsLooping) {
        internal_native_SetIsLooping((int) (long) getNativeData().getCPointer(), inIsLooping);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);
jsObj.SetIsLooping(inIsLooping);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inIsLooping"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);jsObj.SetIsLooping(inIsLooping);")
    private static native void internal_native_SetIsLooping(int this_addr, boolean inIsLooping);

    public int GetRefCount() {
        return internal_native_GetRefCount((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);
var returnedJSObj = jsObj.GetRefCount();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);var returnedJSObj = jsObj.GetRefCount();return returnedJSObj;")
    private static native int internal_native_GetRefCount(int this_addr);

    public void AddRef() {
        internal_native_AddRef((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);
jsObj.AddRef();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);jsObj.AddRef();")
    private static native void internal_native_AddRef(int this_addr);

    public void Release() {
        internal_native_Release((int) (long) getNativeData().getCPointer());
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);
jsObj.Release();
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.PathConstraintPath);jsObj.Release();")
    private static native void internal_native_Release(int this_addr);

    public static void native_deleteNative(long this_addr) {
        internal_native_deleteNative((int) this_addr);
    }

    public static boolean native_IsLooping(long this_addr) {
        return internal_native_IsLooping((int) this_addr);
    }

    public static void native_SetIsLooping(long this_addr, boolean inIsLooping) {
        internal_native_SetIsLooping((int) this_addr, inIsLooping);
    }

    public static int native_GetRefCount(long this_addr) {
        return internal_native_GetRefCount((int) this_addr);
    }

    public static void native_AddRef(long this_addr) {
        internal_native_AddRef((int) this_addr);
    }

    public static void native_Release(long this_addr) {
        internal_native_Release((int) this_addr);
    }
}
